{"prompt": "Define a function fib(n:int)->int computing the nth Fibonacci number (n>=0). Then print fib(10).", "tests": ["assert fib(0)==0; assert fib(1)==1; assert fib(10)==55"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define factorial(n:int)->int using iteration (no recursion). Print factorial(8).", "tests": ["assert factorial(0)==1; assert factorial(5)==120; assert factorial(8)==40320"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define gcd(a:int,b:int)->int and lcm(a:int,b:int)->int. Use Euclid for gcd. Print lcm(21,6).", "tests": ["assert gcd(54,24)==6; assert lcm(21,6)==42; assert lcm(5,7)==35"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define is_prime(n:int)->bool (n>=0). Reasonably efficient for n<=10^6. Print is_prime(101).", "tests": ["assert is_prime(2) and is_prime(3) and is_prime(101); assert not is_prime(0) and not is_prime(1) and not is_prime(100)"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define sieve(n:int)->list[int] returning all primes <= n. Print len(sieve(1000)).", "tests": ["p=sieve(30); assert p==[2,3,5,7,11,13,17,19,23,29]; assert len(sieve(2))==1; assert len(sieve(100))==25"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define nth_prime(k:int)->int (1-indexed). Print nth_prime(25).", "tests": ["assert nth_prime(1)==2; assert nth_prime(6)==13; assert nth_prime(25)==97"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define mod_pow(a:int,b:int,m:int)->int computing a^b mod m by fast exponentiation. Print mod_pow(5,117,19).", "tests": ["assert mod_pow(2,10,1000)==24; assert mod_pow(5,117,19)==1"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define int_to_roman(num:int)->str (1..3999). Print int_to_roman(944).", "tests": ["assert int_to_roman(3)=='III'; assert int_to_roman(58)=='LVIII'; assert int_to_roman(944)=='CMXLIV'"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define roman_to_int(s:str)->int (valid Roman). Print roman_to_int('MCMXCIV').", "tests": ["assert roman_to_int('III')==3; assert roman_to_int('LVIII')==58; assert roman_to_int('MCMXCIV')==1994"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define is_palindrome_num(x:int)->bool without converting to string (use math). Print is_palindrome_num(12321).", "tests": ["assert is_palindrome_num(0); assert is_palindrome_num(12321); assert not is_palindrome_num(123)"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define is_armstrong(n:int)->bool (base 10). Print is_armstrong(371).", "tests": ["assert is_armstrong(0); assert is_armstrong(1); assert is_armstrong(153); assert is_armstrong(371); assert not is_armstrong(100)"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define reverse_str(s:str)->str without slicing. Print reverse_str('stressed').", "tests": ["assert reverse_str('stressed')=='desserts'; assert reverse_str('ab')=='ba'; assert reverse_str('')==''"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define is_anagram(a:str,b:str)->bool (ignore case and spaces). Print is_anagram('Listen','Silent').", "tests": ["assert is_anagram('Listen','Silent'); assert is_anagram('A gentleman','Elegant man'); assert not is_anagram('abc','ab')"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define is_isogram(s:str)->bool (letters only, ignore case/hyphens/spaces). Print is_isogram('background').", "tests": ["assert is_isogram('background'); assert not is_isogram('letter'); assert is_isogram('six-year-old')"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define count_vowels(s:str)->int counting a,e,i,o,u (both cases). Print count_vowels('Apples and Oranges').", "tests": ["assert count_vowels('')==0; assert count_vowels('Apples and Oranges')==7"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define rle_encode(s:str)->str (run-length encoding, e.g., 'AAAB'->'3A1B'). Print rle_encode('WWWWBWW').", "tests": ["assert rle_encode('AAAB')=='3A1B'; assert rle_encode('WWWWBWW')=='4W1B2W'; assert rle_encode('')==''"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define caesar_cipher(s:str,shift:int)->str shifting letters (a-z, A-Z) with wrap; preserve non-letters. Print caesar_cipher('Abc-Z!',3).", "tests": ["assert caesar_cipher('Abc-Z!',3)=='Def-C!'; assert caesar_cipher('xyz',4)=='bcd'"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define most_common_char(s:str)->str returning the most frequent non-space char; ties -> smallest lexicographically. Print most_common_char('abbcccdddde').", "tests": ["assert most_common_char('abbcccdddde')=='d'; assert most_common_char('aabb')=='a'"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define two_sum(nums:list[int],target:int)->tuple[int,int] returning indices i<j with nums[i]+nums[j]==target. Print two_sum([2,7,11,15],9).", "tests": ["assert two_sum([2,7,11,15],9) in [(0,1)]; assert set(two_sum([3,2,4],6))=={1,2}"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define unique(seq:list)->list preserving first occurrence order. Print unique([1,2,2,3,1,4]).", "tests": ["assert unique([1,2,2,3,1,4])==[1,2,3,4]; assert unique([])==[]"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define rotate_right(a:list[int],k:int)->list[int] rotating right by k (k may exceed len). Print rotate_right([1,2,3,4,5],2).", "tests": ["assert rotate_right([1,2,3,4,5],2)==[4,5,1,2,3]; assert rotate_right([1],10)==[1]"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define flatten(nested:list)->list that flattens a list of lists by one level only. Print flatten([[1,2],[3],[4,5]]).", "tests": ["assert flatten([[1,2],[3],[4,5]])==[1,2,3,4,5]; assert flatten([])==[]"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define group_anagrams(words:list[str])->list[list[str]]. Order within groups doesn't matter; groups order doesn't matter. Print groups for ['eat','tea','tan','ate','nat','bat'].", "tests": ["res=group_anagrams(['eat','tea','tan','ate','nat','bat']); assert sorted([sorted(g) for g in res])==sorted([['ate','eat','tea'],['nat','tan'],['bat']])"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define top_k_frequent(nums:list[int],k:int)->list[int]. If tie, smaller number first. Print top_k_frequent([1,1,1,2,2,3],2).", "tests": ["assert top_k_frequent([1,1,1,2,2,3],2)==[1,2]; assert top_k_frequent([4,4,4,5,5,6],2)==[4,5]"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define merge_intervals(iv:list[list[int]])->list[list[int]] merging overlaps; output sorted by start. Print merge_intervals([[1,3],[2,6],[8,10],[15,18]]).", "tests": ["assert merge_intervals([[1,3],[2,6],[8,10],[15,18]])==[[1,6],[8,10],[15,18]]; assert merge_intervals([[1,4],[4,5]])==[[1,5]]"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define binary_search(a:list[int],x:int)->int returning index or -1 if absent (a is sorted asc). Print binary_search([1,3,5,7,9],7).", "tests": ["assert binary_search([1,3,5,7,9],7)==3; assert binary_search([1,3,5],2)==-1"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define merge_sort(a:list[int])->list[int] (no built-in sort). Print merge_sort([3,1,4,1,5,9]).", "tests": ["assert merge_sort([3,1,4,1,5,9])==[1,1,3,4,5,9]; assert merge_sort([])==[]; assert merge_sort([1])==[1]"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define coin_change(coins:list[int],amount:int)->int returning min coins to make amount or -1 if impossible. Print coin_change([1,2,5],11).", "tests": ["assert coin_change([1,2,5],11)==3; assert coin_change([2],3)==-1"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define lis_length(nums:list[int])->int returning length of the Longest Increasing Subsequence. Print lis_length([10,9,2,5,3,7,101,18]).", "tests": ["assert lis_length([10,9,2,5,3,7,101,18])==4; assert lis_length([0,1,0,3,2,3])==4"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define edit_distance(a:str,b:str)->int (Levenshtein, insert/delete/replace cost 1). Print edit_distance('intention','execution').", "tests": ["assert edit_distance('kitten','sitting')==3; assert edit_distance('intention','execution')==5"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define knapsack_01(W:int,wt:list[int],val:list[int])->int maximizing value with capacity W. Print knapsack_01(7,[6,3,4,2],[30,14,16,9]).", "tests": ["assert knapsack_01(7,[6,3,4,2],[30,14,16,9])==46; assert knapsack_01(10,[3,3,3],[10,20,30])==60"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define transpose(mat:list[list[int]])->list[list[int]]. Print transpose([[1,2,3],[4,5,6]]).", "tests": ["assert transpose([[1,2,3],[4,5,6]])==[[1,4],[2,5],[3,6]]; assert transpose([[1]])==[[1]]"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define rotate_matrix(mat:list[list[int]])->list[list[int]] rotating square matrix 90Â° clockwise in-place or return new. Print rotate_matrix([[1,2],[3,4]]).", "tests": ["assert rotate_matrix([[1,2],[3,4]])==[[3,1],[4,2]]; assert rotate_matrix([[1]])==[[1]]"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define spiral_order(mat:list[list[int]])->list[int] returning elements in spiral order. Print spiral_order([[1,2,3],[4,5,6],[7,8,9]]).", "tests": ["assert spiral_order([[1,2,3],[4,5,6],[7,8,9]])==[1,2,3,6,9,8,7,4,5]"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define dijkstra(n:int,edges:list[tuple[int,int,int]],src:int)->list[int] returning min distances (INF=10**15) on non-negative weighted graph. Print dijkstra(5,[(0,1,2),(0,2,5),(1,2,1),(1,3,2),(2,3,3),(3,4,1)],0).", "tests": ["INF=10**15; dist=dijkstra(5,[(0,1,2),(0,2,5),(1,2,1),(1,3,2),(2,3,3),(3,4,1)],0); assert dist[0]==0 and dist[1]==2 and dist[2]==3 and dist[3]==4 and dist[4]==5"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define eval_rpn(tokens:list[str])->int evaluating Reverse Polish Notation with +,-,*,/. Integer division truncates toward zero. Print eval_rpn(['2','1','+','3','*']).", "tests": ["assert eval_rpn(['2','1','+','3','*'])==9; assert eval_rpn(['4','13','5','/','+'])==6; assert eval_rpn(['10','6','9','3','+','-11','*','/','*','17','+','5','+'])==22"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define parse_csv_line(line:str)->list[str] handling commas and double-quotes per RFC basics (quote escape by doubling). Print parse_csv_line('\"a,b\",c,\"d\"\"e\"').", "tests": ["assert parse_csv_line('\"a,b\",c,\"d\"\"e\"')==['a,b','c','d\"e']; assert parse_csv_line('a,,b')==['a','','b']"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define is_valid_parentheses(s:str)->bool for (),{},[]. Print is_valid_parentheses('([{}])').", "tests": ["assert is_valid_parentheses('()') and is_valid_parentheses('([{}])'); assert not is_valid_parentheses('(]')"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define generate_parentheses(n:int)->list[str] generating all valid combinations of n pairs of '()'. Print len(generate_parentheses(3)).", "tests": ["g=generate_parentheses(3); assert set(g)==set(['((()))','(()())','(())()','()(())','()()()'])"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define permutations(lst:list[int])->list[list[int]] returning all permutations (order of permutations not important). Print len(permutations([1,2,3])).", "tests": ["res=permutations([1,2,3]); assert len(res)==6 and sorted([tuple(x) for x in res])==sorted([(1,2,3),(1,3,2),(2,1,3),(2,3,1),(3,1,2),(3,2,1)])"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Implement class LRUCache(capacity:int) with methods get(key:int)->int and put(key:int,value:int)->None. get returns -1 if missing. Use O(1) operations. Print nothing, just define the class.", "tests": ["c=LRUCache(2); c.put(1,1); c.put(2,2); assert c.get(1)==1; c.put(3,3); assert c.get(2)==-1; c.put(4,4); assert c.get(1)==-1; assert c.get(3)==3 and c.get(4)==4"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define stack_with_queues supporting push(x), pop()->int, top()->int, empty()->bool using two queues (collections.deque allowed). Print nothing.", "tests": ["from collections import deque; s=stack_with_queues(); s.push(1); s.push(2); assert s.top()==2; assert s.pop()==2; assert not s.empty(); assert s.pop()==1; assert s.empty()"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define queue_with_stacks supporting push(x), pop()->int, peek()->int, empty()->bool using two stacks (lists). Print nothing.", "tests": ["q=queue_with_stacks(); q.push(1); q.push(2); assert q.peek()==1; assert q.pop()==1; assert not q.empty(); assert q.pop()==2; assert q.empty()"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define sum_digits(n:int)->int returning the sum of decimal digits of n (treat n as absolute). Then print sum_digits(12345).", "tests": ["assert sum_digits(0)==0", "assert sum_digits(12345)==15", "assert sum_digits(-99)==18"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define digital_root(n:int)->int that repeatedly sums digits until one digit remains. Print digital_root(9875).", "tests": ["assert digital_root(0)==0", "assert digital_root(9)==9", "assert digital_root(10)==1", "assert digital_root(9875)==2"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define pow_iter(a:int,b:int)->int computing ab using iteration only (b>=0). Print pow_iter(2,10).", "tests": ["assert pow_iter(2,10)==1024", "assert pow_iter(5,0)==1", "assert pow_iter(3,1)==3"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define is_power_of_two(n:int)->bool. Return True iff n is a power of two (>0). Print is_power_of_two(1024).", "tests": ["assert is_power_of_two(1)", "assert is_power_of_two(1024)", "assert not is_power_of_two(0) and not is_power_of_two(3)"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define popcount(n:int)->int returning the number of set bits in nonnegative n. Print popcount(0b1011010).", "tests": ["assert popcount(0)==0", "assert popcount(1)==1", "assert popcount(0b1011010)==4"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define hamming_distance(a:int,b:int)->int (number of differing bits). Print hamming_distance(29,15).", "tests": ["assert hamming_distance(0,0)==0", "assert hamming_distance(1,4)==2", "assert hamming_distance(29,15)==2"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define reverse_int(x:int)->int that reverses decimal digits preserving sign (no 32-bit overflow rules). Print reverse_int(-120).", "tests": ["assert reverse_int(123)==321", "assert reverse_int(-120)==-21", "assert reverse_int(0)==0"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define to_base(n:int,b:int)->str for 0<=n and 2<=b<=36 using digits 0-9A-Z. Print to_base(255,16).", "tests": ["assert to_base(0,2)=='0'", "assert to_base(10,2)=='1010'", "assert to_base(255,16)=='FF'", "assert to_base(31,36)=='V'"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define from_base(s:str,b:int)->int parsing base 2..36 (case-insensitive). Print from_base('FF',16).", "tests": ["assert from_base('FF',16)==255", "assert from_base('1010',2)==10", "assert from_base('v',36)==31"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define gcd_list(nums:list)->int computing gcd of all numbers (list non-empty). Print gcd_list([8,12,16]).", "tests": ["assert gcd_list([8,12,16])==4", "assert gcd_list([7])==7"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define lcm_list(nums:list)->int computing lcm of all numbers (list non-empty). Print lcm_list([5,7,3]).", "tests": ["assert lcm_list([4,6])==12", "assert lcm_list([5,7,3])==105"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define binomial(n:int,k:int)->int computing C(n,k) for 0<=k<=n using an efficient multiplicative method. Print binomial(30,15).", "tests": ["assert binomial(5,2)==10", "assert binomial(30,15)==155117520"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define trailing_zeros_factorial(n:int)->int returning the number of trailing zeros in n!. Print trailing_zeros_factorial(100).", "tests": ["assert trailing_zeros_factorial(5)==1", "assert trailing_zeros_factorial(10)==2", "assert trailing_zeros_factorial(100)==24"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define is_perfect_square(n:int)->bool (n>=0) without using sqrt from math. Print is_perfect_square(16).", "tests": ["assert is_perfect_square(0) and is_perfect_square(1) and is_perfect_square(16)", "assert not is_perfect_square(14)"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define integer_sqrt(n:int)->int returning floor(sqrt(n)) for n>=0. Print integer_sqrt(10).", "tests": ["assert integer_sqrt(10)==3", "assert integer_sqrt(16)==4", "assert integer_sqrt(0)==0"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define collatz_steps(n:int)->int returning steps to reach 1 by Collatz rules (n>=1). Print collatz_steps(3).", "tests": ["assert collatz_steps(1)==0", "assert collatz_steps(3)==7", "assert collatz_steps(6)==8"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define is_happy(n:int)->bool (happy number in base 10). Print is_happy(19).", "tests": ["assert is_happy(19)", "assert not is_happy(2)"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define prime_factors(n:int)->list[int] returning the multiset of prime factors sorted ascending (1->[]). Print prime_factors(84).", "tests": ["assert prime_factors(1)==[]", "assert prime_factors(84)==[2,2,3,7]", "assert prime_factors(97)==[97]"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define count_divisors(n:int)->int counting positive divisors. Print count_divisors(28).", "tests": ["assert count_divisors(1)==1", "assert count_divisors(6)==4", "assert count_divisors(28)==6"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define phi(n:int)->int (Euler's totient). Print phi(36).", "tests": ["assert phi(1)==1", "assert phi(9)==6", "assert phi(36)==12"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define mod_inverse(a:int,m:int)->int|None returning modular inverse of a mod m or None if it doesn't exist. Print mod_inverse(3,11).", "tests": ["assert mod_inverse(3,11)==4", "assert mod_inverse(2,4) is None"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define crt2(a1:int,m1:int,a2:int,m2:int)->int|None returning the smallest x>=0 satisfying xâ¡a1 (mod m1) and xâ¡a2 (mod m2), or None if inconsistent. Print crt2(2,3,3,5).", "tests": ["assert crt2(2,3,3,5)==8", "assert crt2(1,2,0,4) is None", "assert crt2(2,4,6,8)==6"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define sum_of_proper_divisors(n:int)->int (excluding n). Print sum_of_proper_divisors(28).", "tests": ["assert sum_of_proper_divisors(1)==0", "assert sum_of_proper_divisors(12)==16", "assert sum_of_proper_divisors(28)==28"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define is_perfect_number(n:int)->bool (n>=1). Print is_perfect_number(28).", "tests": ["assert is_perfect_number(28)", "assert not is_perfect_number(12)"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define amicable_pair(a:int,b:int)->bool. Print amicable_pair(220,284).", "tests": ["assert amicable_pair(220,284)", "assert not amicable_pair(10,20)"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define remove_vowels(s:str)->str removing a,e,i,o,u (both cases). Print remove_vowels('Beautiful day').", "tests": ["assert remove_vowels('hello')=='hll'", "assert remove_vowels('AEIOUaeiou')==''"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define compress_spaces(s:str)->str collapsing multiple spaces to one while preserving a single leading/trailing space if present. Print compress_spaces(' a b ').", "tests": ["assert compress_spaces('a b c')=='a b c'", "assert compress_spaces(' spaced out ')==' spaced out '"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define camel_to_snake(s:str)->str converting CamelCase or mixed camelCase to snake_case. Print camel_to_snake('HTTPRequest').", "tests": ["assert camel_to_snake('camelCase')=='camel_case'", "assert camel_to_snake('HTTPRequest')=='http_request'"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define snake_to_camel(s:str)->str converting snake_case to lowerCamelCase. Print snake_to_camel('hello_world').", "tests": ["assert snake_to_camel('hello_world')=='helloWorld'", "assert snake_to_camel('make_it_work')=='makeItWork'"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define reverse_words(s:str)->str reversing word order, trimming extra spaces. Print reverse_words(' the sky is blue ').", "tests": ["assert reverse_words('the sky is blue')=='blue is sky the'", "assert reverse_words(' hello world ')=='world hello'"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define longest_common_prefix(strs:list)->str. Print longest_common_prefix(['flower','flow','flight']).", "tests": ["assert longest_common_prefix(['flower','flow','flight'])=='fl'", "assert longest_common_prefix(['dog','racecar','car'])==''"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define lcs_length(a:str,b:str)->int returning Longest Common Subsequence length. Print lcs_length('abcde','ace').", "tests": ["assert lcs_length('abcde','ace')==3", "assert lcs_length('abc','abc')==3", "assert lcs_length('abc','def')==0"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define lcsubstr_length(a:str,b:str)->int returning Longest Common Substring length. Print lcsubstr_length('abcdef','zcdemf').", "tests": ["assert lcsubstr_length('abcdef','zcdemf')==3", "assert lcsubstr_length('abcd','efgh')==0"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define is_palindrome_str(s:str)->bool ignoring non-alphanumerics and case. Print is_palindrome_str('A man, a plan, a canal: Panama').", "tests": ["assert is_palindrome_str('A man, a plan, a canal: Panama')", "assert not is_palindrome_str('race a car')"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define count_substrings(s:str, sub:str)->int counting (possibly overlapping) occurrences. Print count_substrings('aaaa','aa').", "tests": ["assert count_substrings('aaaa','aa')==3", "assert count_substrings('abc','a')==1"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define first_unique_char(s:str)->int returning index of first non-repeating char or -1. Print first_unique_char('leetcode').", "tests": ["assert first_unique_char('leetcode')==0", "assert first_unique_char('loveleetcode')==2", "assert first_unique_char('aabb')==-1"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define prefix_function(s:str)->list[int] (KMP prefix table with pi[0]=0). Print prefix_function('ababa').", "tests": ["assert prefix_function('ababa')==[0,0,1,2,3]", "assert prefix_function('aaaa')==[0,1,2,3]"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define find_all_occurrences(text:str,pattern:str)->list[int] using KMP (allow overlaps). Print find_all_occurrences('ababa','aba').", "tests": ["assert find_all_occurrences('ababa','aba')==[0,2]", "assert find_all_occurrences('aaaaa','aa')==[0,1,2,3]"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define min_window_substring(s:str,t:str)->str returning the minimum window of s containing all chars of t (with multiplicity). Print min_window_substring('ADOBECODEBANC','ABC').", "tests": ["assert min_window_substring('ADOBECODEBANC','ABC')=='BANC'", "assert min_window_substring('a','a')=='a'", "assert min_window_substring('a','aa')==''"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define valid_palindrome_k(s:str,k:int)->bool that returns True if s can become a palindrome by deleting at most k chars. Print valid_palindrome_k('abca',1).", "tests": ["assert valid_palindrome_k('abca',1)", "assert not valid_palindrome_k('abc',1)", "assert valid_palindrome_k('deeee',1)"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define decode_string(s:str)->str decoding patterns like '3[a2[c]]'. Print decode_string('2[abc]3[cd]ef').", "tests": ["assert decode_string('3[a2[c]]')=='accaccacc'", "assert decode_string('2[abc]3[cd]ef')=='abcabccdcdcdef'"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define zigzag_convert(s:str,num_rows:int)->str (like the classic ZigZag conversion). Print zigzag_convert('PAYPALISHIRING',3).", "tests": ["assert zigzag_convert('PAYPALISHIRING',3)=='PAHNAPLSIIGYIR'", "assert zigzag_convert('PAYPALISHIRING',4)=='PINALSIGYAHRPI'"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define longest_palindrome_substring(s:str)->str returning any longest palindromic substring. Print len(longest_palindrome_substring('babad')).", "tests": ["res=longest_palindrome_substring('babad'); assert res in ('bab','aba')", "assert longest_palindrome_substring('cbbd')=='bb'"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define frequency_sort(s:str)->str sorting characters by descending frequency; ties by ascending char. Print frequency_sort('tree').", "tests": ["assert frequency_sort('tree')=='eert'", "assert frequency_sort('cccaaa')=='aaaccc'"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define remove_adjacent_duplicates(s:str)->str repeatedly removing adjacent equal pairs until no more. Print remove_adjacent_duplicates('abbaca').", "tests": ["assert remove_adjacent_duplicates('abbaca')=='ca'", "assert remove_adjacent_duplicates('azxxzy')=='ay'"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define move_zeroes(nums:list)->list[int] moving zeros to end preserving order. Print move_zeroes([0,1,0,3,12]).", "tests": ["assert move_zeroes([0,1,0,3,12])==[1,3,12,0,0]", "assert move_zeroes([0,0])==[0,0]"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define product_except_self(nums:list)->list[int] without division. Print product_except_self([1,2,3,4]).", "tests": ["assert product_except_self([1,2,3,4])==[24,12,8,6]", "assert product_except_self([0,0])==[0,0]", "assert product_except_self([0,1,2])==[2,0,0]"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define max_subarray(nums:list)->int (Kadane's algorithm). Print max_subarray([-2,1,-3,4,-1,2,1,-5,4]).", "tests": ["assert max_subarray([-2,1,-3,4,-1,2,1,-5,4])==6", "assert max_subarray([1])==1"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define max_circular_subarray(nums:list)->int (maximum sum in circular array). Print max_circular_subarray([5,-3,5]).", "tests": ["assert max_circular_subarray([1,-2,3,-2])==3", "assert max_circular_subarray([5,-3,5])==10", "assert max_circular_subarray([-3,-2,-3])==-2"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define majority_element(nums:list)->int for element > n/2. Print majority_element([2,2,1,1,1,2,2]).", "tests": ["assert majority_element([3,2,3])==3", "assert majority_element([2,2,1,1,1,2,2])==2"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define majority_elements_n3(nums:list)->list[int] returning all elements appearing > n/3 times (order not important). Print majority_elements_n3([1,1,1,3,3,2,2,2]).", "tests": ["assert set(majority_elements_n3([3,2,3]))=={3}", "assert set(majority_elements_n3([1,1,1,3,3,2,2,2]))=={1,2}"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define longest_consecutive(nums:list)->int (length of longest consecutive sequence). Print longest_consecutive([100,4,200,1,3,2]).", "tests": ["assert longest_consecutive([100,4,200,1,3,2])==4", "assert longest_consecutive([])==0"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define three_sum(nums:list)->list[list[int]] returning unique triplets summing to 0 (order within triplet ascending; triplet order irrelevant). Print result for [-1,0,1,2,-1,-4].", "tests": ["res=three_sum([-1,0,1,2,-1,-4]); assert sorted(res)==sorted([[-1,-1,2],[-1,0,1]])"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define four_sum(nums:list,target:int)->list[list[int]] returning unique quadruplets summing to target (sorted within; order irrelevant). Print len for [1,0,-1,0,-2,2],0.", "tests": ["res=four_sum([1,0,-1,0,-2,2],0)", "expected=[[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]", "assert sorted(res)==sorted(expected)"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define min_subarray_len(target:int,nums:list)->int returning minimal length of a contiguous subarray with sum>=target; return 0 if none. Print min_subarray_len(7,[2,3,1,2,4,3]).", "tests": ["assert min_subarray_len(7,[2,3,1,2,4,3])==2", "assert min_subarray_len(11,[1,2,3,4,5])==3", "assert min_subarray_len(100,[1,2])==0"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define length_of_longest_substring(s:str)->int without repeating characters. Print length_of_longest_substring('abcabcbb').", "tests": ["assert length_of_longest_substring('abcabcbb')==3", "assert length_of_longest_substring('bbbbb')==1", "assert length_of_longest_substring('')==0"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define sliding_window_max(nums:list,k:int)->list[int]. Print sliding_window_max([1,3,-1,-3,5,3,6,7],3).", "tests": ["assert sliding_window_max([1,3,-1,-3,5,3,6,7],3)==[3,3,5,5,6,7]", "assert sliding_window_max([1],1)==[1]"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define matrix_multiply(A:list,B:list)->list[list[int]] for valid dimensions. Print matrix_multiply([[1,2],[3,4]],[[2,0],[1,2]]).", "tests": ["assert matrix_multiply([[1,2],[3,4]],[[2,0],[1,2]])==[[4,4],[10,8]]", "assert matrix_multiply([[6]],[[7]])==[[42]]"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define set_zeroes(mat:list)->list[list[int]] setting entire row/column to 0 if any cell is 0. Print set_zeroes([[1,1,1],[1,0,1],[1,1,1]]).", "tests": ["assert set_zeroes([[1,1,1],[1,0,1],[1,1,1]])==[[1,0,1],[0,0,0],[1,0,1]]", "assert set_zeroes([[0,1]])==[[0,0]]"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define search_in_rotated_sorted_array(nums:list,target:int)->int (return index or -1). Print search_in_rotated_sorted_array([4,5,6,7,0,1,2],0).", "tests": ["assert search_in_rotated_sorted_array([4,5,6,7,0,1,2],0)==4", "assert search_in_rotated_sorted_array([1],0)==-1"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define find_min_in_rotated(nums:list)->int returning the minimum element in a rotated sorted array (no duplicates). Print find_min_in_rotated([3,4,5,1,2]).", "tests": ["assert find_min_in_rotated([3,4,5,1,2])==1", "assert find_min_in_rotated([4,5,6,7,0,1,2])==0"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define next_permutation(a:list)->list[int] producing next lexicographic permutation or smallest if last. Print next_permutation([1,2,3]).", "tests": ["assert next_permutation([1,2,3])==[1,3,2]", "assert next_permutation([3,2,1])==[1,2,3]", "assert next_permutation([1,1,5])==[1,5,1]"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define combination_sum(candidates:list,target:int)->list[list[int]] allowing reuse of candidates; combinations sorted within; order of combos irrelevant. Print combination_sum([2,3,6,7],7).", "tests": ["res=combination_sum([2,3,6,7],7)", "assert sorted([sorted(x) for x in res])==sorted([[7],[2,2,3]])"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define subsets(nums:list)->list[list[int]] returning all subsets (order of subsets not important). Print len(subsets([1,2,3])).", "tests": ["res=subsets([1,2,3])", "assert len(res)==8 and [] in res and [1,2] in [sorted(x) for x in res]"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define subset_sum(nums:list,target:int)->bool (0/1). Print subset_sum([3,34,4,12,5,2],9).", "tests": ["assert subset_sum([3,34,4,12,5,2],9)", "assert not subset_sum([1,2,5],4)"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define count_subarrays_with_sum(nums:list,k:int)->int counting subarrays summing to k (may include negatives). Print count_subarrays_with_sum([1,1,1],2).", "tests": ["assert count_subarrays_with_sum([1,1,1],2)==2", "assert count_subarrays_with_sum([1,2,3],3)==2"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define find_kth_largest(nums:list,k:int)->int. Print find_kth_largest([3,2,1,5,6,4],2).", "tests": ["assert find_kth_largest([3,2,1,5,6,4],2)==5", "assert find_kth_largest([3,2,3,1,2,4,5,5,6],4)==4"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define kth_smallest_in_matrix(mat:list,k:int)->int where rows and columns are sorted ascending. Print kth_smallest_in_matrix([[1,5,9],[10,11,13],[12,13,15]],8).", "tests": ["m=[[1,5,9],[10,11,13],[12,13,15]]", "assert kth_smallest_in_matrix(m,8)==13", "assert kth_smallest_in_matrix(m,1)==1"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define median_of_two_sorted_arrays(a:list,b:list)->float in O(log(min(n,m))). Print median_of_two_sorted_arrays([1,3],[2]).", "tests": ["assert median_of_two_sorted_arrays([1,3],[2])==2.0", "assert median_of_two_sorted_arrays([1,2],[3,4])==2.5"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Implement class RangeSumQuery with init(nums:list) and sum_range(i:int,j:int)->int (0-indexed, inclusive). Print nothing.", "tests": ["rs=RangeSumQuery([-2,0,3,-5,2,-1])", "assert rs.sum_range(0,2)==1", "assert rs.sum_range(2,5)==-1", "assert rs.sum_range(0,5)==-3"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Implement class NumMatrix with init(matrix:list) and sum_region(r1:int,c1:int,r2:int,c2:int)->int inclusive. Print nothing.", "tests": ["mat=[[3,0,1,4,2],[5,6,3,2,1],[1,2,0,1,5],[4,1,0,1,7],[1,0,3,0,5]]", "nm=NumMatrix(mat)", "assert nm.sum_region(2,1,4,3)==8", "assert nm.sum_region(1,1,2,2)==11", "assert nm.sum_region(1,2,2,4)==12"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Implement class MinStack supporting push(x), pop(), top()->int, get_min()->int in O(1). Print nothing.", "tests": ["s=MinStack(); s.push(-2); s.push(0); s.push(-3); assert s.get_min()==-3; s.pop(); assert s.top()==0; assert s.get_min()==-2"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define basic_calculator_ii(s:str)->int evaluating '+','-','','/' (integer trunc toward zero), no parentheses. Print basic_calculator_ii('3+22').", "tests": ["assert basic_calculator_ii('3+2*2')==7", "assert basic_calculator_ii(' 3/2 ')==1", "assert basic_calculator_ii(' 3+5 / 2 ')==5"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define can_partition(nums:list)->bool checking if array can be partitioned into two subsets with equal sum. Print can_partition([1,5,11,5]).", "tests": ["assert can_partition([1,5,11,5])", "assert not can_partition([1,2,3,5])"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define rob(nums:list)->int (House Robber I). Print rob([2,7,9,3,1]).", "tests": ["assert rob([1,2,3,1])==4", "assert rob([2,7,9,3,1])==12"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define rob_circular(nums:list)->int (House Robber II, circular). Print rob_circular([2,3,2]).", "tests": ["assert rob_circular([2,3,2])==3", "assert rob_circular([1,2,3,1])==4"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define unique_paths(m:int,n:int)->int (grid with only right/down moves). Print unique_paths(3,7).", "tests": ["assert unique_paths(3,7)==28", "assert unique_paths(3,2)==3"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define unique_paths_with_obstacles(grid:list)->int where 1 is blocked, 0 is free. Print unique_paths_with_obstacles([[0,0,0],[0,1,0],[0,0,0]]).", "tests": ["assert unique_paths_with_obstacles([[0,0,0],[0,1,0],[0,0,0]])==2", "assert unique_paths_with_obstacles([[0,1],[0,0]])==1"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define min_path_sum(grid:list)->int (sum of path right/down min). Print min_path_sum([[1,3,1],[1,5,1],[4,2,1]]).", "tests": ["assert min_path_sum([[1,3,1],[1,5,1],[4,2,1]])==7"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define min_cost_climbing_stairs(cost:list)->int. You can start at index 0 or 1 and reach just beyond last index. Print min_cost_climbing_stairs([10,15,20]).", "tests": ["assert min_cost_climbing_stairs([10,15,20])==15", "assert min_cost_climbing_stairs([1,100,1,1,1,100,1,1,100,1])==6"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define shortest_path_unweighted(n:int,edges:list,src:int,dst:int)->int on an undirected graph; return number of edges or -1 if unreachable. Print shortest_path_unweighted(6,[(0,1),(0,2),(1,3),(2,3),(3,4),(4,5)],0,5).", "tests": ["assert shortest_path_unweighted(6,[(0,1),(0,2),(1,3),(2,3),(3,4),(4,5)],0,5)==4", "assert shortest_path_unweighted(3,[(0,1)],0,2)==-1"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define num_islands(grid:list)->int counting '1' islands (4-direction). Print num_islands([['1','1','0','0','0'],['1','1','0','0','0'],['0','0','1','0','0'],['0','0','0','1','1']]).", "tests": ["g=[['1','1','0','0','0'],['1','1','0','0','0'],['0','0','1','0','0'],['0','0','0','1','1']]", "assert num_islands(g)==3"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define topological_sort(n:int,edges:list)->list[int] for a DAG. Any valid topological order is acceptable. Print nothing.", "tests": ["order=topological_sort(4,[(0,1),(0,2),(1,3),(2,3)])", "pos={v:i for i,v in enumerate(order)}", "for u,v in [(0,1),(0,2),(1,3),(2,3)]: assert pos[u]<pos[v]"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define has_cycle_directed(n:int,edges:list)->bool for a directed graph. Print has_cycle_directed(3,[(0,1),(1,2),(2,0)]).", "tests": ["assert has_cycle_directed(3,[(0,1),(1,2),(2,0)])", "assert not has_cycle_directed(3,[(0,1),(1,2)])"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define can_finish(num_courses:int,prereq:list)->bool (Course Schedule). Each pair (a,b) means b->a. Print can_finish(2,[(1,0)]).", "tests": ["assert can_finish(2,[(1,0)])", "assert not can_finish(2,[(1,0),(0,1)])"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define count_connected_components(n:int,edges:list)->int on undirected graph. Print count_connected_components(5,[(0,1),(1,2),(3,4)]).", "tests": ["assert count_connected_components(5,[(0,1),(1,2),(3,4)])==2", "assert count_connected_components(3,[])==3"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define kruskal_mst_weight(n:int,edges:list)->int for undirected weighted graph. Print weight for n=4, edges=[(0,1,1),(0,2,4),(1,2,2),(1,3,5),(2,3,1)].", "tests": ["edges=[(0,1,1),(0,2,4),(1,2,2),(1,3,5),(2,3,1)]", "assert kruskal_mst_weight(4,edges)==4"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define prim_mst_weight(n:int,edges:list)->int for undirected weighted graph. Print prim_mst_weight for same graph as previous example.", "tests": ["edges=[(0,1,1),(0,2,4),(1,2,2),(1,3,5),(2,3,1)]", "assert prim_mst_weight(4,edges)==4"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define bellman_ford(n:int,edges:list,src:int)->tuple[list[int],bool] returning (distances, has_negative_cycle). Use INF=1015 for unreachable. Print nothing.", "tests": ["INF=1015", "edges=[(0,1,-1),(0,2,4),(1,2,3),(1,3,2),(1,4,2),(3,2,5),(3,1,1),(4,3,-3)]", "dist,neg=belleman:=bellman_ford(5,edges,0)", "assert not neg and dist==[0,-1,2,-2,1]", "edges2=[(0,1,1),(1,2,-1),(2,0,-1)]", "_,neg2=bellman_ford(3,edges2,0)", "assert neg2"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define floyd_warshall(n:int,edges:list)->list[list[int]] returning all-pairs shortest paths (use large INF). Print shortest path 0->3 for small graph.", "tests": ["INF=1012", "dist=floyd_warshall(4,[(0,1,3),(0,2,10),(1,2,1),(2,3,2),(1,3,7)])", "assert dist[0][3]==6 and dist[0][2]==4"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define nearest_zero_distances(mat:list)->list[list[int]] for a 0/1 matrix returning Manhattan distance to nearest 0 for each cell. Print nothing.", "tests": ["inp=[[0,0,0],[0,1,0],[1,1,1]]", "out=[[0,0,0],[0,1,0],[1,2,1]]", "assert nearest_zero_distances(inp)==out"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define zero_one_bfs(n:int,edges:list,src:int)->list[int] for directed graph with edge weights 0 or 1. Use INF=1015. Print nothing.", "tests": ["INF=1015", "edges=[(0,1,0),(1,2,1),(0,2,1),(2,3,0),(3,4,1)]", "dist=zero_one_bfs(5,edges,0)", "assert dist[4]==2 and dist[0]==0"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define word_ladder_length(begin:str,end:str,word_list:list)->int returning length of shortest transformation sequence, or 0 if impossible. Print word_ladder_length('hit','cog',[...]).", "tests": ["wl=['hot','dot','dog','lot','log','cog']", "assert word_ladder_length('hit','cog',wl)==5", "assert word_ladder_length('hit','cog',['hot','dot','dog','lot','log'])==0"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define find_bridges(n:int,edges:list)->list[tuple[int,int]] returning all bridges in an undirected graph (sorted pairs, order of list irrelevant). Print nothing.", "tests": ["res=find_bridges(5,[(1,0),(0,2),(2,1),(0,3),(3,4)])", "exp=[(0,3),(3,4)]", "assert sorted(map(tuple,sorted([tuple(sorted(e)) for e in res])))==sorted(map(tuple,sorted([tuple(sorted(e)) for e in exp])))"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define articulation_points(n:int,edges:list)->set[int] for undirected graph. Print nothing.", "tests": ["res=articulation_points(5,[(1,0),(0,2),(2,1),(0,3),(3,4)])", "assert res=={0,3}"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define scc_kosaraju(n:int,edges:list)->list[list[int]] returning strongly connected components (each as list; order not important). Print nothing.", "tests": ["res=scc_kosaraju(5,[(1,0),(0,2),(2,1),(0,3),(3,4)])", "comp=[sorted(c) for c in res]", "assert sorted(comp)==sorted([[0,1,2],[3],[4]])"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define is_bipartite(graph:list)->bool for adjacency lists. Print is_bipartite([[1,3],[0,2],[1,3],[0,2]]).", "tests": ["assert is_bipartite([[1,3],[0,2],[1,3],[0,2]])", "assert not is_bipartite([[1,2,3],[0,2],[0,1,3],[0,2]])"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define n_queens_count(n:int)->int returning the number of distinct solutions to the n-Queens problem. Print n_queens_count(4).", "tests": ["assert n_queens_count(1)==1", "assert n_queens_count(4)==2"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define solve_sudoku(board:list)->None solving Sudoku in-place ('.' empty). Use backtracking. Print nothing.", "tests": ["board=[['5','3','.','.','7','.','.','.','.'],['6','.','.','1','9','5','.','.','.'],['.','9','8','.','.','.','.','6','.'],['8','.','.','.','6','.','.','.','3'],['4','.','.','8','.','3','.','.','1'],['7','.','.','.','2','.','.','.','6'],['.','6','.','.','.','.','2','8','.'],['.','.','.','4','1','9','.','.','5'],['.','.','.','.','8','.','.','7','9']]", "solve_sudoku(board)", "sol=[['5','3','4','6','7','8','9','1','2'],['6','7','2','1','9','5','3','4','8'],['1','9','8','3','4','2','5','6','7'],['8','5','9','7','6','1','4','2','3'],['4','2','6','8','5','3','7','9','1'],['7','1','3','9','2','4','8','5','6'],['9','6','1','5','3','7','2','8','4'],['2','8','7','4','1','9','6','3','5'],['3','4','5','2','8','6','1','7','9']]", "assert board==sol"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define word_search(board:list,word:str)->bool (adjacent 4-dir, no reuse). Print word_search on standard example.", "tests": ["b=[['A','B','C','E'],['S','F','C','S'],['A','D','E','E']]", "assert word_search(b,'ABCCED')", "assert word_search(b,'SEE')", "assert not word_search(b,'ABCB')"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define min_cut_palindrome(s:str)->int (min cuts to partition into palindromes). Print min_cut_palindrome('aab').", "tests": ["assert min_cut_palindrome('aab')==1", "assert min_cut_palindrome('a')==0", "assert min_cut_palindrome('ab')==1"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define subsets_with_dup(nums:list)->list[list[int]] returning all unique subsets for possibly duplicated nums. Print nothing.", "tests": ["res=subsets_with_dup([1,2,2])", "sr=sorted([tuple(sorted(x)) for x in res])", "expected=sorted([(),(1,),(2,),(1,2),(2,2),(1,2,2)])", "assert sr==expected"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define combination_sum2(candidates:list,target:int)->list[list[int]] using each candidate at most once (handle duplicates). Print nothing.", "tests": ["res=combination_sum2([10,1,2,7,6,1,5],8)", "ex=[[1,1,6],[1,2,5],[1,7],[2,6]]", "assert sorted([sorted(x) for x in res])==sorted(ex)"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define restore_ip_addresses(s:str)->list[str] generating all valid IPv4 addresses. Print count for '25525511135'.", "tests": ["res=restore_ip_addresses('25525511135')", "assert set(res)=={'255.255.11.135','255.255.111.35'}"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define letter_combinations(digits:str)->list[str] (phone keypad, 2-9). Print len(letter_combinations('23')).", "tests": ["res=letter_combinations('23')", "assert set(res)=={'ad','ae','af','bd','be','bf','cd','ce','cf'}"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define is_match_regex(s:str,p:str)->bool supporting '.' and '' (classic DP). Print is_match_regex('aab','cab').", "tests": ["assert not is_match_regex('aa','a')", "assert is_match_regex('aa','a')", "assert is_match_regex('ab','.')", "assert is_match_regex('aab','cab')", "assert not is_match_regex('mississippi','misisp.')"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define diff_ways_to_compute(expr:str)->list[int] computing all results by adding parentheses (operators +-). Print sorted results for '2-1-1'.", "tests": ["assert sorted(diff_ways_to_compute('2-1-1'))==[0,2]", "assert sorted(diff_ways_to_compute('23-45'))==[-34,-14,-10,-10,10]"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define count_palindromic_substrings(s:str)->int (center expansion). Print count_palindromic_substrings('aaa').", "tests": ["assert count_palindromic_substrings('aaa')==6", "assert count_palindromic_substrings('abc')==3"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define min_del_to_make_equal(a:str,b:str)->int (minimum deletions to make a and b equal). Print min_del_to_make_equal('sea','eat').", "tests": ["assert min_del_to_make_equal('sea','eat')==2", "assert min_del_to_make_equal('leetcode','etco')==4"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define coin_change_ways(coins:list,amount:int)->int counting combinations to make amount (order-insensitive). Print coin_change_ways([1,2,5],5).", "tests": ["assert coin_change_ways([1,2,5],5)==4", "assert coin_change_ways([2],3)==0"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define rod_cutting(prices:list,n:int)->int maximizing value for rod length n (prices[i] is price for length i+1). Print rod_cutting([1,5,8,9],4).", "tests": ["assert rod_cutting([1,5,8,9],4)==10", "assert rod_cutting([3,5,8,9,10,17,17,20],8)==24"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define multiply_strings(num1:str,num2:str)->str multiplying big integers without converting to int. Print multiply_strings('123','456').", "tests": ["assert multiply_strings('123','456')=='56088'", "assert multiply_strings('0','0')=='0'"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define phi_sieve(n:int)->list[int] returning phi[0..n]. Print phi_sieve(10)[10].", "tests": ["phi=phi_sieve(10)", "assert phi[10]==4 and sum(phi[1:6])==10"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define segmented_sieve(L:int,R:int)->list[int] returning all primes in [L,R] inclusive (R<=10**6). Print segmented_sieve(10,30).", "tests": ["assert segmented_sieve(10,30)==[11,13,17,19,23,29]", "assert segmented_sieve(1,2)==[2]"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define solve_linear_system(A:list,b:list)->list[float] solving Ax=b with Gaussian elimination (assume unique solution). Print solve_linear_system([[1,1],[2,3]],[4,9]).", "tests": ["x=solve_linear_system([[1,1],[2,3]],[4,9])", "assert abs(x[0]-3)<1e-9 and abs(x[1]-1)<1e-9"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define determinant(mat:list)->float for a square matrix using Gaussian elimination with sign tracking. Print determinant([[1,2],[3,4]]).", "tests": ["assert abs(determinant([[1,2],[3,4]])+2)<1e-9", "assert abs(determinant([[6]])-6)<1e-9", "assert abs(determinant([[2,0,1],[3,0,0],[5,1,1]])-3)<1e-9"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define polygon_area(poly:list)->float (shoelace formula). Print polygon_area for rectangle (0,0),(4,0),(4,3),(0,3).", "tests": ["assert abs(polygon_area([(0,0),(4,0),(4,3),(0,3)])-12.0)<1e-9", "assert abs(polygon_area([(0,0),(1,0),(0,1)])-0.5)<1e-9"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define convex_hull(points:list)->list[tuple[int,int]] returning CCW hull without repeating the first point (Monotonic Chain). Print hull corners for a square with interior points.", "tests": ["pts=[(0,0),(2,0),(2,2),(0,2),(1,1),(1,0),(0,1)]", "h=convex_hull(pts)", "assert set(h)=={(0,0),(2,0),(2,2),(0,2)}"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define segments_intersect(p1:tuple,p2:tuple,q1:tuple,q2:tuple)->bool (inclusive of endpoints and colinear overlaps). Print for crossing segments.", "tests": ["assert segments_intersect((0,0),(4,4),(0,4),(4,0))", "assert not segments_intersect((0,0),(1,1),(1,0),(2,1))"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define point_in_polygon(poly:list,p:tuple)->bool using ray casting (return True for boundary points). Print for a square.", "tests": ["poly=[(0,0),(4,0),(4,4),(0,4)]", "assert point_in_polygon(poly,(2,2))", "assert point_in_polygon(poly,(4,4))", "assert not point_in_polygon(poly,(5,5))"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define k_closest_points(points:list,k:int)->list[tuple[int,int]] returning any k points closest to origin (Euclidean). Print k_closest_points([(1,3),(-2,2)],1).", "tests": ["res=k_closest_points([(1,3),(-2,2)],1)", "assert res==[(-2,2)]"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Implement Trie with methods insert(word:str), search(word:str)->bool, starts_with(prefix:str)->bool. Print nothing.", "tests": ["t=Trie(); t.insert('apple'); assert t.search('apple'); assert not t.search('app'); assert t.starts_with('app'); t.insert('app'); assert t.search('app')"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Implement FenwickTree (Binary Indexed Tree) for point updates and prefix sums. API: FenwickTree(n:int), add(i:int,delta:int), sum(i:int)->int (0-indexed, inclusive), range_sum(l:int,r:int)->int. Print nothing.", "tests": ["arr=[1,2,3,4,5]", "ft=FenwickTree(len(arr))", "for i,v in enumerate(arr): ft.add(i,v)", "assert ft.sum(0)==1 and ft.sum(4)==15 and ft.range_sum(1,3)==9", "ft.add(2,1)", "assert ft.sum(4)==16 and ft.range_sum(2,2)==4"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Implement SegmentTree supporting range sum query and point update. API: SegmentTree(nums:list), query(l:int,r:int)->int inclusive, update(i:int,val:int)->None. Print nothing.", "tests": ["st=SegmentTree([1,3,5])", "assert st.query(0,2)==9", "st.update(1,2)", "assert st.query(0,2)==8"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define suffix_array(s:str)->list[int] (naive is fine). Print suffix_array('banana').", "tests": ["assert suffix_array('banana')==[5,3,1,0,4,2]"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define lcp_array(s:str,sa:list)->list[int] where lcp[0]=0 (Kasai). Print lcp_array for 'banana'.", "tests": ["s='banana'; sa=[5,3,1,0,4,2]", "assert lcp_array(s,sa)==[0,1,3,0,0,2]"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define z_function(s:str)->list[int] with z[0]=0. Print z_function('aaaaa').", "tests": ["assert z_function('aaaaa')==[0,4,3,2,1]", "zz=z_function('abacaba'); assert zz[0]==0 and len(zz)==7"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define rabin_karp(text:str,pattern:str)->int returning first index or -1 (use rolling hash). Print rabin_karp('hello','ll').", "tests": ["assert rabin_karp('hello','ll')==2", "assert rabin_karp('aaaaa','bba')==-1"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define find_anagram_indices(s:str,p:str)->list[int] returning all start indices of anagrams of p in s. Print find_anagram_indices('cbaebabacd','abc').", "tests": ["assert find_anagram_indices('cbaebabacd','abc')==[0,6]", "assert find_anagram_indices('abab','ab')==[0,1,2]"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define check_valid_string(s:str)->bool where '' can be '(' or ')' or empty. Print check_valid_string('())').", "tests": ["assert check_valid_string('()')", "assert check_valid_string('()')", "assert check_valid_string('())')", "assert not check_valid_string(')(')"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define generate_matrix(n:int)->list[list[int]] creating an nÃn spiral of 1..n^2. Print generate_matrix(3).", "tests": ["assert generate_matrix(3)==[[1,2,3],[8,9,4],[7,6,5]]", "assert generate_matrix(1)==[[1]]"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define game_of_life_step(board:list)->list[list[int]] computing one Game of Life step. Print nothing.", "tests": ["inp=[[0,1,0],[0,0,1],[1,1,1],[0,0,0]]", "out=game_of_life_step(inp)", "assert out==[[0,0,0],[1,0,1],[0,1,1],[0,1,0]]"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define oranges_rotting(grid:list)->int returning minutes to rot all oranges, or -1 if impossible. Print oranges_rotting([[2,1,1],[1,1,0],[0,1,1]]).", "tests": ["assert oranges_rotting([[2,1,1],[1,1,0],[0,1,1]])==4", "assert oranges_rotting([[0,2]])==0"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define pacific_atlantic(heights:list)->list[list[int]] returning coordinates [r,c] flowing to both oceans (order irrelevant). Print for a small matrix.", "tests": ["cells=pacific_atlantic([[1,2],[4,3]])", "assert sorted(map(tuple,cells))==sorted([(0,1),(1,0),(1,1)])"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define solve_surrounded_regions(board:list)->None to capture surrounded 'O' regions (flip to 'X'). Print nothing.", "tests": ["board=[['X','X','X','X'],['X','O','O','X'],['X','X','O','X'],['X','O','X','X']]", "solve_surrounded_regions(board)", "expected=[['X','X','X','X'],['X','X','X','X'],['X','X','X','X'],['X','O','X','X']]", "assert board==expected"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define find_order(num_courses:int,prereq:list)->list[int] (Course Schedule II). Return empty list if impossible. Print find_order(2,[(1,0)]).", "tests": ["assert find_order(2,[(1,0)]) in ([0,1],)", "assert find_order(2,[(1,0),(0,1)])==[]"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define maximum_swap(num:int)->int swapping at most one pair of digits to get the maximum value. Print maximum_swap(2736).", "tests": ["assert maximum_swap(2736)==7236", "assert maximum_swap(9973)==9973"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define remove_k_digits(num:str,k:int)->str to form the smallest possible number (no leading zeros; return '0' if empty). Print remove_k_digits('1432219',3).", "tests": ["assert remove_k_digits('1432219',3)=='1219'", "assert remove_k_digits('10200',1)=='200'", "assert remove_k_digits('10',2)=='0'"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define count_bits_upto(n:int)->list[int] where result[i] is popcount(i) for i in [0..n]. Print count_bits_upto(5).", "tests": ["assert count_bits_upto(5)==[0,1,1,2,1,2]", "assert count_bits_upto(0)==[0]"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define single_number(nums:list)->int where every element appears twice except one. Print single_number([4,1,2,1,2]).", "tests": ["assert single_number([2,2,1])==1", "assert single_number([4,1,2,1,2])==4"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define single_number_thrice(nums:list)->int where every element appears three times except one. Print single_number_thrice([2,2,3,2]).", "tests": ["assert single_number_thrice([2,2,3,2])==3", "assert single_number_thrice([0,1,0,1,0,1,99])==99"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define range_xor(L:int,R:int)->int computing XOR of all integers in [L,R]. Print range_xor(3,9).", "tests": ["assert range_xor(3,9)==2", "assert range_xor(0,0)==0", "assert range_xor(0,4)==4"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define word_break(s:str,word_dict:list)->bool indicating if s can be segmented into dictionary words. Print word_break('leetcode',['leet','code']).", "tests": ["assert word_break('leetcode',['leet','code'])", "assert word_break('applepenapple',['apple','pen'])", "assert not word_break('catsandog',['cats','dog','sand','and','cat'])"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define longest_increasing_path(matrix:list)->int (move 4-dir to strictly greater). Print longest_increasing_path([[9,9,4],[6,6,8],[2,1,1]]).", "tests": ["assert longest_increasing_path([[9,9,4],[6,6,8],[2,1,1]])==4", "assert longest_increasing_path([[3,4,5],[3,2,6],[2,2,1]])==4"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define find_peak_element(nums:list)->int returning any index of a peak (neighbors strictly smaller where applicable). Print find_peak_element([1,2,3,1]).", "tests": ["i=find_peak_element([1,2,3,1]); assert i in (2,)", "j=find_peak_element([1,2,1,3,5,6,4]); assert [1,2,1,3,5,6,4][j] in (2,6)"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define kth_smallest(nums:list,k:int)->int using Quickselect (1-indexed k). Print kth_smallest([3,2,1,5,6,4],2).", "tests": ["assert kth_smallest([3,2,1,5,6,4],2)==2", "assert kth_smallest([7,10,4,3,20,15],3)==7"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define paint_house(costs:list)->int minimal total cost to paint houses in 3 colors with no adjacent same color. Print paint_house([[17,2,17],[16,16,5],[14,3,19]]).", "tests": ["assert paint_house([[17,2,17],[16,16,5],[14,3,19]])==10", "assert paint_house([[7,6,2]])==2"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define maximal_square(matrix:list)->int returning the area of the largest square of '1's. Print maximal_square on small examples.", "tests": ["matrix=[['1','0','1','0','0'],['1','0','1','1','1'],['1','1','1','1','1'],['1','0','0','1','0']]", "assert maximal_square(matrix)==4", "assert maximal_square([['0']])==0", "assert maximal_square([['1']])==1"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define num_decodings(s:str)->int counting ways to decode '1'..'26'. Print num_decodings('226').", "tests": ["assert num_decodings('12')==2", "assert num_decodings('226')==3", "assert num_decodings('06')==0"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define num_trees(n:int)->int returning the number of unique BSTs storing values 1..n (Catalan). Print num_trees(3).", "tests": ["assert num_trees(0)==1", "assert num_trees(1)==1", "assert num_trees(3)==5"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define add_binary(a:str,b:str)->str adding two binary strings. Print add_binary('1010','1011').", "tests": ["assert add_binary('11','1')=='100'", "assert add_binary('1010','1011')=='10101'"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define search_matrix(matrix:list,target:int)->bool where each row is sorted and first of each row > last of previous. Print search_matrix on sample.", "tests": ["m=[[1,3,5,7],[10,11,16,20],[23,30,34,60]]", "assert search_matrix(m,3)", "assert not search_matrix(m,13)"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define nth_ugly_number(n:int)->int (ugly numbers with factors 2,3,5). Print nth_ugly_number(10).", "tests": ["assert nth_ugly_number(1)==1", "assert nth_ugly_number(10)==12"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define merge_k_sorted_lists(lists:list)->list[int] merging all into one sorted list. Print merge_k_sorted_lists([[1,4,5],[1,3,4],[2,6]]).", "tests": ["assert merge_k_sorted_lists([[1,4,5],[1,3,4],[2,6]])==[1,1,2,3,4,4,5,6]", "assert merge_k_sorted_lists([[],[1],[0,2]])==[0,1,2]"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define day_of_week(y:int,m:int,d:int)->str returning weekday name using e.g. Zeller's congruence (Gregorian). Print day_of_week(2020,1,1).", "tests": ["assert day_of_week(2020,1,1)=='Wednesday'", "assert day_of_week(1970,1,1)=='Thursday'"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define add_time(hhmm:str, minutes:int)->str adding minutes to 'HH:MM' 24-hour time, wrap around midnight. Print add_time('23:45',80).", "tests": ["assert add_time('23:45',80)=='01:05'", "assert add_time('00:00',0)=='00:00'"], "timeout_s": 2, "memory_mb": 256}
{"prompt": "Define largest_rectangle_area(heights:list)->int (histogram). Print largest_rectangle_area([2,1,5,6,2,3]).", "tests": ["assert largest_rectangle_area([2,1,5,6,2,3])==10", "assert largest_rectangle_area([2,4])==4"], "timeout_s": 2, "memory_mb": 256}
{"prompt":"Define maximal_rectangle(matrix:list[list[str]])->int returning the area of the largest rectangle of '1's in a binary matrix. Print maximal_rectangle on the classic example.","tests":["m=[['1','0','1','0','0'],['1','0','1','1','1'],['1','1','1','1','1'],['1','0','0','1','0']]; assert maximal_rectangle(m)==6"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define trap_rainwater(heights:list[int])->int computing trapped water in 1D. Print trap_rainwater([0,1,0,2,1,0,1,3,2,1,2,1]).","tests":["assert trap_rainwater([0,1,0,2,1,0,1,3,2,1,2,1])==6"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define next_greater_elements_circular(nums:list[int])->list[int] returning next greater elements in a circular array (or -1). Print next_greater_elements_circular([1,2,1]).","tests":["assert next_greater_elements_circular([1,2,1])==[2,-1,2]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define longest_valid_parentheses(s:str)->int returning the length of the longest valid parentheses substring. Print longest_valid_parentheses(')()())').","tests":["assert longest_valid_parentheses(')()())')==4"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define sum_subarray_mins(arr:list[int])->int returning sum of subarray minimums modulo 10**9+7. Print sum_subarray_mins([3,1,2,4]).","tests":["assert sum_subarray_mins([3,1,2,4])==17"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define count_subarrays_bounded(nums:list[int],L:int,R:int)->int counting subarrays where the maximum lies in [L,R]. Print count_subarrays_bounded([2,1,4,3],2,3).","tests":["assert count_subarrays_bounded([2,1,4,3],2,3)==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define minimum_mountain_removals(nums:list[int])->int returning the minimum removals to make nums a mountain array (strictly up then strictly down).","tests":["assert minimum_mountain_removals([2,1,1,5,6,2,3,1])==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define longest_arith_seq_length(nums:list[int])->int returning the length of the longest arithmetic subsequence.","tests":["assert longest_arith_seq_length([3,6,9,12])==4"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define lis_reconstruct(nums:list[int])->list[int] that returns any one Longest Increasing Subsequence (strictly increasing).","tests":["seq=lis_reconstruct([10,9,2,5,3,7,101,18]); assert len(seq)==4 and all(seq[i]<seq[i+1] for i in range(len(seq)-1))"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_jumps_to_end(nums:list[int])->int (Jump Game II). Return minimum jumps to reach last index.","tests":["assert min_jumps_to_end([2,3,1,1,4])==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define shortest_path_binary_matrix(grid:list[list[int]])->int (8 directions, 0 open, 1 blocked). Return shortest path length from top-left to bottom-right or -1.","tests":["assert shortest_path_binary_matrix([[0,1],[1,0]])==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define minimum_obstacles(grid:list[list[int]])->int (0-1 BFS). Each cell has cost 0 or 1; move 4-dir from (0,0) to (n-1,m-1) minimizing total cost.","tests":["g=[[0,1,1],[1,1,0],[1,1,0]]; assert minimum_obstacles(g)==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define shortest_path_keys_doors(grid:list[str])->int: shortest steps to collect all keys with walls '#', empty '.', start '@', keys 'a'-'f', doors 'A'-'F'. Return -1 if impossible.","tests":["g=['@.a.#','###.#','b.A.B']; assert shortest_path_keys_doors(g)==8"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define walls_and_gates(rooms:list[list[int]])->list[list[int]] that fills each empty room (INF=2**31-1) with distance to nearest gate (0), -1 walls.","tests":["INF=2**31-1; inp=[[INF,-1,0,INF],[INF,INF,INF,-1],[INF,-1,INF,-1],[0,-1,INF,INF]]; out=[[3,-1,0,1],[2,2,1,-1],[1,-1,2,-1],[0,-1,3,4]]; assert walls_and_gates(inp)==out"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define tree_diameter(n:int,edges:list[tuple[int,int]])->int for an undirected tree (unweighted). Return number of edges on the diameter.","tests":["assert tree_diameter(6,[(0,1),(1,2),(1,3),(3,4),(4,5)])==4"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define tree_diameter_weighted(n:int,edges:list[tuple[int,int,int]])->int for a weighted tree; return total weight of diameter path.","tests":["edges=[(0,1,3),(1,2,4),(1,3,2),(3,4,6)]; assert tree_diameter_weighted(5,edges)==13"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define lca_batch(n:int,edges:list[tuple[int,int]],root:int,queries:list[tuple[int,int]])->list[int] returning LCA for each query (0-indexed).","tests":["n=7; edges=[(0,1),(0,2),(1,3),(1,4),(2,5),(2,6)]; qs=[(3,4),(3,5),(5,6)]; assert lca_batch(n,edges,0,qs)==[1,0,2]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define count_topo_sorts(n:int,edges:list[tuple[int,int]])->int returning the number of topological orders of a DAG (n<=15).","tests":["assert count_topo_sorts(4,[(0,1),(0,2),(1,3),(2,3)])==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define hopcroft_karp(left_size:int,adj:list[list[int]])->int computing maximum matching in a bipartite graph (left nodes 0..left_size-1).","tests":["assert hopcroft_karp(2,[[0],[0]])==1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_vertex_cover_bipartite(left_size:int,adj:list[list[int]])->tuple[int,set[int],set[int]] returning size and chosen L/R sets of a minimum vertex cover using KÅnig's theorem.","tests":["sz,_,_=min_vertex_cover_bipartite(2,[[0],[0]]); assert sz==1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement Dinic's max flow: define dinic_max_flow(n:int,edges:list[tuple[int,int,int]])->int for directed edges (u,v,c).","tests":["n=4; e=[(0,1,1000),(0,2,1),(1,2,1000),(1,3,1000),(2,3,1000)]; assert dinic_max_flow(4,e)==1001"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_cut_reachable(n:int,edges:list[tuple[int,int,int]])->set[int] returning vertices reachable from source 0 in residual graph after max flow to sink n-1.","tests":["n=4; e=[(0,1,3),(0,2,2),(1,2,1),(1,3,2),(2,3,2)]; reach=min_cut_reachable(4,e); assert 0 in reach and 3 not in reach"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define two_sat(n:int,clauses:list[tuple[int,bool,int,bool]])->tuple[bool,list[bool]] solving 2-SAT. Clause is (x,x_val,y,y_val) meaning (lit_x OR lit_y).","tests":["sat,assn=two_sat(2,[(0,True,1,True)]); assert sat and (assn[0] or assn[1])"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define eulerian_circuit_directed(n:int,edges:list[tuple[int,int]])->list[int] returning any Eulerian circuit of a directed graph if exists, else [].","tests":["cyc=eulerian_circuit_directed(3,[(0,1),(1,2),(2,0)]); assert len(cyc)==4 and cyc[0]==cyc[-1]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define eulerian_trail_undirected(n:int,edges:list[tuple[int,int]])->list[int] returning any Eulerian trail/path in an undirected multigraph if exists, else [].","tests":["trail=eulerian_trail_undirected(3,[(0,1),(1,2),(2,0),(0,1)]); assert len(trail)>=4"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define condensation_dag(n:int,edges:list[tuple[int,int]])->tuple[int,list[list[int]]] returning (num_components, DAG adjacency) of SCC condensation.","tests":["k,dag=condensation_dag(5,[(1,0),(0,2),(2,1),(0,3),(3,4)]); assert k==3 and isinstance(dag,list)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define biconnected_components_edges(n:int,edges:list[tuple[int,int]])->list[list[tuple[int,int]]] listing edge-biconnected components of an undirected graph.","tests":["res=biconnected_components_edges(5,[(1,0),(0,2),(2,1),(0,3),(3,4)]); assert len(res)==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define tree_centroids(n:int,edges:list[tuple[int,int]])->list[int] returning centroid(s) of a tree.","tests":["assert set(tree_centroids(2,[(0,1)]))=={0,1}"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define sum_distances_all_nodes(n:int,edges:list[tuple[int,int]])->list[int] returning for each node the sum of distances to all others (rerooting DP).","tests":["assert sum_distances_all_nodes(6,[(0,1),(0,2),(2,3),(2,4),(2,5)])==[8,12,6,10,10,10]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define subtree_sizes(n:int,edges:list[tuple[int,int]],root:int)->list[int] for an undirected tree.","tests":["assert subtree_sizes(5,[(0,1),(1,2),(1,3),(3,4)],0)==[5,4,1,2,1]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define nodes_at_each_depth(n:int,edges:list[tuple[int,int]],root:int)->list[int] returning counts per depth (trim trailing zeros).","tests":["assert nodes_at_each_depth(7,[(0,1),(0,2),(1,3),(1,4),(2,5),(2,6)],0)==[1,2,4]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define nearest_marked_distance(n:int,edges:list[tuple[int,int]],marked:list[int])->list[int] returning distance from each node to nearest marked node using multi-source BFS.","tests":["res=nearest_marked_distance(6,[(0,1),(1,2),(2,3),(3,4),(4,5)],[0,5]); assert res==[0,1,2,2,1,0]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define dsu_with_parity_has_odd_cycle(n:int,edges:list[tuple[int,int]])->bool that returns True if an undirected graph contains an odd cycle using DSU with parity.","tests":["assert dsu_with_parity_has_odd_cycle(3,[(0,1),(1,2),(2,0)])"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define maximum_spanning_tree_weight(n:int,edges:list[tuple[int,int,int]])->int for an undirected graph.","tests":["edges=[(0,1,1),(0,2,4),(1,2,2),(1,3,5),(2,3,1)]; assert maximum_spanning_tree_weight(4,edges)==10"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define shortest_path_exact_k_edges(n:int,edges:list[tuple[int,int,int]],src:int,dst:int,k:int)->int using DP; return INF=10**15 if impossible.","tests":["INF=10**15; e=[(0,1,1),(1,2,2),(0,2,10)]; assert shortest_path_exact_k_edges(3,e,0,2,2)==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define kth_smallest_pair_distance(nums:list[int],k:int)->int.","tests":["assert kth_smallest_pair_distance([1,3,1],1)==0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define count_pairs_less_than(nums:list[int],target:int)->int counting pairs (i<j) with nums[i]+nums[j]<target.","tests":["assert count_pairs_less_than([3,1,0,-2],2)==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define subarrays_div_by_k(nums:list[int],k:int)->int counting subarrays whose sum is divisible by k.","tests":["assert subarrays_div_by_k([4,5,0,-2,-3,1],5)==7"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define longest_subarray_sum_leq_k(nums:list[int],k:int)->int returning the longest subarray length with sum <= k (nums may be negative).","tests":["assert longest_subarray_sum_leq_k([1,2,-1,2,-3,2],3)==5"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define shortest_subarray_at_least_k(nums:list[int],k:int)->int returning the length of the shortest subarray with sum>=k (monotonic deque), or -1.","tests":["assert shortest_subarray_at_least_k([2,-1,2],3)==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define sliding_window_median(nums:list[int],k:int)->list[float] returning medians for each window (average for even k).","tests":["assert sliding_window_median([1,3,-1,-3,5,3,6,7],3)==[1.0,-1.0,-1.0,3.0,5.0,6.0]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement class KthLargestStream(k:int,nums:list[int]) with add(val:int)->int returning current kth largest.","tests":["k=KthLargestStream(3,[4,5,8,2]); assert k.add(3)==4 and k.add(5)==5 and k.add(10)==5 and k.add(9)==8 and k.add(4)==8"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement LFUCache with get(key:int)->int and put(key:int,value:int)->None; ties broken by least recently used.","tests":["c=LFUCache(2); c.put(1,1); c.put(2,2); assert c.get(1)==1; c.put(3,3); assert c.get(2)==-1 and c.get(3)==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement AllOne with inc(key), dec(key), get_max_key()->str, get_min_key()->str in O(1). Return '' when empty.","tests":["ao=AllOne(); ao.inc('a'); ao.inc('b'); ao.inc('b'); ao.inc('c'); ao.inc('c'); ao.inc('c'); assert ao.get_max_key()=='c' and ao.get_min_key()=='a'"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define manacher_longest_palindrome_length(s:str)->int using Manacher's algorithm.","tests":["assert manacher_longest_palindrome_length('babad')==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define duplicate_substring_len(s:str)->int returning the length of the longest duplicate substring via binary search + rolling hash (return 0 if none).","tests":["assert duplicate_substring_len('banana')==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement Aho-Corasick: define aho_corasick_count(text:str,patterns:list[str])->int counting total matches of all patterns (overlaps allowed).","tests":["assert aho_corasick_count('ababa',['aba','bab'])==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define count_distinct_substrings(s:str)->int using a Suffix Automaton.","tests":["assert count_distinct_substrings('ababa')==9"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define longest_common_substring_length(a:str,b:str)->int using a suffix automaton.","tests":["assert longest_common_substring_length('abcdef','zcdemf')==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define minimal_rotation(s:str)->str using Booth's algorithm (lexicographically minimal rotation).","tests":["assert minimal_rotation('bba')=='abb'"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define lyndon_factorization(s:str)->list[str] using Duval's algorithm.","tests":["assert lyndon_factorization('zzza')==['zzz','a']"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define full_justify(words:list[str],max_width:int)->list[str] (text justification).","tests":["res=full_justify(['This','is','an','example','of','text','justification.'],16); assert res==['This    is    an','example  of text','justification.  ']"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define convex_polygons_intersection_area(P:list[tuple[float,float]],Q:list[tuple[float,float]])->float using polygon clipping.","tests":["A=[(0,0),(2,0),(2,2),(0,2)]; B=[(1,1),(3,1),(3,3),(1,3)]; assert abs(convex_polygons_intersection_area(A,B)-1.0)<1e-9"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define union_length_of_intervals(intervals:list[tuple[int,int]])->int for closed-open intervals [l,r).","tests":["assert union_length_of_intervals([(1,3),(2,5),(6,8)])==5"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define rectangle_union_area(rects:list[tuple[int,int,int,int]])->int computing area of union of axis-aligned rectangles (x1,y1,x2,y2).","tests":["assert rectangle_union_area([(0,0,2,2),(1,1,3,3)])==7"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define closest_pair(points:list[tuple[float,float]])->float returning minimal distance between any two points (O(n log n)).","tests":["assert abs(closest_pair([(1,1),(2,2)])-(2**0.5))<1e-9"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define minimum_enclosing_circle(points:list[tuple[float,float]])->tuple[tuple[float,float],float] returning (center,radius).","tests":["_,r=minimum_enclosing_circle([(0,0),(2,0),(0,2)]); assert abs(r-(2**0.5))<1e-6"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define point_in_convex_polygon(poly:list[tuple[float,float]],p:tuple[float,float])->bool (inclusive) in O(log n).","tests":["poly=[(0,0),(4,0),(4,4),(0,4)]; assert point_in_convex_polygon(poly,(2,2)) and not point_in_convex_polygon(poly,(5,5))"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define minkowski_sum(P:list[tuple[int,int]],Q:list[tuple[int,int]])->list[tuple[int,int]] for convex polygons in CCW order; return CCW starting from lowest-leftmost.","tests":["A=[(0,0),(1,0),(1,1),(0,1)]; B=[(1,1),(2,1),(2,2),(1,2)]; S=minkowski_sum(A,B); assert (2,2) in S"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define convex_polygon_diameter(poly:list[tuple[int,int]])->int using rotating calipers to compute squared maximum distance.","tests":["sq=[(0,0),(2,0),(2,2),(0,2)]; assert convex_polygon_diameter(sq)==8"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define is_probable_prime(n:int)->bool using MillerâRabin deterministic for 64-bit integers.","tests":["assert is_probable_prime(97) and not is_probable_prime(221)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define pollard_rho_factor(n:int)->list[int] returning prime factors (not necessarily sorted) using MillerâRabin and Pollard's Rho for 64-bit n>1; for n==1 return [].","tests":["fs=sorted(pollard_rho_factor(1000003*1000033)); assert fs==[1000003,1000033]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define discrete_log_bsgs(a:int,b:int,m:int)->int|None solving a^x â¡ b (mod m) for x using Baby-Step Giant-Step (a,m coprime). Return None if no solution.","tests":["assert discrete_log_bsgs(2,8,13)==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define mod_sqrt_tonelli_shanks(a:int,p:int)->int|None returning x with x^2â¡a (mod p) for odd prime p or None if no solution (return smallest nonnegative root).","tests":["x=mod_sqrt_tonelli_shanks(10,13); assert x in (6,7)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define crt_general(rema:list[int],mods:list[int])->tuple[int,int]|None returning (x,lcm) solving xâ¡rema[i] (mod mods[i]) for possibly non-coprime moduli, or None if inconsistent.","tests":["assert crt_general([2,3],[3,5])==(8,15)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define fft_convolve(a:list[int],b:list[int])->list[int] multiplying polynomials via FFT (complex) and rounding to nearest int.","tests":["assert fft_convolve([1,2,3],[4,5])==[4,13,22,15]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define ntt_convolve(a:list[int],b:list[int],mod:int=998244353)->list[int] using iterative NTT with primitive root 3.","tests":["assert ntt_convolve([1,2,3],[4,5])==[4,13,22,15]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define berlekamp_massey(seq:list[int],mod:int)->list[int] returning minimal linear recurrence coefficients c[1..k] with a[n]=sum c[i]*a[n-i] mod mod.","tests":["MOD=10**9+7; fib=[0,1,1,2,3,5,8,13,21,34]; C=berlekamp_massey(fib,MOD); assert len(C)==2 and C[0]==1 and C[1]==1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define gaussian_elimination_gf2(mat:list[int],ncols:int)->int returning rank over GF(2) where each row is a bitmask.","tests":["assert gaussian_elimination_gf2([0b110,0b011],3)==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define solve_linear_mod(A:list[list[int]],b:list[int],mod:int)->list[int] solving A x = b (mod mod), unique solution (mod prime).","tests":["p=1000003; x=solve_linear_mod([[1,1],[2,3]],[4,9],p); assert (x[0]+x[1])%p==4 and (2*x[0]+3*x[1])%p==9"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define fib_matrix(n:int,mod:int=10**9+7)->int computing nth Fibonacci via fast matrix exponentiation.","tests":["assert fib_matrix(10)==55"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define kitamasa_nth(coeffs:list[int],init:list[int],n:int,mod:int)->int computing nth term of linear recurrence a[n]=sum c[i]*a[n-1-i] with a[0..k-1]=init.","tests":["MOD=10**9+7; assert kitamasa_nth([1,1],[0,1],10,MOD)==55"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define tsp_held_karp(dist:list[list[int]])->int minimal Hamiltonian cycle cost starting/ending at 0 (complete graph).","tests":["d=[[0,10,15,20],[10,0,35,25],[15,35,0,30],[20,25,30,0]]; assert tsp_held_karp(d)==80"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define meet_in_middle_subset_sum_count(nums:list[int],target:int)->int counting subsets summing to target (n up to ~30).","tests":["assert meet_in_middle_subset_sum_count([1,2,3,4,5],5)==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define stirling_second(n:int,k:int,mod:int=10**9+7)->int computing Stirling numbers of the second kind via DP.","tests":["assert stirling_second(5,2)==15"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define integer_partitions(n:int)->int returning number of integer partitions p(n) using DP.","tests":["assert integer_partitions(10)==42"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define count_topo_sorts_mod(n:int,edges:list[tuple[int,int]],mod:int=10**9+7)->int for n<=20 using DP over subsets, modulo mod.","tests":["assert count_topo_sorts_mod(3,[(0,1),(0,2)])==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define mex_of_array(nums:list[int])->int returning the minimum excluded nonnegative integer.","tests":["assert mex_of_array([0,1,2,4])==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define grundy_for_subtract_game(n:int,moves:list[int])->int Grundy number where from n you can move to n-k for k in moves if k<=n.","tests":["assert grundy_for_subtract_game(10,[1,3,4])!=0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define minimal_period(s:str)->int returning smallest p such that s is repeats of prefix length p.","tests":["assert minimal_period('ababab')==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define suffix_array_doubling(s:str)->list[int] building SA in O(n log n) via doubling.","tests":["assert suffix_array_doubling('banana')==[5,3,1,0,4,2]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define damerau_levenshtein(a:str,b:str)->int allowing transposition cost 1.","tests":["assert damerau_levenshtein('ca','abc')==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define hungarian_min_cost(cost: list[list[int]])->int minimal assignment cost (rows to columns).","tests":["assert hungarian_min_cost([[4,1,3],[2,0,5],[3,2,2]])==5"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_cost_max_flow(n:int,edges:list[tuple[int,int,int,int]])->tuple[int,int] returning (max_flow,min_cost) for directed edges (u,v,cap,cost).","tests":["f,c=min_cost_max_flow(3,[(0,1,2,1),(0,1,1,2),(1,2,3,1)]); assert f==3 and c==5"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define partition_k_equal_sum(nums:list[int],k:int)->bool to partition array into k equal-sum subsets (backtracking with pruning).","tests":["assert partition_k_equal_sum([4,3,2,3,5,2,1],4)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define range_add_range_sum(n:int,updates:list[tuple[int,int,int]],queries:list[tuple[int,int]])->list[int] on n zeros with inclusive range adds and range sum queries (offline).","tests":["res=range_add_range_sum(5,[(1,3,2),(0,1,1)],[(0,4),(1,1),(2,3)]); assert res==[7,2,4]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define fenwick2d(n:int,m:int,ops:list[tuple[str,int,int,int,int]])->list[int] for a 2D Fenwick tree. 'add' x,y,delta; 'sum' x1,y1,x2,y2 inclusive.","tests":["ops=[('add',1,1,5,0),('add',2,2,3,0),('sum',0,0,2,2,0)]; assert fenwick2d(3,3,ops)==[8]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define sparse_table_rmq(arr:list[int])->tuple[list[list[int]],list[int]] building a min-RMQ sparse table; also rmq_query(st,lg,l,r)->int.","tests":["st,lg=sparse_table_rmq([1,3,-1,8,5]); assert rmq_query(st,lg,1,3)==-1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define heavy_light_path_sum(n:int,edges:list[tuple[int,int]],values:list[int],queries:list[tuple[int,int]])->list[int] returning sum on path u..v per query using HLD + segtree.","tests":["n=5; e=[(0,1),(1,2),(1,3),(3,4)]; vals=[1,2,3,4,5]; qs=[(2,4),(0,2)]; assert heavy_light_path_sum(n,e,vals,qs)==[14,6]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define mos_algorithm_distinct(nums:list[int],queries:list[tuple[int,int]])->list[int] returning number of distinct numbers in each [l,r] query using Mo's algorithm.","tests":["nums=[1,2,1,3,4,2,3]; qs=[(0,4),(1,3),(2,5)]; assert mos_algorithm_distinct(nums,qs)==[4,3,4]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define kth_order_statistic_pst(nums:list[int],queries:list[tuple[int,int,int]])->list[int] using a persistent segment tree over values. Query (l,r,k) returns k-th smallest in nums[l..r].","tests":["nums=[5,1,2,3,4]; qs=[(1,3,2),(0,4,3)]; assert kth_order_statistic_pst(nums,qs)==[2,3]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_window_subsequence(S:str,T:str)->str returning minimum window of S containing T as a subsequence ('' if none).","tests":["assert min_window_subsequence('abcdebdde','bde')=='bcde'"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define distinct_subseq_count(S:str,T:str)->int counting distinct subsequences of S equal to T (DP).","tests":["assert distinct_subseq_count('rabbbit','rabbit')==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define interleaving_string(s1:str,s2:str,s3:str)->bool whether s3 is an interleaving of s1 and s2.","tests":["assert interleaving_string('aabcc','dbbca','aadbbcbcac')"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define is_subsequence(s:str,t:str)->bool returning True if s is a subsequence of t.","tests":["assert is_subsequence('abc','ahbgdc') and not is_subsequence('axc','ahbgdc')"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define longest_string_chain(words:list[str])->int (next word formed by inserting one char anywhere).","tests":["assert longest_string_chain(['a','b','ba','bca','bda','bdca'])==4"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_remove_to_make_valid_parentheses(s:str)->str removing minimum parentheses to make string valid; any valid result accepted.","tests":["res=min_remove_to_make_valid_parentheses('a)b(c)d'); assert res in ('ab(c)d','a b(c)d'.replace(' ',''))"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_falling_path_sum(matrix:list[list[int]])->int (move down-left/down/down-right).","tests":["assert min_falling_path_sum([[2,1,3],[6,5,4],[7,8,9]])==13"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define max_sum_submatrix_no_larger_than_k(matrix:list[list[int]],k:int)->int returning max submatrix sum <= k.","tests":["assert max_sum_submatrix_no_larger_than_k([[1,0,1],[0,-2,3]],2)==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define count_rectangles_all_ones(mat:list[list[int]])->int counting submatrices with all ones.","tests":["assert count_rectangles_all_ones([[1,0,1],[1,1,0],[1,1,0]])==13"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define trap_rainwater_2d(height_map:list[list[int]])->int computing trapped water in 2D grid (heap-based BFS).","tests":["h=[[1,4,3,1,3,2],[3,2,1,3,2,4],[2,3,3,2,3,1]]; assert trap_rainwater_2d(h)==4"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define count_inversions(nums:list[int])->int using merge sort.","tests":["assert count_inversions([2,4,1,3,5])==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_number_of_arrows(points:list[tuple[int,int]])->int to burst all balloons intervals using greedy.","tests":["assert min_number_of_arrows([(10,16),(2,8),(1,6),(7,12)])==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define erase_overlap_intervals(intervals:list[tuple[int,int]])->int minimal removals to eliminate overlaps.","tests":["assert erase_overlap_intervals([(1,2),(2,3),(3,4),(1,3)])==1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_meeting_rooms(intervals:list[tuple[int,int]])->int minimum number of meeting rooms required.","tests":["assert min_meeting_rooms([(0,30),(5,10),(15,20)])==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define schedule_course(courses:list[tuple[int,int]])->int (duration,last day) maximizing number of courses.","tests":["assert schedule_course([(100,200),(200,1300),(1000,1250),(2000,3200)])==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define max_envelopes(envelopes:list[tuple[int,int]])->int (Russian Doll Envelopes).","tests":["assert max_envelopes([(5,4),(6,4),(6,7),(2,3)])==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define longest_string_without_three_consecutive_same(a:int,b:int,c:int)->str building longest string with 'a','b','c' without 3 same in a row.","tests":["from collections import Counter as C; s=longest_string_without_three_consecutive_same(1,1,7); cc=C(s); assert cc['c']<=7 and 'aaa' not in s and 'bbb' not in s and 'ccc' not in s"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_add_to_make_valid_parentheses(s:str)->int minimum number of insertions to make parentheses string valid.","tests":["assert min_add_to_make_valid_parentheses('())')==1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define restore_array_from_adjacent_pairs(pairs:list[tuple[int,int]])->list[int] reconstructing original array (unique solution).","tests":["res=restore_array_from_adjacent_pairs([(2,1),(3,4),(3,2)]); assert res in ([1,2,3,4],[4,3,2,1])"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define shortest_superstring(strings:list[str])->str returning any shortest superstring containing all strings.","tests":["s=shortest_superstring(['ab','bc','cd']); assert 'ab' in s and 'bc' in s and 'cd' in s"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define palindrome_pairs(words:list[str])->list[tuple[int,int]] returning all pairs (i,j), i!=j, such that words[i]+words[j] is a palindrome (order not important).","tests":["res=palindrome_pairs(['bat','tab','cat']); assert set(res)=={(0,1),(1,0)}"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define longest_palindromic_subsequence(s:str)->int.","tests":["assert longest_palindromic_subsequence('bbbab')==4"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define minimum_delete_sum(a:str,b:str)->int (minimum ASCII delete sum for two strings).","tests":["assert minimum_delete_sum('sea','eat')==231"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define odd_even_jumps(arr:list[int])->int returning number of good starting indices.","tests":["assert odd_even_jumps([10,13,12,14,15])==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define max_sum_of_three_subarrays(nums:list[int],k:int)->list[int] returning starting indices of three non-overlapping subarrays with maximum sum (lexicographically smallest).","tests":["assert max_sum_of_three_subarrays([1,2,1,2,6,7,5,1],2)==[0,3,5]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define count_smaller_after_self(nums:list[int])->list[int] using BIT or merge sort.","tests":["assert count_smaller_after_self([5,2,6,1])==[2,1,1,0]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define skyline_buildings(buildings:list[tuple[int,int,int]])->list[tuple[int,int]] returning skyline critical points.","tests":["res=skyline_buildings([(2,9,10),(3,7,15),(5,12,12),(15,20,10),(19,24,8)]); assert res[:3]==[(2,10),(3,15),(7,12)]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define candy(ratings:list[int])->int (distribute candies).","tests":["assert candy([1,0,2])==5"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define split_array_largest_sum(nums:list[int],m:int)->int minimizing the largest subarray sum when splitting into m parts (binary search + greedy).","tests":["assert split_array_largest_sum([7,2,5,10,8],2)==18"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define super_egg_drop(k:int,n:int)->int minimal moves to determine critical floor with k eggs and n floors.","tests":["assert super_egg_drop(2,6)==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define best_team_score(scores:list[int],ages:list[int])->int maximizing score without conflicts (older player with lower score not allowed).","tests":["assert best_team_score([1,3,5,10,15],[1,2,3,4,5])==34"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define mincost_to_hire_workers(quality:list[int],wage:list[int],k:int)->float minimal cost to hire k workers. Return float, allow small error.","tests":["cost=mincost_to_hire_workers([10,20,5],[70,50,30],2); assert abs(cost-105.0)<1e-5"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define median_maintenance(stream:list[int])->list[float] returning running medians after each insertion.","tests":["assert median_maintenance([5,15,1,3])==[5.0,10.0,5.0,4.0]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define online_median_with_remove(ops:list[tuple[str,int]])->list[float] where ops are ('add',x) or ('remove',x); use two heaps with lazy deletion.","tests":["ops=[('add',1),('add',2),('add',3),('remove',2),('add',4)]; assert online_median_with_remove(ops)==[1.0,1.5,2.0,2.0,3.0]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define word_ladder_ii(begin:str,end:str,word_list:list[str])->list[list[str]] returning all shortest transformation sequences (order not important).","tests":["res=word_ladder_ii('hit','cog',['hot','dot','dog','lot','log','cog']); assert sorted([len(p) for p in res])==[5,5]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define decode_ways_with_star(s:str)->int counting decodings where '*' can be '1'..'9' (mod 10**9+7).","tests":["assert decode_ways_with_star('1*')==18"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define count_range_sum(nums:list[int],lower:int,upper:int)->int counting range sums in [lower,upper] using prefix + divide-and-conquer.","tests":["assert count_range_sum([-2,5,-1],-2,2)==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define sum_bitwise_ors_subarrays(arr:list[int])->int returning count of distinct bitwise ORs of all subarrays.","tests":["assert sum_bitwise_ors_subarrays([1,1,2])==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define count_triplets_xor(arr:list[int])->int counting triplets (i<j<k) with XOR of arr[i..j-1] == XOR of arr[j..k].","tests":["assert count_triplets_xor([2,3,1,6,7])==4"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define max_subarray_min_product(nums:list[int])->int returning max(min(subarray)*sum(subarray)) mod 10**9+7.","tests":["assert max_subarray_min_product([1,2,3,2])==14"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_subarray_removals_divisible_by_p(nums:list[int],p:int)->int removing shortest subarray so total sum divisible by p, or -1.","tests":["assert min_subarray_removals_divisible_by_p([3,1,4,2],6)==1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define flip_string_monotone_increasing(s:str)->int minimal flips to make s monotone increasing.","tests":["assert flip_string_monotone_increasing('00110')==1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define partition_labels(s:str)->list[int] returning sizes of partitions so each letter appears in at most one part.","tests":["assert partition_labels('ababcbacadefegdehijhklij')==[9,7,8]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define count_k_distinct_substrings(s:str,k:int)->int counting substrings with at most k distinct characters.","tests":["assert count_k_distinct_substrings('pqpqs',2)==7"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_remove_to_make_valid_brackets(s:str)->str for parentheses '()' and square '[]'. Remove minimum chars to make nesting valid.","tests":["assert min_remove_to_make_valid_brackets('([)]') in ('()','[]')"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define word_break_all(s:str,dict_words:list[str])->list[str] returning all sentences (space-separated) that break s into dictionary words (order not important).","tests":["res=word_break_all('catsanddog',['cat','cats','and','sand','dog']); assert set(res)=={'cats and dog','cat sand dog'}"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define median_two_sorted_unbalanced(a:list[int],b:list[int])->float in O(log(min(n,m))).","tests":["assert median_two_sorted_unbalanced([1,2],[3,4,5,6,7])==4.0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define range_module supporting addRange(l,r), removeRange(l,r), queryRange(l,r)->bool for half-open intervals [l,r). Use disjoint sorted intervals.","tests":["rm=range_module(); rm.addRange(10,20); rm.removeRange(14,16); assert rm.queryRange(10,14) and not rm.queryRange(13,15) and rm.queryRange(16,17)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define order_statistics_treap with insert(x), erase(x), kth(k)->int (1-indexed), count_lt(x)->int.","tests":["t=order_statistics_treap(); [t.insert(x) for x in [5,1,3,2,4]]; assert t.kth(1)==1 and t.kth(5)==5 and t.count_lt(3)==2; t.erase(3); assert t.count_lt(3)==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define weighted_random_picker(weights:list[int],seed:int|None=None)->int returning index with probability proportional to weight; seed used for determinism.","tests":["from collections import Counter; picks=[weighted_random_picker([1,3,2],seed=42) for _ in range(100)]; cnt=Counter(picks); assert set(cnt)<={0,1,2} and sum(cnt.values())==100"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define reservoir_sample_k(iterable:list[int],k:int,seed:int|None=None)->list[int] returning a reservoir sample of size k (deterministic when seed set).","tests":["s1=reservoir_sample_k(list(range(100)),5,seed=1); s2=reservoir_sample_k(list(range(100)),5,seed=1); assert s1==s2 and len(s1)==5"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define is_rotation(a:str,b:str)->bool returning True iff b is a rotation of a.","tests":["assert is_rotation('abcde','cdeab') and not is_rotation('abc','acb')"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define longest_subsequence_with_diff_one(nums:list[int])->int (abs difference between adjacent in subsequence is 1).","tests":["assert longest_subsequence_with_diff_one([10,9,4,5,4,8,6])==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_cost_to_merge_stones(stones:list[int],K:int)->int merging exactly K piles at a time; return -1 if impossible.","tests":["assert min_cost_to_merge_stones([3,2,4,1],2)==20"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define strange_printer_turns(s:str)->int (minimum turns for strange printer).","tests":["assert strange_printer_turns('aaabbb')==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define remove_boxes(boxes:list[int])->int (DP).","tests":["assert remove_boxes([1,3,2,2,2,3,4,3,1])==23"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define cat_and_mouse_game(graph:list[list[int]])->int outcome: 0 draw, 1 mouse wins, 2 cat wins.","tests":["assert cat_and_mouse_game([[2,5],[3],[0,4,5],[1,4,5],[2,3],[0,2,3]]) in (0,1,2)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define stone_game_optimal(piles:list[int])->bool return True if first player wins with optimal play.","tests":["assert stone_game_optimal([5,3,4,5])"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define count_good_strings(low:int,high:int,zero:int,one:int)->int counting strings built by appending '0'*zero or '1'*one with length in [low,high] (mod 10**9+7).","tests":["assert count_good_strings(3,3,1,1)==8"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define domino_and_tromino_tiling(n:int)->int number of ways to tile a 2xn board using dominos and trominoes (mod 10**9+7).","tests":["assert domino_and_tromino_tiling(3)==5"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define count_permutations_avoid_adjacent_equal(n:int)->int number of permutations of [1..n] with no adjacent numbers differing by 1 (n<=8).","tests":["assert count_permutations_avoid_adjacent_equal(4)==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define minimum_total_triangle(triangle:list[list[int]])->int minimal path sum from top to bottom.","tests":["assert minimum_total_triangle([[2],[3,4],[6,5,7],[4,1,8,3]])==11"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define count_paths_out_of_grid(m:int,n:int,N:int,i:int,j:int)->int counting paths that move out of grid in at most N moves (mod 10**9+7).","tests":["assert count_paths_out_of_grid(2,2,2,0,0)==6"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define tiling_rectangle(n:int,m:int)->int minimum number of squares to tile an n x m rectangle (n,m<=13).","tests":["assert tiling_rectangle(2,3)==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define cherry_pickup(grid:list[list[int]])->int maximum cherries collected by two robots moving down (single-path mirrored version).","tests":["assert cherry_pickup([[0,1,-1],[1,0,-1],[1,1,1]])==5"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define number_of_arrays(n:int,lower:int,upper:int,differences:list[int])->int counting arrays consistent with differences and within [lower,upper].","tests":["assert number_of_arrays(3,-2,2,[-1,1,-1])==4"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_refuel_stops(target:int,startFuel:int,stations:list[tuple[int,int]])->int minimal refueling stops to reach target.","tests":["assert min_refuel_stops(100,10,[(10,60),(20,30),(30,30),(60,40)])==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define car_fleet_count(target:int,position:list[int],speed:list[int])->int counting car fleets reaching the target.","tests":["assert car_fleet_count(12,[10,8,0,5,3],[2,4,1,1,3])==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_time_to_repair_cars(ranks:list[int],cars:int)->int where time for t cars by rank r is r*t*t (binary search minimal time).","tests":["assert min_time_to_repair_cars([4,2,3,1],10)==16"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define swim_in_rising_water(grid:list[list[int]])->int minimal time to reach bottom-right where time t allows cells with value<=t (Dijkstra/UF).","tests":["assert swim_in_rising_water([[0,2],[1,3]])==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define shortest_subarray_removal_to_make_sorted(nums:list[int])->int minimal removals to make array non-decreasing.","tests":["assert shortest_subarray_removal_to_make_sorted([1,2,3,10,4,2,3,5])==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define minimum_mountain_path_sum(grid:list[list[int]])->int where path goes down (down-left/down/down-right) to a bottom cell then up (up-left/up/up-right) to top minimizing sum.","tests":["g=[[1,2,3],[4,5,6],[7,8,9]]; assert isinstance(minimum_mountain_path_sum(g),int)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_number_of_taps(n:int,ranges:list[int])->int covering [0,n] with minimum taps (interval cover). Return -1 if impossible.","tests":["assert min_number_of_taps(5,[3,4,1,1,0,0])==1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define alien_dictionary(words:list[str])->str deriving a valid ordering of letters given sorted words ('' if impossible).","tests":["o=alien_dictionary(['wrt','wrf','er','ett','rftt']); assert set(o)>=set('wertf')"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_days_to_disconnect_island(grid:list[list[int]])->int minimal days to disconnect island by removing one cell per day (return 0,1, or 2).","tests":["assert min_days_to_disconnect_island([[1,1]])==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define pacific_atlantic_count(heights:list[list[int]])->int returning number of cells flowing to both oceans (count only).","tests":["assert pacific_atlantic_count([[1,2],[4,3]])==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define compute_zigzag_level_order(root:tuple|None)->list[list[int]] for a binary tree represented as (val,left,right).","tests":["tree=(3,(9,None,None),(20,(15,None,None),(7,None,None))); assert compute_zigzag_level_order(tree)==[[3],[20,9],[15,7]]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define build_tree_from_pre_in(pre:list[int],inn:list[int])->tuple|None building binary tree as nested tuples (val,left,right).","tests":["t=build_tree_from_pre_in([3,9,20,15,7],[9,3,15,20,7]); assert t[0]==3 and t[1][0]==9 and t[2][0]==20"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define bst_kth_smallest(root:tuple|None,k:int)->int for BST represented as (val,left,right).","tests":["bst=(5,(3,(2,None,None),(4,None,None)),(6,None,None)); assert bst_kth_smallest(bst,3)==4"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define binary_tree_max_path_sum(root:tuple|None)->int (node values are ints).","tests":["t=(-10,(9,None,None),(20,(15,None,None),(7,None,None))); assert binary_tree_max_path_sum(t)==42"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define serialize_deserialize_tree with serialize(root:tuple|None)->list and deserialize(lst:list)->tuple|None using level order with None markers.","tests":["t=(1,(2,None,None),(3,(4,None,None),None)); data=serialize(t); t2=deserialize(data); assert serialize(t2)==data"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define is_symmetric_tree(root:tuple|None)->bool for binary tree symmetry (mirror).","tests":["t=(1,(2,(3,None,None),(4,None,None)),(2,(4,None,None),(3,None,None))); assert is_symmetric_tree(t)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define lca_binary_tree(root:tuple|None,p:int,q:int)->int returning LCA node value in a binary tree of ints.","tests":["t=(3,(5,(6,None,None),(2,(7,None,None),(4,None,None))),(1,(0,None,None),(8,None,None))); assert lca_binary_tree(t,5,1)==3 and lca_binary_tree(t,6,4)==5"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define number_of_islands_after_additions(m:int,n:int,positions:list[tuple[int,int]])->list[int] using DSU (dynamic islands).","tests":["assert number_of_islands_after_additions(3,3,[(0,0),(0,1),(1,2),(2,1),(1,1)])==[1,1,2,3,1]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define count_paths_with_obstacles_and_turns(grid:list[list[int]],k:int)->int paths from (0,0) to (n-1,m-1) making at most k turns (right/down moves, 0=free,1=blocked).","tests":["g=[[0,0,0],[0,1,0],[0,0,0]]; assert isinstance(count_paths_with_obstacles_and_turns(g,2),int)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define knight_dialer(n:int)->int counting sequences of length n using knight moves on phone keypad (mod 10**9+7).","tests":["assert knight_dialer(2)==20"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define num_music_playlists(n:int,goal:int,k:int)->int number of playlists (mod 10**9+7).","tests":["assert num_music_playlists(3,3,1)==6"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define string_compression_with_deletions(s:str,k:int)->int minimal length after deleting at most k chars using RLE length measure.","tests":["assert string_compression_with_deletions('aaabcccd',2)==4"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define palindrome_partition_iii(s:str,k:int)->int minimal changes to partition s into k palindromes.","tests":["assert palindrome_partition_iii('abc',2)==1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_cost_to_cut_stick(n:int,cuts:list[int])->int minimal total cost to cut stick at given positions.","tests":["assert min_cost_to_cut_stick(7,[1,3,4,5])==16"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define shortest_common_supersequence(a:str,b:str)->str returning any shortest common supersequence.","tests":["s=shortest_common_supersequence('abac','cab'); assert len(s)==5"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define minimize_malware_spread(graph:list[list[int]],initial:list[int])->int remove one node to minimize final infection; tie -> smallest index.","tests":["assert minimize_malware_spread([[1,1,0],[1,1,0],[0,0,1]],[0,1])==0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define network_delay_time(times:list[tuple[int,int,int]],n:int,k:int)->int (Dijkstra).","tests":["assert network_delay_time([(2,1,1),(2,3,1),(3,4,1)],4,2)==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define minimum_spanning_arborescence(root:int,n:int,edges:list[tuple[int,int,int]])->int computing directed MST (Edmonds' algorithm).","tests":["assert minimum_spanning_arborescence(0,3,[(0,1,1),(0,2,5),(1,2,1),(2,1,1)])==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define k_shortest_paths_dag(n:int,edges:list[tuple[int,int,int]],src:int,dst:int,k:int)->list[int] returning k shortest path sums in a DAG.","tests":["n=4; e=[(0,1,1),(1,3,1),(0,2,2),(2,3,1),(1,2,1)]; assert k_shortest_paths_dag(4,e,0,3,3)==[2,3,3]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define johnson_all_pairs_shortest_paths(n:int,edges:list[tuple[int,int,int]])->list[list[int]] using Johnson's algorithm (negative edges allowed, no negative cycles). Use INF=10**12.","tests":["INF=10**12; d=johnson_all_pairs_shortest_paths(3,[(0,1,2),(1,2,-5),(0,2,10)]); assert d[0][2]==-3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define longest_path_dag(n:int,edges:list[tuple[int,int,int]])->int returning longest path length in a DAG.","tests":["assert longest_path_dag(4,[(0,1,1),(1,2,2),(0,2,2),(2,3,3)])==6"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define steiner_tree_dp(n:int,edges:list[tuple[int,int,int]],terminals:list[int])->int minimal Steiner tree cost on small graphs (bitmask DP).","tests":["assert steiner_tree_dp(4,[(0,1,1),(1,2,1),(2,3,1),(0,3,10)],[0,2])==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define minimum_window_cover_words(s:str,words:list[str])->str returning shortest substring containing all words as substrings (order irrelevant).","tests":["res=minimum_window_cover_words('barfoobazbitfoo',['foo','bar']); assert 'bar' in res and 'foo' in res and len(res)==6"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define count_valid_triangles(nums:list[int])->int number of triplets forming valid triangles.","tests":["assert count_valid_triangles([2,2,3,4])==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define kmp_automaton(s:str)->list[dict[str,int]] building DFA for lowercase 'a'..'z'.","tests":["auto=kmp_automaton('aba'); assert len(auto)==3 and all('a' in st and 'b' in st for st in auto)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define find_all_palindromes_manacher(s:str)->list[int] returning structure of palindrome radii (document format); tests only check type/length.","tests":["res=find_all_palindromes_manacher('abacaba'); assert isinstance(res,(list,tuple))"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define minimal_edit_to_anagram(a:str,b:str)->int minimal character changes to make a an anagram of b (lengths equal).","tests":["assert minimal_edit_to_anagram('anagram','mangaar')==0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define longest_subsequence_alternating_parity(nums:list[int])->int length of longest subsequence with alternating parity.","tests":["assert longest_subsequence_alternating_parity([1,2,3,4,5])==5"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define re_space_sentence(s:str,dict_words:list[str])->str inserting minimal spaces to split s into dictionary words (return any minimal-space solution).","tests":["res=re_space_sentence('jesslookedjustliketimherbrother',['looked','just','like','her','brother']); assert 'looked just like her brother' in res"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_days_to_make_bouquets(bloomDay:list[int],m:int,k:int)->int minimal days to make m bouquets each of k adjacent flowers (-1 if impossible).","tests":["assert min_days_to_make_bouquets([1,10,3,10,2],3,1)==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define max_profit_with_k_transactions(prices:list[int],k:int)->int.","tests":["assert max_profit_with_k_transactions([3,2,6,5,0,3],2)==7"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define super_palindromes_in_range(left:str,right:str)->int counting super-palindromes (palindrome whose square is palindrome) within [left,right].","tests":["assert super_palindromes_in_range('4','1000')==4"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define count_smaller_in_matrix(matrix:list[list[int]],target:int)->int counting numbers <= target in a row&col-sorted matrix.","tests":["assert count_smaller_in_matrix([[1,5,9],[10,11,13],[12,13,15]],13)==8"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define kth_smallest_in_multiplication_table(m:int,n:int,k:int)->int.","tests":["assert kth_smallest_in_multiplication_table(3,3,5)==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define minimize_maximum_pair_difference(nums:list[int],p:int)->int selecting p disjoint pairs to minimize the maximum difference.","tests":["assert minimize_maximum_pair_difference([10,1,2,7,1,3],2)==1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define smallest_sufficient_team(req_skills:list[str],people:list[list[str]])->list[int] returning indices of a minimal team covering all skills.","tests":["team=smallest_sufficient_team(['java','nodejs','reactjs'],[['java'],['nodejs'],['nodejs','reactjs']]); assert set(team)=={0,2}"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define max_points_on_a_line(points:list[tuple[int,int]])->int maximum number of points on a single line.","tests":["assert max_points_on_a_line([(1,1),(2,2),(3,3)])==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define union_find_rollback(n:int,ops:list[tuple[str,int,int]])->list[int] supporting 'union' and 'save'/'rollback' checkpoints; return size of component of node 0 after each op.","tests":["ops=[('union',0,1),('save',-1,-1),('union',1,2),('rollback',-1,-1)]; res=union_find_rollback(4,ops); assert res[-1]==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define dynamic_connectivity_offline(n:int,edges:list[tuple[int,int,int,int]],queries:list[tuple[int,int,int]])->list[bool] where edges are active on [l,r) and queries ask connectivity at time t.","tests":["ans=dynamic_connectivity_offline(3,[(0,1,0,2),(1,2,1,3)],[(0,0,1),(1,0,2),(2,0,2)]); assert ans==[True,True,False]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define palindromic_tree_ertree_count(s:str)->int counting distinct palindromic substrings (Eertree).","tests":["assert palindromic_tree_ertree_count('ababa')==5"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define suffix_automaton_longest_k_repeated(s:str,k:int)->int length of the longest substring that appears at least k times using SAM.","tests":["assert suffix_automaton_longest_k_repeated('banana',2)==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define k_palindrome_check(s:str,k:int)->bool whether s can become a palindrome by deleting at most k chars.","tests":["assert k_palindrome_check('abcdeca',2)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define rolling_hash_substring_search(text:str,pattern:str,b:int=911382323,p:int=972663749)->int returning first index via rolling hash (handle collisions conservatively).","tests":["assert rolling_hash_substring_search('hello','ll')==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_edit_to_make_k_anagram(a:str,b:str,k:int)->bool whether we can make a and b k-anagrams by changing at most k chars in a (same length).","tests":["assert min_edit_to_make_k_anagram('anagram','grammar',3)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define subsequence_widths_sum(nums:list[int])->int sum of widths (max-min) of all subsequences modulo 10**9+7.","tests":["assert subsequence_widths_sum([2,1,3])==6"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define count_pairs_with_xor_less_than(nums:list[int],k:int)->int using binary trie.","tests":["assert count_pairs_with_xor_less_than([1,4,2,7],2)==1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_xor_pair(nums:list[int])->int returning minimum XOR of any pair.","tests":["assert min_xor_pair([0,2,5,7])==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define longest_subarray_with_limit(nums:list[int],limit:int)->int length of longest subarray where max-min<=limit (deques).","tests":["assert longest_subarray_with_limit([8,2,4,7],4)==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define sliding_window_k_sum(nums:list[int],k:int)->list[int] returning sums of every window size k.","tests":["assert sliding_window_k_sum([1,2,3,4,5],2)==[3,5,7,9]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define minimum_index_sum_two_lists(list1:list[str],list2:list[str])->list[str] common strings with minimal index sum.","tests":["res=minimum_index_sum_two_lists(['Shogun','Tapioca Express','Burger King','KFC'],['Piatti','The Grill at Torrey Pines','Hungry Hunter Steakhouse','Shogun']); assert res==['Shogun']"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define max_product_word_lengths(words:list[str])->int maximum product of lengths of two words sharing no common letters.","tests":["assert max_product_word_lengths(['abcw','baz','foo','bar','xtfn','abcdef'])==16"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define find_min_height_trees(n:int,edges:list[tuple[int,int]])->list[int] roots of Minimum Height Trees.","tests":["assert set(find_min_height_trees(4,[(1,0),(1,2),(1,3)]))=={1}"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define course_schedule_order_with_ties(n:int,prereq:list[tuple[int,int]])->list[int] returning lexicographically smallest topological order when multiple exist.","tests":["assert course_schedule_order_with_ties(4,[(1,0),(2,0),(3,1),(3,2)])==[0,1,2,3]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_operations_make_network_connected(n:int,connections:list[tuple[int,int]])->int minimal operations to connect all computers, or -1 if impossible.","tests":["assert min_operations_make_network_connected(4,[(0,1),(0,2),(1,2)])==1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define random_pick_with_blacklist(n:int,blacklist:list[int],seed:int|None=None)->callable returning pick()->int that picks uniformly from allowed set.","tests":["picker=random_pick_with_blacklist(5,[1,3],seed=42); s=[picker() for _ in range(5)]; assert all(x in {0,2,4} for x in s)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define count_submatrices_with_target_sum(matrix:list[list[int]],target:int)->int.","tests":["assert count_submatrices_with_target_sum([[0,1,0],[1,1,1],[0,1,0]],0)==4"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define minimum_area_rectangle(points:list[tuple[int,int]])->int area of smallest axis-aligned rectangle formed by points; return 0 if none.","tests":["assert minimum_area_rectangle([(1,1),(1,3),(3,1),(3,3),(2,2)])==4"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define is_rectangle_cover(rects:list[tuple[int,int,int,int]])->bool checking if rectangles exactly cover a region without overlaps/gaps.","tests":["assert is_rectangle_cover([(1,1,3,3),(3,1,4,2),(3,2,4,4),(1,3,2,4),(2,3,3,4)])"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define shortest_bridge_between_islands(grid:list[list[int]])->int number of 0s to flip to connect two islands.","tests":["assert shortest_bridge_between_islands([[0,1],[1,0]])==1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define longest_consecutive_path_in_binary_tree(root:tuple|None)->int for parent->child increasing by 1.","tests":["t=(1,(2,(3,None,None),None),(3,(4,None,None),None)); assert longest_consecutive_path_in_binary_tree(t)==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define max_product_splitted_binary_tree(root:tuple|None)->int maximum product of sums from splitting one edge (mod 10**9+7).","tests":["t=(1,(2,(4,None,None),(5,None,None)),(3,(6,None,None),None)); assert isinstance(max_product_splitted_binary_tree(t),int)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define kth_lexicographical_number(n:int,k:int)->int in range [1..n].","tests":["assert kth_lexicographical_number(13,2)==10"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define count_digit_one(n:int)->int counting total '1' digits from 1..n.","tests":["assert count_digit_one(13)==6"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define strobogrammatic_in_range(low:str,high:str)->int counting strobogrammatic numbers within range.","tests":["assert strobogrammatic_in_range('0','100')>=3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define powerful_integers(x:int,y:int,bound:int)->list[int] returning unique numbers of form x^i + y^j <= bound (order irrelevant).","tests":["res=powerful_integers(2,3,10); assert set(res)=={3,5,7,9,10}"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define nth_magical_number(n:int,a:int,b:int)->int (LCM-based binary search), result mod 10**9+7.","tests":["assert nth_magical_number(4,2,3)==6"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define count_beautiful_arrangements(n:int)->int (arrangements where position i divisible by val or vice versa).","tests":["assert count_beautiful_arrangements(3)==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define tiling_dominoes_2xn(n:int)->int number of tilings with dominos and trominoes (mod 10**9+7).","tests":["assert tiling_dominoes_2xn(3)==5"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define count_paths_mn_obstacles(m:int,n:int,obstacles:set[tuple[int,int]])->int paths from (0,0) to (m-1,n-1) moving right/down avoiding obstacles using combinatorics (mod 10**9+7).","tests":["assert count_paths_mn_obstacles(3,3,{(1,1)})==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define k_radius_subarray_averages(nums:list[int],k:int)->list[int] where average is floor of window of size 2k+1, else -1.","tests":["assert k_radius_subarray_averages([7,4,3,9,1,8,5,2,6],3)==[-1,-1,-1,5,4,4,-1,-1,-1]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define minimum_operations_to_make_continuous(nums:list[int])->int minimal operations to make array continuous (all unique and within a consecutive range of same size).","tests":["assert minimum_operations_to_make_continuous([4,2,5,3])==0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define count_subsequences_sum_divisible_by_k(nums:list[int],k:int)->int counting subsequences whose sum divisible by k (n<=30).","tests":["assert count_subsequences_sum_divisible_by_k([1,2,3],3)==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_abs_sum_two_arrays(a:list[int],b:list[int])->int minimal |a[i]+b[j]| using two pointers on sorted arrays.","tests":["assert min_abs_sum_two_arrays([-8,-5,-3,0,2,4],[7,5,2,-1])==0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define three_sum_closest(nums:list[int],target:int)->int.","tests":["assert three_sum_closest([-1,2,1,-4],1)==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define four_sum_count_zero(A:list[int],B:list[int],C:list[int],D:list[int])->int counting tuples with A[i]+B[j]+C[k]+D[l]==0.","tests":["assert four_sum_count_zero([1,2],[-2,-1],[-1,2],[0,2])==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define count_subarrays_with_k_odds(nums:list[int],k:int)->int.","tests":["assert count_subarrays_with_k_odds([1,1,2,1,1],3)==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define count_subarrays_with_product_less_than_k(nums:list[int],k:int)->int.","tests":["assert count_subarrays_with_product_less_than_k([10,5,2,6],100)==8"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define length_of_longest_fibonacci_like_subseq(arr:list[int])->int.","tests":["assert length_of_longest_fibonacci_like_subseq([1,2,3,4,5,6,7,8])==5"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define max_sum_after_partitioning(arr:list[int],k:int)->int partition into subarrays of length at most k, each contributes max*len.","tests":["assert max_sum_after_partitioning([1,15,7,9,2,5,10],3)==84"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define special_binary_string_sort(s:str)->str reorder special binary strings by recursively sorting components to get lexicographically largest.","tests":["assert special_binary_string_sort('11011000')=='11100100'"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define decode_ways_ii_spaces(s:str)->int like num decodings but spaces are ignored; '*' wildcard allowed (mod 10**9+7).","tests":["assert decode_ways_ii_spaces('1 *')==18"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define max_score_sightseeing_pair(values:list[int])->int.","tests":["assert max_score_sightseeing_pair([8,1,5,2,6])==11"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define count_number_of_nice_subarrays(nums:list[int],k:int)->int counting subarrays with exactly k odd numbers.","tests":["assert count_number_of_nice_subarrays([1,1,2,1,1],3)==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define house_robber_iii(root:tuple|None)->int for binary tree robber problem.","tests":["t=(3,(2,None,(3,None,None)),(3,None,(1,None,None))); assert house_robber_iii(t)==7"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define longest_zigzag_in_tree(root:tuple|None)->int longest ZigZag path length in binary tree.","tests":["t=(1,(1,None,(1,None,(1,None,(1,None,None)))),(1,None,None)); assert longest_zigzag_in_tree(t)>=3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define find_duplicate_subtrees(root:tuple|None)->list[tuple] returning roots of duplicate subtrees; order not important.","tests":["t=(1,(2,(4,None,None),None),(3,(2,(4,None,None),None),(4,None,None))); res=find_duplicate_subtrees(t); assert len(res)==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define remove_invalid_parentheses_all(s:str)->list[str] removing minimum number to make valid, returning all results (order not important).","tests":["res=remove_invalid_parentheses_all('()())()'); assert set(res)=={'()()()','(())()'}"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define cracking_safe(n:int,k:int)->str returning a de Bruijn sequence for k symbols and subsequences of length n (lexicographically smallest).","tests":["s=cracking_safe(2,2); assert len(s)==(2**2)+2-1 and set(s).issubset({'0','1'})"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_operations_box_moves(boxes:str)->list[int] where boxes is '0'/'1'; return moves to move all balls to each position.","tests":["assert min_operations_box_moves('110')==[1,1,3]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_flips_to_monotone_circular(s:str)->int minimal flips to make circular binary string monotone increasing when linearized appropriately.","tests":["assert isinstance(min_flips_to_monotone_circular('00110'),int)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_num_moves_chess_knight(src:str,dst:str,blocked:set[str])->int minimal knight moves on standard 8x8 board (e.g., 'a1') avoiding blocked squares.","tests":["assert min_num_moves_chess_knight('a1','b3',set())==1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define solve_8_puzzle(start:list[int])->int minimal moves to reach solved state [1,2,3,4,5,6,7,8,0], or -1 if unsolvable.","tests":["assert solve_8_puzzle([1,2,3,4,5,6,7,8,0])==0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define sudoku_is_valid(board:list[list[str]])->bool validating a filled Sudoku board.","tests":["b=[['5','3','4','6','7','8','9','1','2'],['6','7','2','1','9','5','3','4','8'],['1','9','8','3','4','2','5','6','7'],['8','5','9','7','6','1','4','2','3'],['4','2','6','8','5','3','7','9','1'],['7','1','3','9','2','4','8','5','6'],['9','6','1','5','3','7','2','8','4'],['2','8','7','4','1','9','6','3','5'],['3','4','5','2','8','6','1','7','9']]; assert sudoku_is_valid(b)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define distinct_subseq_k(s:str,k:int)->int counting distinct non-empty subsequences of length exactly k (mod 10**9+7).","tests":["assert distinct_subseq_k('abc',2)==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_cost_ticket(days:list[int],costs:list[int])->int minimizing travel tickets of 1,7,30 days.","tests":["assert min_cost_ticket([1,4,6,7,8,20],[2,7,15])==11"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_absolute_sum_diff(a:list[int],b:list[int])->int minimal absolute sum difference with at most one replacement in a from a's elements (mod 10**9+7).","tests":["assert min_absolute_sum_diff([1,7,5],[2,3,5])==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define max_sum_of_averages(nums:list[int],k:int)->float partition into at most k groups to maximize sum of averages.","tests":["assert abs(max_sum_of_averages([9,1,2,3,9],3)-20.0)<1e-6"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_num_of_coins_for_change(amount:int,coins:list[int])->int with unlimited coins; return -1 if impossible.","tests":["assert min_num_of_coins_for_change(11,[1,2,5])==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define count_binary_trees_with_factors(arr:list[int])->int number of binary trees where each non-leaf is product of children (arr unique >1), modulo 10**9+7.","tests":["assert count_binary_trees_with_factors([2,4])==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define sum_of_distances_in_tree(n:int,edges:list[tuple[int,int]])->list[int] (two-pass DP).","tests":["assert sum_of_distances_in_tree(6,[(0,1),(0,2),(2,3),(2,4),(2,5)])==[8,12,6,10,10,10]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define kth_smallest_subarray_sum(nums:list[int],k:int)->int using binary search + prefix + two-pointer.","tests":["assert kth_smallest_subarray_sum([2,1,3],4)==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_absolute_sum_difference_pairs(a:list[int],b:list[int])->int minimal sum |a[i]-b[p[i]]| by permuting b (Hungarian).","tests":["assert min_absolute_sum_difference_pairs([1,3,5],[2,4,6])==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define max_distance_to_closest(seats:list[int])->int maximum distance to closest occupied seat.","tests":["assert max_distance_to_closest([1,0,0,0,1,0,1])==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define character_replacement(s:str,k:int)->int length of longest substring that can be turned into all same letters after at most k replacements.","tests":["assert character_replacement('ABAB',2)==4"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define odd_even_list_reorder(lst:list[int])->list[int] reorder nodes by odd indices then even indices (1-indexed positions).","tests":["assert odd_even_list_reorder([1,2,3,4,5])==[1,3,5,2,4]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define palindrome_linked_list(lst:list[int])->bool check if list is palindrome in O(1) extra space (operate on Python list by indices).","tests":["assert palindrome_linked_list([1,2,2,1])"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define reorder_list_in_place(lst:list[int])->list[int] reorder as L0->Ln->L1->Ln-1... (operate on list).","tests":["assert reorder_list_in_place([1,2,3,4])==[1,4,2,3]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define binary_tree_seats_max_sum(root:tuple|None)->int maximum sum of non-adjacent nodes (House Robber III variant).","tests":["t=(4,(1,(2,None,None),(3,None,None)),(5,(4,None,None),(1,None,None))); assert isinstance(binary_tree_seats_max_sum(t),int)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define minimum_genetic_mutation(start:str,end:str,bank:list[str])->int steps between gene sequences (A,C,G,T), -1 if impossible.","tests":["assert minimum_genetic_mutation('AACCGGTT','AACCGGTA',['AACCGGTA'])==1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define sum_of_unique(nums:list[int])->int returning sum of elements that occur exactly once.","tests":["assert sum_of_unique([1,2,3,2])==4"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define longest_consecutive(nums:list[int])->int length of the longest consecutive elements sequence (O(n) expected).","tests":["assert longest_consecutive([100,4,200,1,3,2])==4"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define product_except_self(nums:list[int])->list[int] without using division, O(n).","tests":["assert product_except_self([1,2,3,4])==[24,12,8,6]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define rotate_left(a:list[int],k:int)->list[int] rotating left by k (k may exceed len).","tests":["assert rotate_left([1,2,3,4,5],2)==[3,4,5,1,2]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define find_peak_element(nums:list[int])->int returning any index i with nums[i] strictly greater than neighbors (endpoints considered -inf outside).","tests":["assert find_peak_element([1,2,1]) in (1,)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_subarray_len(target:int,nums:list[int])->int minimal length of a contiguous subarray with sum >= target, or 0.","tests":["assert min_subarray_len(7,[2,3,1,2,4,3])==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define find_kth_positive_missing(arr:list[int],k:int)->int for strictly increasing positive arr.","tests":["assert find_kth_positive_missing([2,3,4,7,11],5)==9"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define can_place_flowers(flowerbed:list[int],n:int)->bool (no adjacent flowers).","tests":["assert can_place_flowers([1,0,0,0,1],1) and not can_place_flowers([1,0,0,0,1],2)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define is_happy(n:int)->bool (sum of squares cycle reaches 1).","tests":["assert is_happy(19) and not is_happy(2)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define title_to_number(col:str)->int converting Excel column title to number.","tests":["assert title_to_number('AB')==28"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define number_to_title(n:int)->str inverse of Excel column number to title (n>=1).","tests":["assert number_to_title(705)=='AAC'"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define add_binary(a:str,b:str)->str add two binary strings (no int conversion for whole string).","tests":["assert add_binary('1010','1011')=='10101'"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define reverse_only_letters(s:str)->str reversing letters only, keep others in place.","tests":["assert reverse_only_letters('a-bC-dEf-ghIj')=='j-Ih-gfE-dCba'"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define valid_palindrome_k(s:str,k:int)->bool if string can be palindrome after removing at most k chars.","tests":["assert valid_palindrome_k('abcdeca',2) and not valid_palindrome_k('abcdef',1)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define longest_palindromic_prefix(s:str)->int length of the longest prefix which is a palindrome.","tests":["assert longest_palindromic_prefix('levelup')==5"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_window_distinct_k(s:str,k:int)->str shortest substring containing at least k distinct characters ('' if impossible).","tests":["assert min_window_distinct_k('aaabbbcdef',3) in {'abbbc','bbcde','cdef'}"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define group_by_anagram_key(words:list[str])->dict[str,list[str]] mapping sorted-key to words (order within lists not important).","tests":["d=group_by_anagram_key(['eat','tea','tan','ate','nat','bat']); assert set(map(tuple,map(sorted,d.values())))=={('ate','eat','tea'),('nat','tan'),('bat',)}"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define is_subsequence_dp(s:str,t:str)->bool using DP (not two pointers).","tests":["assert is_subsequence_dp('ace','abcde') and not is_subsequence_dp('aec','abcde')"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define remove_adjacent_k(s:str,k:int)->str repeatedly remove groups of k equal adjacent characters until none.","tests":["assert remove_adjacent_k('deeedbbcccbdaa',3)=='aa'"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define decode_string_k(s:str)->str decode patterns like '3[a2[c]]' using stack.","tests":["assert decode_string_k('3[a2[c]]')=='accaccacc'"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define int_to_base(n:int,b:int)->str for -10^9<=n<=10^9 and 2<=b<=36; digits 0-9a-z, include '-' for negatives.","tests":["assert int_to_base(-31,16)=='-1f'"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define base_to_int(s:str,b:int)->int inverse of int_to_base for valid inputs.","tests":["assert base_to_int('-1f',16)==-31"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define count_bits_up_to(n:int)->list[int] where ans[i]=number of 1 bits in i for i=0..n.","tests":["assert count_bits_up_to(5)==[0,1,1,2,1,2]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define reverse_bits_32(x:int)->int reversing bits of 32-bit unsigned integer.","tests":["assert reverse_bits_32(0b00000010100101000001111010011100)==0b00111001011110000010100101000000"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define hamming_distance(a:int,b:int)->int.","tests":["assert hamming_distance(1,4)==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define single_number_triplet(nums:list[int])->int where every element appears thrice except one appears once (return that one).","tests":["assert single_number_triplet([2,2,3,2])==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define majority_element_n3(nums:list[int])->list[int] elements appearing more than floor(n/3) times.","tests":["assert set(majority_element_n3([3,2,3]))=={3}"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define three_sum_unique(nums:list[int])->list[list[int]] all unique triplets summing to zero (order of triplets not important).","tests":["res=three_sum_unique([-1,0,1,2,-1,-4]); assert sorted(map(tuple,sorted([sorted(t) for t in res])))==[(-1,-1,2),(-1,0,1)]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define four_sum(nums:list[int],target:int)->list[list[int]] unique quadruplets sum to target (order not important).","tests":["ans=four_sum([1,0,-1,0,-2,2],0); assert sorted(map(tuple,[sorted(x) for x in ans]))==[(-2,-1,1,2),(-2,0,0,2),(-1,0,0,1)]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define next_permutation_inplace(a:list[int])->list[int] rearrange into next lexicographically greater permutation or smallest if not possible.","tests":["assert next_permutation_inplace([1,2,3])==[1,3,2] and next_permutation_inplace([3,2,1])==[1,2,3]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define count_smaller_circular(nums:list[int])->list[int] count of smaller elements to the right in circular sense (wrap once).","tests":["assert count_smaller_circular([1,2,1])==[0,1,0]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define find_duplicate_number(nums:list[int])->int using Floyd cycle (array of n+1 with values 1..n).","tests":["assert find_duplicate_number([1,3,4,2,2])==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define first_missing_positive(nums:list[int])->int O(n) time and O(1) extra space.","tests":["assert first_missing_positive([3,4,-1,1])==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define spiral_fill(n:int)->list[list[int]] fill nÃn with 1..n^2 in spiral order.","tests":["assert spiral_fill(3)==[[1,2,3],[8,9,4],[7,6,5]]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define game_of_life_step(board:list[list[int]])->list[list[int]] compute next state (Conway's Game of Life).","tests":["assert game_of_life_step([[0,1,0],[0,0,1],[1,1,1],[0,0,0]])==[[0,0,0],[1,0,1],[0,1,1],[0,1,0]]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define matrix_block_sum(mat:list[list[int]],k:int)->list[list[int]] using prefix sums.","tests":["assert matrix_block_sum([[1,2,3],[4,5,6],[7,8,9]],1)==[[12,21,16],[27,45,33],[24,39,28]]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define boolean_matrix_propagate(mat:list[list[int]])->list[list[int]] if a cell is 1, set its row and column to 1 (do in-place allowed).","tests":["assert boolean_matrix_propagate([[0,0,0],[0,1,0],[0,0,0]])==[[0,1,0],[1,1,1],[0,1,0]]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define kth_smallest_sorted_matrix(mat:list[list[int]],k:int)->int for row&col sorted matrix (use binary search).","tests":["assert kth_smallest_sorted_matrix([[1,5,9],[10,11,13],[12,13,15]],8)==13"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define rotate_grid_layers(grid:list[list[int]],k:int)->list[list[int]] rotate each layer by k positions.","tests":["assert rotate_grid_layers([[40,10],[30,20]],1)==[[30,40],[20,10]]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define word_search_exists(board:list[list[str]],word:str)->bool path of adjacent (4-dir) cells without reuse forms word.","tests":["assert word_search_exists([['A','B','C','E'],['S','F','C','S'],['A','D','E','E']],'ABCCED')"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define shortest_path_with_elimination(grid:list[list[int]],k:int)->int shortest path from (0,0) to (n-1,m-1) where up to k obstacles can be eliminated (4-dir BFS).","tests":["assert shortest_path_with_elimination([[0,1,1],[1,1,0],[1,1,0]],1)==6"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define open_lock(deadends:list[str],target:str)->int minimum turns to reach target from '0000' avoiding deadends (bidirectional BFS okay), -1 if impossible.","tests":["assert open_lock(['0201','0101','0102','1212','2002'],'0202')==6"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define oranges_rotting(grid:list[list[int]])->int minutes until all oranges rot, -1 if impossible.","tests":["assert oranges_rotting([[2,1,1],[1,1,0],[0,1,1]])==4"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_knight_moves(x:int,y:int)->int on infinite board starting (0,0).","tests":["assert min_knight_moves(5,5)==4"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define sliding_puzzle_2x3(board:list[list[int]])->int min moves to reach [[1,2,3],[4,5,0]] using 0 swap (BFS), -1 if impossible.","tests":["assert sliding_puzzle_2x3([[1,2,3],[4,0,5]])==1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_domino_rotations(A:list[int],B:list[int])->int minimal rotations to make all values in A or in B equal, or -1.","tests":["assert min_domino_rotations([2,1,2,4,2,2],[5,2,6,2,3,2])==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define graph_is_bipartite(adj:list[list[int]])->bool for undirected graph adjacency list.","tests":["assert graph_is_bipartite([[1,3],[0,2],[1,3],[0,2]]) and not graph_is_bipartite([[1,2,3],[0,2],[0,1,3],[0,2]])"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define course_schedule_can_finish(n:int,prereq:list[tuple[int,int]])->bool (detect cycle).","tests":["assert course_schedule_can_finish(2,[(1,0)]) and not course_schedule_can_finish(2,[(1,0),(0,1)])"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_height_shelves(books:list[tuple[int,int]],shelf_width:int)->int arrange books in order minimizing total height (DP).","tests":["assert min_height_shelves([(1,1),(2,3),(2,3),(1,1),(1,1),(1,1),(1,2)],4)==6"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define erase_and_earn(nums:list[int])->int (house robber on values).","tests":["assert erase_and_earn([3,4,2])==6"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define stock_with_cooldown(prices:list[int])->int max profit with any transactions and cooldown one day after sell.","tests":["assert stock_with_cooldown([1,2,3,0,2])==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define max_profit_with_fee(prices:list[int],fee:int)->int unlimited transactions with fee per trade.","tests":["assert max_profit_with_fee([1,3,2,8,4,9],2)==8"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define num_decodings(s:str)->int (1-26 mapping, no '*').","tests":["assert num_decodings('226')==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define count_binary_substrings(s:str)->int number of substrings with equal consecutive 0s and 1s grouped.","tests":["assert count_binary_substrings('00110011')==6"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_remove_to_make_valid_all_braces(s:str)->str for (),{},[] remove min chars to valid string (any valid output).","tests":["res=min_remove_to_make_valid_all_braces('a({b]c)'); assert all(p in '(){}[]' or p.isalpha() for p in res) and not any(x in res for x in [')(','](',']{','}[','}{','})','{)'])"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define shortest_palindrome_by_prefix_add(s:str)->str add minimal characters to front to make palindrome (KMP trick allowed).","tests":["assert shortest_palindrome_by_prefix_add('aacecaaa')=='aacecaaa' and shortest_palindrome_by_prefix_add('abcd')=='dcbabcd'"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define kmp_prefix_function(s:str)->list[int] standard pi array.","tests":["assert kmp_prefix_function('ababc')==[0,0,1,2,0]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define z_function(s:str)->list[int] standard Z array.","tests":["assert z_function('aaaaa')==[0,4,3,2,1] or z_function('aaaaa')==[5,4,3,2,1]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define rabin_karp_find_all(text:str,pat:str)->list[int] start indices of matches (allow collisions handled).","tests":["assert rabin_karp_find_all('aaaaa','aa')==[0,1,2,3]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_cut_palindrome_partition(s:str)->int minimal cuts to partition into palindromes.","tests":["assert min_cut_palindrome_partition('aab')==1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define strange_dictionary_order(words:list[str])->bool whether words are sorted according to an unknown but consistent order (decide if possible).","tests":["assert strange_dictionary_order(['aa','ab','b'])"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define shortest_completing_word(license:str,words:list[str])->str shortest word containing all letters of license (ignore non-letters, case-insensitive).","tests":["assert shortest_completing_word('1s3 PSt',['step','steps','stripe','stepple'])=='steps'"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define reformat_phone(s:str)->str group digits into blocks of 3, last block 2-2 if needed (LeetCode style).","tests":["assert reformat_phone('1-23 45 6')=='123-456'"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define calendar_can_attend(meetings:list[tuple[int,int]])->bool no overlapping intervals.","tests":["assert calendar_can_attend([(0,30),(5,10),(15,20)])==False and calendar_can_attend([(7,10),(2,4)])==True"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define count_pairs_divisible_by_60(time:list[int])->int pairs with sum divisible by 60.","tests":["assert count_pairs_divisible_by_60([30,20,150,100,40])==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define subarray_sum_equals_k(nums:list[int],k:int)->int count subarrays with sum k.","tests":["assert subarray_sum_equals_k([1,1,1],2)==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define num_subarray_product_less_than_k(nums:list[int],k:int)->int.","tests":["assert num_subarray_product_less_than_k([10,5,2,6],100)==8"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define find_unsorted_subarray(nums:list[int])->int length of shortest subarray which if sorted makes the whole array sorted.","tests":["assert find_unsorted_subarray([2,6,4,8,10,9,15])==5"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_operations_reducing_x(nums:list[int],x:int)->int remove from ends to reduce sum by x; return minimal operations or -1.","tests":["assert min_operations_reducing_x([1,1,4,2,3],5)==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define daily_temperatures_wait(days:list[int])->list[int] wait days until warmer temperature.","tests":["assert daily_temperatures_wait([73,74,75,71,69,72,76,73])==[1,1,4,2,1,1,0,0]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define next_greater_from_right(nums:list[int])->list[int] next greater element to right (or -1).","tests":["assert next_greater_from_right([2,1,2,4,3])==[4,2,4,-1,-1]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define car_pooling_possible(trips:list[tuple[int,int,int]],capacity:int)->bool each trip is (passengers, start, end).","tests":["assert car_pooling_possible([(2,1,5),(3,3,7)],4)==False and car_pooling_possible([(2,1,5),(3,3,7)],5)==True"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_refuel_stops_greedy(target:int,start:int,stations:list[tuple[int,int]])->int greedy with max-heap.","tests":["assert min_refuel_stops_greedy(100,10,[(10,60),(20,30),(30,30),(60,40)])==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_cost_climbing_stairs(cost:list[int])->int.","tests":["assert min_cost_climbing_stairs([10,15,20])==15"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define num_ways_stairs(n:int,steps:list[int])->int number of ways to reach step n using allowed steps (order matters).","tests":["assert num_ways_stairs(4,[1,2])==5"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define coin_change_combinations(amount:int,coins:list[int])->int number of combinations (order doesn't matter).","tests":["assert coin_change_combinations(5,[1,2,5])==4"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_path_sum_grid(grid:list[list[int]])->int only move right/down.","tests":["assert min_path_sum_grid([[1,3,1],[1,5,1],[4,2,1]])==7"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define unique_paths_with_obstacles(grid:list[list[int]])->int.","tests":["assert unique_paths_with_obstacles([[0,0,0],[0,1,0],[0,0,0]])==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define edit_distance_ops(a:str,b:str)->int classic Levenshtein distance.","tests":["assert edit_distance_ops('horse','ros')==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define lcs_length(a:str,b:str)->int longest common subsequence length.","tests":["assert lcs_length('abcde','ace')==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_deletions_to_unique_freq(s:str)->int minimum deletions to make character frequencies unique.","tests":["assert min_deletions_to_unique_freq('aaabbbcc')==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define reorganize_string_no_adjacent(s:str)->str rearrange so no two adjacent equal, or '' if impossible (any valid).","tests":["res=reorganize_string_no_adjacent('aab'); assert res in ('aba','baa','aab','aba'.replace('a','a')) and (len(res)==0 or all(res[i]!=res[i+1] for i in range(len(res)-1)))"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define longest_dup_substring(s:str)->str return one of the longest duplicated substrings (empty if none).","tests":["assert longest_dup_substring('banana') in ('ana','nan')"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_subsequence_diff(nums:list[int])->int minimal absolute difference between sums of two subsets (meet-in-the-middle).","tests":["assert min_subsequence_diff([3,9,7,3])==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define target_sum_ways(nums:list[int],S:int)->int count ways to assign +/- to reach S.","tests":["assert target_sum_ways([1,1,1,1,1],3)==5"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define find_target_sum_subarray_nonneg(nums:list[int],target:int)->tuple[int,int]|None for nonnegative nums (two-pointer) returning (l,r) inclusive or None.","tests":["assert find_target_sum_subarray_nonneg([1,2,3,7,5],12)==(1,3)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define can_partition_k_subsets(nums:list[int],k:int)->bool all subsets equal sum.","tests":["assert can_partition_k_subsets([4,3,2,3,5,2,1],4)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define minimize_array_value(nums:list[int])->int minimal possible maximum after allowed prefix-redistribution operation.","tests":["assert minimize_array_value([3,7,1,6])==5"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define longest_nice_substring(s:str)->str substring where for every letter both cases appear (return any longest).","tests":["assert longest_nice_substring('YazaAay') in ('aAa','azaA')"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define maximum_unique_subarray_sum(nums:list[int])->int sum of a subarray with all unique elements maximized.","tests":["assert maximum_unique_subarray_sum([4,2,4,5,6])==17"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_operations_to_reduce_x_to_zero(nums:list[int],x:int)->int remove from ends to sum x, minimal operations or -1.","tests":["assert min_operations_to_reduce_x_to_zero([1,1,4,2,3],5)==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define split_array_same_average(nums:list[int])->bool whether can split into two non-empty parts with same average.","tests":["assert split_array_same_average([1,2,3,4,5,6,7,8])"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define count_pairs_with_sum(nums:list[int],target:int)->int number of pairs with sum==target (each element used once at most).","tests":["assert count_pairs_with_sum([1,1,2,2,3,3],4)==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_trailing_zeros_path(grid:list[list[int]])->int minimal trailing zeros in product along path from (0,0) to (n-1,n-1) moving right/down.","tests":["assert min_trailing_zeros_path([[1,2,3],[0,1,2],[7,0,1]])==0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define shortest_subarray_at_least_k_circular(nums:list[int],k:int)->int length of shortest subarray (circular array) with sum>=k, or -1.","tests":["assert shortest_subarray_at_least_k_circular([1,2,3,4],6)==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_swaps_group_ones(arr:list[int])->int minimal swaps to group all 1s in array (circular).","tests":["assert min_swaps_group_ones([1,0,1,0,1])==1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define lexicographically_smallest_string_after_ops(s:str,a:int,b:int)->str rotate by b and add a to odd indices (mod 10) any times; return smallest string (LeetCode 1625 style).","tests":["assert lexicographically_smallest_string_after_ops('5525',9,2)=='2050'"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_flips_mono_decr(s:str)->int minimal flips to make string monotone decreasing (all 1s then 0s).","tests":["assert min_flips_mono_decr('00110')==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_adjacent_swaps_to_group_k_ones(nums:list[int],k:int)->int minimal adjacent swaps to group k ones together.","tests":["assert min_adjacent_swaps_to_group_k_ones([1,0,0,1,0,1],2)==1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define kth_smallest_prime_fraction(arr:list[int],k:int)->tuple[int,int] arr is primes 1..; find k-th smallest fraction arr[i]/arr[j], i<j.","tests":["assert kth_smallest_prime_fraction([1,2,3,5],3)==(2,5)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define find_right_interval(intervals:list[tuple[int,int]])->list[int] for each interval find index of interval with smallest start >= current end (or -1).","tests":["assert find_right_interval([(1,2)])==[-1] and find_right_interval([(3,4),(2,3),(1,2)])==[-1,0,1]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define smallest_range_covering_k_lists(nums:list[list[int]])->tuple[int,int] smallest range including at least one element from each list.","tests":["assert smallest_range_covering_k_lists([[4,10,15,24,26],[0,9,12,20],[5,18,22,30]])==(20,24)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_meeting_rooms_sweep(intervals:list[tuple[int,int]])->int using sweepline.","tests":["assert min_meeting_rooms_sweep([(0,30),(5,10),(15,20)])==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define schedule_max_profit(jobs:list[tuple[int,int,int]])->int weighted interval scheduling with (start,end,profit).","tests":["assert schedule_max_profit([(1,2,50),(3,5,20),(6,19,100),(2,100,200)])==250"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_arrows_to_burst_balloons(points:list[tuple[int,int]])->int greedy by end.","tests":["assert min_arrows_to_burst_balloons([(10,16),(2,8),(1,6),(7,12)])==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define longest_increasing_path_matrix(mat:list[list[int]])->int (4-dir).","tests":["assert longest_increasing_path_matrix([[9,9,4],[6,6,8],[2,1,1]])==4"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_falling_path_sum_no_adjacent_col(mat:list[list[int]])->int choose one element per row; adjacent rows cannot use same column.","tests":["assert min_falling_path_sum_no_adjacent_col([[1,2,3],[1,2,3],[3,3,1]])==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_cost_paint_houses(costs:list[list[int]])->int adjacent houses cannot share color.","tests":["assert min_cost_paint_houses([[17,2,17],[16,16,5],[14,3,19]])==10"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define evaluate_boolean_expr(expr:str)->bool with operators !,&,| and parentheses where & and | are binary with precedence ! > & > |.","tests":["assert evaluate_boolean_expr('!(f)|t&f')==True"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define simplify_path_unix(path:str)->str canonical UNIX path.","tests":["assert simplify_path_unix('/a/./b/../../c/')=='/c'"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define fraction_to_decimal(numerator:int,denominator:int)->str represent fraction with repeating part in parentheses.","tests":["assert fraction_to_decimal(4,333)=='0.(012)'"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define my_atoi64(s:str)->int parse 64-bit signed integer with spaces, sign, digits; clamp to [-2^63,2^63-1].","tests":["assert my_atoi64('   -42')==-42 and my_atoi64('91283472332')==9223372036854775807"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define longest_valid_parentheses_stack(s:str)->int using stack approach.","tests":["assert longest_valid_parentheses_stack(')()())')==4"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define regular_expression_match(s:str,p:str)->bool with . and * (classic DP).","tests":["assert regular_expression_match('aab','c*a*b') and not regular_expression_match('mississippi','mis*is*p*.')"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define wildcard_match(s:str,p:str)->bool where '?' matches single and '*' matches any sequence.","tests":["assert wildcard_match('adceb','*a*b') and not wildcard_match('aa','a')"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define restore_ip_addresses(s:str)->list[str] valid IPs from digits (order irrelevant).","tests":["assert set(restore_ip_addresses('25525511135'))=={'255.255.11.135','255.255.111.35'}"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define word_break_min_spaces(s:str,dict_words:set[str])->int minimum spaces inserted to segment s (INF=10**9 if impossible).","tests":["assert word_break_min_spaces('leetcode',{'leet','code'})==1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define evaluate_rpn(tokens:list[str])->int Reverse Polish Notation with +,-,*,/ trunc toward zero.","tests":["assert evaluate_rpn(['4','13','5','/','+'])==6"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define fraction_addition(expression:str)->str compute result of adding/subtracting fractions like '-1/2+1/2+1/3'.","tests":["assert fraction_addition('-1/2+1/2+1/3')=='1/3'"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define simplify_fraction(a:int,b:int)->tuple[int,int] reduce to lowest terms with positive denominator.","tests":["assert simplify_fraction(-2,4)==(-1,2)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define gcd_extended(a:int,b:int)->tuple[int,int,int] returning (g,x,y) with ax+by=g.","tests":["g,x,y=gcd_extended(30,12); assert g==6 and 30*x+12*y==6"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define mod_inverse_prime(a:int,p:int)->int modular inverse modulo prime p (a not multiple of p).","tests":["assert (3*mod_inverse_prime(3,1_000_000_007))%1_000_000_007==1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define pow_mod_fast(a:int,b:int,m:int)->int fast exponentiation.","tests":["assert pow_mod_fast(5,117,19)==1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define count_primes_upto(n:int)->int using sieve of Eratosthenes.","tests":["assert count_primes_upto(10)==4"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define segmented_sieve_count(L:int,R:int)->int count primes in [L,R] for R-L<=1e6.","tests":["assert segmented_sieve_count(10,20)==4"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define phi_totient(n:int)->int Euler's totient function by prime factorization.","tests":["assert phi_totient(36)==12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define count_divisors(n:int)->int using prime factorization.","tests":["assert count_divisors(360)==24"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define integer_sqrt_floor(n:int)->int floor(sqrt(n)) using binary search / Newton.","tests":["assert integer_sqrt_floor(17)==4"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define is_power_of_two(n:int)->bool (n>0).","tests":["assert is_power_of_two(16) and not is_power_of_two(18)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define chinese_remainder_pair(a1:int,m1:int,a2:int,m2:int)->tuple[int,int]|None combine two congruences (may not be coprime).","tests":["assert chinese_remainder_pair(2,3,3,5)==(8,15)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define pow_tower_mod(a:list[int],m:int)->int compute a[0]^(a[1]^(a[2]^...)) mod m using Euler reduction where possible.","tests":["assert pow_tower_mod([3,3,3],100)==87"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define gaussian_elimination_mod(A:list[list[int]],b:list[int],p:int)->tuple[bool,list[int]] solve linear system mod prime p; return (True,sol) or (False,[]).","tests":["ok,x=gaussian_elimination_mod([[2,3],[4,9]],[6,15],101); assert ok and (2*x[0]+3*x[1])%101==6"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define determinant_mod(A:list[list[int]],mod:int)->int for square matrix via Gaussian elimination modulo mod.","tests":["assert determinant_mod([[1,2],[3,4]],1_000_000_007)==1_000_000_005"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define convex_hull(points:list[tuple[int,int]])->list[tuple[int,int]] monotone chain returning hull in CCW starting from lowest-leftmost.","tests":["assert set(convex_hull([(0,0),(1,1),(1,0),(0,1)]))=={(0,0),(1,0),(1,1),(0,1)}"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define polygon_area(points:list[tuple[float,float]])->float signed area (positive for CCW).","tests":["assert abs(polygon_area([(0,0),(4,0),(4,3),(0,3)])-12.0)<1e-9"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define segments_intersect(p1,p2,q1,q2)->bool for closed segments in 2D integer coords.","tests":["assert segments_intersect((0,0),(2,2),(0,2),(2,0)) and not segments_intersect((0,0),(1,0),(2,0),(3,0))"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define line_circle_intersections(cx:float,cy:float,r:float,x1:float,y1:float,x2:float,y2:float)->int return number of intersection points (0,1,2) for infinite line.","tests":["assert line_circle_intersections(0,0,1,-2,0,2,0)==2 and line_circle_intersections(0,0,1,0,1,0,1)==1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define rectangle_intersection_area(a:tuple[int,int,int,int],b:tuple[int,int,int,int])->int area of intersection of two axis-aligned rectangles (x1,y1,x2,y2).","tests":["assert rectangle_intersection_area((0,0,2,2),(1,1,3,3))==1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define point_in_polygon(poly:list[tuple[float,float]],p:tuple[float,float])->bool (ray casting; boundary True).","tests":["assert point_in_polygon([(0,0),(4,0),(4,4),(0,4)],(2,2)) and not point_in_polygon([(0,0),(4,0),(4,4),(0,4)],(5,5))"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define closest_pair_dc(points:list[tuple[float,float]])->float O(n log n) divide-and-conquer minimal distance.","tests":["assert abs(closest_pair_dc([(0,0),(3,4),(3,3),(5,5)])-1.0)<1e-9"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define half_plane_intersection_area(halfplanes:list[tuple[float,float,float]])->float area of intersection polygon for half-planes ax+by<=c (bounded simple cases).","tests":["area=half_plane_intersection_area([(1,0,1),(-1,0,0),(0,1,1),(0,-1,0)]); assert abs(area-1.0)<1e-6"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define segment_tree_range_add_range_min(n:int,ops:list[tuple[str,int,int,int]])->list[int] support 'add',l,r,val and 'min',l,r inclusive; return results for queries.","tests":["ops=[('add',0,2,5),('add',1,3,-2),('min',0,3,0)]; assert segment_tree_range_add_range_min(4,ops)==[3]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define fenwick_kth(bit:list[int],k:int)->int find smallest index with prefix sum >= k (1-indexed BIT provided).","tests":["def build(a): bit=[0]*(len(a)+1); \n  \n  def add(i,v):\n   while i<len(bit): bit[i]+=v; i+=i&-i\n  \n  for i,v in enumerate(a,1): add(i,v)\n  return bit\n; bit=build([1,3,2,1]); assert fenwick_kth(bit,4)==2 and fenwick_kth(bit,7)==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define persistent_array_build(arr:list[int])->tuple and persistent_array_set(root,idx:int,val:int)->tuple plus persistent_array_get(root,idx:int)->int using path-copying segment tree; verify basic ops.","tests":["root=persistent_array_build([1,2,3]); v1=persistent_array_set(root,1,9); assert persistent_array_get(root,1)==2 and persistent_array_get(v1,1)==9"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define disjoint_sparse_table(arr:list[int],op:str)->object building for idempotent ops 'min' or 'max'; also dst_query(obj,l,r)->int inclusive.","tests":["st=disjoint_sparse_table([1,5,2,4,3],'min'); assert dst_query(st,1,3)==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define rolling_median_stream(nums:list[int])->list[float] like running median but output median after each prefix.","tests":["assert rolling_median_stream([2,1,5,7,2,0,5])==[2.0,1.5,2.0,3.5,2.0,2.0,2.0]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define bitset_max_subset_xor(nums:list[int])->int compute maximum XOR subset value using linear basis.","tests":["assert bitset_max_subset_xor([2,4,5])==7"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define count_subarrays_with_xor(nums:list[int],k:int)->int.","tests":["assert count_subarrays_with_xor([4,2,2,6,4],6)==4"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define max_len_equal_0_1(arr:list[int])->int longest subarray with equal 0s and 1s.","tests":["assert max_len_equal_0_1([0,0,1,0,0,0,1,1])==6"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define shortest_unsorted_sublist_to_sort(words:list[str])->tuple[int,int] return minimal range to sort lexicographically; if already sorted return (-1,-1).","tests":["assert shortest_unsorted_sublist_to_sort(['a','b','c','b','d'])==(2,3)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define kth_permutation(n:int,k:int)->str k-th permutation (1-indexed) of 1..n.","tests":["assert kth_permutation(3,3)=='213'"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define count_valid_parentheses_len(n:int)->int number of valid parentheses strings of length 2n (Catalan).","tests":["assert count_valid_parentheses_len(3)==5"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define derangements(n:int,mod:int=10**9+7)->int count of permutations with no fixed points.","tests":["assert derangements(4)==9"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define bell_numbers(n:int,mod:int=10**9+7)->int count of set partitions.","tests":["assert bell_numbers(3)%1_000_000_007==5"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define catalan_mod(n:int,mod:int=10**9+7)->int nth Catalan number.","tests":["assert catalan_mod(4)==14"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define count_surjective_functions(n:int,k:int,mod:int=10**9+7)->int from n elements onto k elements (n>=k).","tests":["assert count_surjective_functions(3,2)==6"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define multinomial_mod(counts:list[int],mod:int)->int compute (sum counts)!/prod(counts!) mod mod.","tests":["assert multinomial_mod([2,1,1],1_000_000_007)==12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define ways_to_color_graph_path(n:int,m:int,mod:int=10**9+7)->int proper colorings of path graph with m colors.","tests":["assert ways_to_color_graph_path(3,3)==12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define count_matchings_path(n:int,mod:int=10**9+7)->int number of matchings in path graph with n nodes (Fibonacci).","tests":["assert count_matchings_path(5)==8"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define trie_insert_search(words:list[str],queries:list[str])->list[bool] build trie then check existence of queries.","tests":["assert trie_insert_search(['app','apple','bat'],['app','ap','bat'])==[True,False,True]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define word_dictionary_regex supporting addWord(word) and search(pattern) where '.' matches any char (Trie+DFS). Return nothing; only implement class.","tests":["wd=word_dictionary_regex(); wd.addWord('bad'); wd.addWord('dad'); wd.addWord('mad'); assert not wd.search('pad') and wd.search('bad') and wd.search('.ad') and wd.search('b..')"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define suffix_array_karkkainen_sanders(s:str)->list[int] SA-IS / DC3 acceptable for correctness on small inputs.","tests":["sa=suffix_array_karkkainen_sanders('banana'); assert sa==[5,3,1,0,4,2]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define kasai_lcp(s:str,sa:list[int])->list[int] LCP array for suffix array sa.","tests":["s='banana'; sa=[5,3,1,0,4,2]; assert kasai_lcp(s,sa)==[1,3,0,0,2,0]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_rotation_index(s:str)->int index of lexicographically minimal rotation (Booth).","tests":["assert min_rotation_index('bba')==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define longest_common_prefix_array(arr:list[str])->str longest common prefix among strings.","tests":["assert longest_common_prefix_array(['flower','flow','flight'])=='fl'"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define minimal_window_all_chars_multiset(s:str,t:str)->str minimal window containing multiset t (Unicode allowed).","tests":["assert minimal_window_all_chars_multiset('ï¼¡ï¼¤ï¼¯ï¼¢ï¼¥ï¼£ï¼¯ï¼¤ï¼¥ï¼¢ï¼¡ï¼®ï¼£','ï¼¡ï¼¢ï¼£')=='ï¼¢ï¼¡ï¼®ï¼£'"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define count_subseq_equal_t(S:str,T:str)->int count distinct subsequences equal to T (DP).","tests":["assert count_subseq_equal_t('babgbag','bag')==5"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define longest_chain_pair(pairs:list[tuple[int,int]])->int longest chain where (a,b) can be followed by (c,d) if b<c.","tests":["assert longest_chain_pair([(-10,-8),(-6,-4),(-5,0),(1,3),(3,4)])==4"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define find_min_arrow_shots(points:list[tuple[int,int]])->int minimal arrows to burst all balloons (same as earlier but different name).","tests":["assert find_min_arrow_shots([(1,2),(2,3),(3,4),(4,5)])==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_increment_for_unique(nums:list[int])->int minimal increments to make all numbers unique.","tests":["assert min_increment_for_unique([3,2,1,2,1,7])==6"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define max_chunks_to_sorted(arr:list[int])->int where arr is a permutation of 0..n-1.","tests":["assert max_chunks_to_sorted([1,0,2,3,4])==4"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define max_chunks_to_sorted_ii(arr:list[int])->int for general array with duplicates.","tests":["assert max_chunks_to_sorted_ii([2,1,3,4,4])==4"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define find_min_difference_time(points:list[str])->int minimal minutes difference between any two times in HH:MM (wrap).","tests":["assert find_min_difference_time(['23:59','00:00'])==1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define calendar_min_arrows_for_intervals(intervals:list[tuple[int,int]])->int minimal points to hit all intervals (classic stabbing number).","tests":["assert calendar_min_arrows_for_intervals([(10,16),(2,8),(1,6),(7,12)])==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_set_size_to_reduce_by_half(arr:list[int])->int minimal number of unique elements to remove so that array size at least halves.","tests":["assert min_set_size_to_reduce_by_half([3,3,3,3,5,5,5,2,2,7])==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_sum_of_lengths_two_subarrays(arr:list[int],target:int)->int minimal sum of lengths of two non-overlapping subarrays summing to target or -1.","tests":["assert min_sum_of_lengths_two_subarrays([3,2,2,4,3],3)==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define longest_wpi(hours:list[int])->int longest well-performing interval where tiring>non-tiring (hour>8).","tests":["assert longest_wpi([9,9,6,0,6,6,9])==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define shortest_path_visiting_all_nodes(graph:list[list[int]])->int BFS on state (node,mask).","tests":["assert shortest_path_visiting_all_nodes([[1,2,3],[0],[0],[0]])==4"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define snakes_and_ladders_min_moves(board:list[list[int]])->int minimal moves from 1 to n^2, -1 if impossible.","tests":["assert snakes_and_ladders_min_moves([[-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1],[-1,35,-1,-1,13,-1],[-1,-1,-1,-1,-1,-1],[-1,15,-1,-1,-1,-1]])==4"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_cost_to_move_chips(chips:list[int])->int cost 0 to move by 2, cost 1 to move by 1.","tests":["assert min_cost_to_move_chips([1,2,3])==1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define smallest_subsequence_distinct(s:str)->str lexicographically smallest subsequence of distinct characters.","tests":["assert smallest_subsequence_distinct('cbacdcbc')=='acdb'"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define partition_into_three_equal_sum(nums:list[int])->bool whether can split into three contiguous parts equal sum.","tests":["assert partition_into_three_equal_sum([0,2,1,-6,6,-7,9,1,2,0,1])"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define find_duplicate_files(paths:list[str])->list[list[str]] group filepaths with identical content; input like 'root/a 1.txt(abcd) 2.txt(efgh)'.","tests":["res=find_duplicate_files(['root/a 1.txt(abcd) 2.txt(efgh)','root/c 3.txt(abcd)','root/c/d 4.txt(efgh)','root 4.txt(efgh)']); gs=sorted([sorted(g) for g in res]); assert any('root/a/1.txt' in g and 'root/c/3.txt' in g for g in gs)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define find_redundant_connection(edges:list[tuple[int,int]])->tuple[int,int] extra edge causing cycle in undirected graph.","tests":["assert find_redundant_connection([(1,2),(1,3),(2,3)])==(2,3)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_cost_connect_points(points:list[tuple[int,int]])->int MST with Manhattan distance.","tests":["assert min_cost_connect_points([(0,0),(2,2),(3,10),(5,2),(7,0)])==20"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define smallest_string_with_swaps(s:str,pairs:list[tuple[int,int]])->str lexicographically smallest by swapping within connected components.","tests":["assert smallest_string_with_swaps('dcab',[(0,3),(1,2)])=='bacd'"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define garden_no_adj(N:int,paths:list[tuple[int,int]])->list[int] assign 1..4 so adjacent gardens differ.","tests":["res=garden_no_adj(3,[(1,2),(2,3),(3,1)]); assert all(1<=x<=4 for x in res) and len(set(res))>=2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define critical_connections(n:int,edges:list[tuple[int,int]])->list[tuple[int,int]] find bridges (order irrelevant).","tests":["assert set(map(tuple,critical_connections(4,[(0,1),(1,2),(2,0),(1,3)])))=={(1,3)}"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define count_provinces(isConnected:list[list[int]])->int number of connected components in adjacency matrix.","tests":["assert count_provinces([[1,1,0],[1,1,0],[0,0,1]])==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define topo_sort_kahn(n:int,edges:list[tuple[int,int]])->list[int]|None return one topological order or None if cycle.","tests":["assert topo_sort_kahn(4,[(0,1),(0,2),(1,3),(2,3)]) in ([0,1,2,3],[0,2,1,3])"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_swaps_couples(row:list[int])->int minimal swaps for couples to sit together.","tests":["assert min_swaps_couples([0,2,1,3])==1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define jump_game_can_reach(nums:list[int])->bool can reach last index.","tests":["assert jump_game_can_reach([2,3,1,1,4]) and not jump_game_can_reach([3,2,1,0,4])"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define jump_game_min_steps(nums:list[int])->int minimal jumps to last index.","tests":["assert jump_game_min_steps([2,3,0,1,4])==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define frog_jump(stones:list[int])->bool can cross with jumps k-1,k,k+1 (start jump 1).","tests":["assert frog_jump([0,1,3,5,6,8,12,17])"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define minimize_string_value(s:str)->str remove exactly one character to get lexicographically smallest string.","tests":["assert minimize_string_value('abcda')=='abca'"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define smallest_subsequence_distinct_k(s:str,k:int)->str lexicographically smallest subsequence of length k with distinct letters if possible (assume enough distinct).","tests":["assert smallest_subsequence_distinct_k('bcabc',2)=='ab'"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define max_non_overlapping_subarrays(nums:list[int],target:int)->int maximum number of non-overlapping subarrays summing to target.","tests":["assert max_non_overlapping_subarrays([1,1,1,1,1],2)==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_k_bit_flips(A:list[int],K:int)->int minimum subarray flips to make all 1s; return -1 if impossible.","tests":["assert min_k_bit_flips([0,1,0],1)==2 and min_k_bit_flips([0,0,0,1,0,1,1,0],3)==-1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define prison_after_n_days(cells:list[int],N:int)->list[int] with state cycles (8 cells only).","tests":["assert prison_after_n_days([0,1,0,1,1,0,0,1],7)==[0,0,1,1,0,0,0,0]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define num_magic_squares(grid:list[list[int]])->int count 3x3 magic squares (1..9) subgrids.","tests":["assert num_magic_squares([[4,3,8,4],[9,5,1,9],[2,7,6,2]])==1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define sliding_window_max(nums:list[int],k:int)->list[int].","tests":["assert sliding_window_max([1,3,-1,-3,5,3,6,7],3)==[3,3,5,5,6,7]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define longest_repeating_char_replacement(s:str,k:int)->int longest substring after at most k replacements to make all same letters.","tests":["assert longest_repeating_char_replacement('AABABBA',1)==4"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define count_good_substrings_of_size_three(s:str)->int counting substrings of length 3 with all distinct chars.","tests":["assert count_good_substrings_of_size_three('xyzzaz')==1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define add_to_array_form(num:list[int],k:int)->list[int] big integer addition.","tests":["assert add_to_array_form([1,2,0,0],34)==[1,2,3,4]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define find_error_nums(nums:list[int])->tuple[int,int] find duplicate and missing in 1..n.","tests":["assert find_error_nums([1,2,2,4])==(2,3)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define sets_intersection_sorted(a:list[int],b:list[int])->list[int] intersect two sorted unique lists.","tests":["assert sets_intersection_sorted([1,2,4,5],[2,3,5])==[2,5]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define merge_k_sorted_lists(lists:list[list[int]])->list[int] using heap.","tests":["assert merge_k_sorted_lists([[1,4,5],[1,3,4],[2,6]])==[1,1,2,3,4,4,5,6]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define smallest_range_after_k(nums:list[int],k:int)->int minimize max-min after adding/subtracting k to each element.","tests":["assert smallest_range_after_k([1],0)==0 and smallest_range_after_k([0,10],2)==6"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define relative_sort_array(arr1:list[int],arr2:list[int])->list[int] relative order by arr2 then ascending.","tests":["assert relative_sort_array([2,3,1,3,2,4,6,7,9,2,19],[2,1,4,3,9,6])==[2,2,2,1,4,3,3,9,6,7,19]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define interval_intersection(A:list[tuple[int,int]],B:list[tuple[int,int]])->list[tuple[int,int]] intersections of two lists of disjoint intervals.","tests":["assert interval_intersection([(0,2),(5,10),(13,23),(24,25)],[(1,5),(8,12),(15,24),(25,26)])==[(1,2),(5,5),(8,10),(15,23),(24,24),(25,25)]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define longest_common_subarray(a:list[int],b:list[int])->int length of longest common subarray (DP or rolling hash).","tests":["assert longest_common_subarray([1,2,3,2,1],[3,2,1,4,7])==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_deletions_to_make_string_balanced(s:str)->int where 'a' before 'b' only; minimal deletions.","tests":["assert min_deletions_to_make_string_balanced('aababbab')==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define remove_k_digits(num:str,k:int)->str minimal number after removing k digits (no leading zeros unless zero).","tests":["assert remove_k_digits('1432219',3)=='1219'"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define monotone_increasing_digits(n:int)->int largest number <=n with digits monotonically increasing.","tests":["assert monotone_increasing_digits(332)==299"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_moves_to_make_array_equal(nums:list[int])->int moves increment n-1 elements by 1 equals decrement 1; find minimal moves.","tests":["assert min_moves_to_make_array_equal([1,2,3])==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_deletions_avoid_adjacent_equal(s:str)->int minimum deletions so that no two adjacent characters are equal.","tests":["assert min_deletions_avoid_adjacent_equal('aab')==1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define find_median_from_data_stream class MedianFinder with addNum and findMedian.","tests":["mf=MedianFinder(); [mf.addNum(x) for x in [1,2]]; assert mf.findMedian()==1.5; mf.addNum(3); assert mf.findMedian()==2.0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define Twitter class with postTweet(userId,tweetId), getNewsFeed(userId)->list[int], follow(followerId,followeeId), unfollow(followerId,followeeId) (LeetCode style 355).","tests":["tw=Twitter(); tw.postTweet(1,5); assert tw.getNewsFeed(1)==[5]; tw.follow(1,2); tw.postTweet(2,6); assert tw.getNewsFeed(1)==[6,5]; tw.unfollow(1,2); assert tw.getNewsFeed(1)==[5]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define RandomizedSet with insert(val), remove(val), getRandom(seed:int|None=None) all O(1) expected.","tests":["rs=RandomizedSet(); assert rs.insert(1); assert not rs.remove(2); assert rs.insert(2); r=rs.getRandom(7); assert r in {1,2}; assert rs.remove(1); assert not rs.insert(2)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define Trie with insert(word), search(word)->bool, startsWith(prefix)->bool.","tests":["tr=Trie(); tr.insert('apple'); assert tr.search('apple') and not tr.search('app') and tr.startsWith('app'); tr.insert('app'); assert tr.search('app')"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define LRUCache2(capacity:int) with get/put like classic LRU.","tests":["c=LRUCache2(2); c.put(1,1); c.put(2,2); assert c.get(1)==1; c.put(3,3); assert c.get(2)==-1; c.put(4,4); assert c.get(1)==-1 and c.get(3)==3 and c.get(4)==4"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define MinStack supporting push, pop, top, getMin in O(1).","tests":["s=MinStack(); s.push(-2); s.push(0); s.push(-3); assert s.getMin()==-3; s.pop(); assert s.top()==0 and s.getMin()==-2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define SnapshotArray(length:int) with set(index,val), snap()->int returns id, get(index,id)->int (LeetCode 1146).","tests":["sa=SnapshotArray(3); sa.set(0,5); id=sa.snap(); sa.set(0,6); assert sa.get(0,id)==5"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define SummaryRanges to track disjoint intervals: addNum(val), getIntervals()->list[list[int]] (LeetCode 352).","tests":["sr=SummaryRanges(); [sr.addNum(x) for x in [1,3,7,2,6]]; assert sr.getIntervals()==[[1,3],[6,7]]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define FileSystem with createPath(path:str,value:int)->bool and get(path:str)->int (-1 if not exists) (LeetCode 1166).","tests":["fs=FileSystem(); assert fs.createPath('/a',1); assert fs.get('/a')==1; assert not fs.createPath('/a/b',2) if False else True or True"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define MyCalendarTwo with book(start,end)->bool allowing double booking but no triple overlaps.","tests":["mc=MyCalendarTwo(); assert mc.book(10,20); assert mc.book(50,60); assert mc.book(10,40); assert not mc.book(5,15); assert mc.book(5,10); assert mc.book(25,55)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define random_pick_weighted(weights:list[int],seed:int|None=None)->int pick index with probability proportional to weight.","tests":["from collections import Counter; c=Counter(random_pick_weighted([1,3,2],seed=i) for i in range(100)); assert sum(c.values())==100 and set(c)<={0,1,2}"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define union_find_smallest_string_with_swaps(s:str,pairs:list[tuple[int,int]])->str same as earlier via DSU.","tests":["assert union_find_smallest_string_with_swaps('cba',[(0,1),(1,2)])=='abc'"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_cost_to_make_valid_path(grid:list[list[int]])->int direction costs (1..4) minimal cost to get from (0,0) to (n-1,m-1) (0-1 BFS).","tests":["assert min_cost_to_make_valid_path([[1,1,3],[3,2,2],[1,1,4]])==0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define swim_in_rising_water_union_find(grid:list[list[int]])->int using union-find to find minimal time.","tests":["assert swim_in_rising_water_union_find([[0,2],[1,3]])==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_push_box(grid:list[str])->int minimum pushes to move box to target (Sokoban-like) (small grids).","tests":["assert isinstance(min_push_box(['#S#','#.B','#.T','#.#']),int)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define pacific_atlantic_cells(heights:list[list[int]])->list[tuple[int,int]] return coords flowing to both oceans (order irrelevant).","tests":["res=pacific_atlantic_cells([[1,2],[4,3]]); assert set(res)=={(0,1),(1,0),(1,1)}"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define shortest_bridge(grid:list[list[int]])->int minimal flips to connect two islands.","tests":["assert shortest_bridge([[0,1],[1,0]])==1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_cost_to_connect_sticks(sticks:list[int])->int always combine two smallest; cost is sum; return total cost.","tests":["assert min_cost_to_connect_sticks([2,4,3])==14"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define nth_ugly_number(n:int)->int where ugly numbers have prime factors 2,3,5.","tests":["assert nth_ugly_number(10)==12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define super_ugly_number(n:int,primes:list[int])->int nth number whose prime factors from primes.","tests":["assert super_ugly_number(12,[2,7,13,19])==32"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_remove_to_make_valid_angle_brackets(s:str)->str for '<' and '>' characters only; remove minimum to make valid like parentheses.","tests":["assert min_remove_to_make_valid_angle_brackets('<><>>') in ('<><>','<><>')"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define count_subarrays_with_median(nums:list[int],k:int)->int count subarrays where median equals k.","tests":["assert count_subarrays_with_median([3,2,1,4,5],4)==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define number_of_weak_characters(props:list[tuple[int,int]])->int count weak characters (attack, defense) dominated by others.","tests":["assert number_of_weak_characters([(5,5),(6,3),(3,6)])==0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_operations_to_make_equal(a:int,b:int)->int minimal ops using *2 or -1 to change a to b (BFS/Dijkstra small bounds).","tests":["assert min_operations_to_make_equal(4,6)==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define shortest_subarray_sum_at_least_k(nums:list[int],k:int)->int using deque (non-circular).","tests":["assert shortest_subarray_sum_at_least_k([2,-1,2],3)==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define sum_of_square_numbers(c:int)->bool if c can be written as a^2+b^2 (a,b>=0).","tests":["assert sum_of_square_numbers(5) and not sum_of_square_numbers(3)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define reaching_points(sx:int,sy:int,tx:int,ty:int)->bool using reverse modulo trick.","tests":["assert reaching_points(1,1,3,5) and not reaching_points(1,1,2,2)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_operations_binary_to_alternate(s:str)->int minimal flips to make alternating starting with either '0' or '1'.","tests":["assert min_operations_binary_to_alternate('0100')==1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define shortest_common_superstring_len(strings:list[str])->int length of SCS via DP on overlaps.","tests":["assert shortest_common_superstring_len(['ab','bc','cd'])==4"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define closest_divisors(n:int)->tuple[int,int] two integers whose product is n+1 or n+2 and are closest.","tests":["assert closest_divisors(8) in {(3,3),(2,5)}"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define reorder_log_files(logs:list[str])->list[str] reorder letter-logs before digit-logs; letter-logs by content then id.","tests":["assert reorder_log_files(['dig1 8 1 5 1','let1 art can','dig2 3 6','let2 own kit dig','let3 art zero'])==['let1 art can','let3 art zero','let2 own kit dig','dig1 8 1 5 1','dig2 3 6']"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define relative_ranks(scores:list[int])->list[str] with medal names for top 3.","tests":["assert relative_ranks([5,4,3,2,1])==['Gold Medal','Silver Medal','Bronze Medal','4','5']"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define reconstruct_itinerary(tickets:list[tuple[str,str]])->list[str] lexicographically smallest Eulerian path starting 'JFK'.","tests":["assert reconstruct_itinerary([('MUC','LHR'),('JFK','MUC'),('SFO','SJC'),('LHR','SFO')])==['JFK','MUC','LHR','SFO','SJC']"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define calc_equation(equations:list[tuple[str,str]],values:list[float],queries:list[tuple[str,str]])->list[float] evaluate division queries.","tests":["res=calc_equation([('a','b'),('b','c')],[2.0,3.0],[('a','c'),('b','a'),('a','e'),('a','a'),('x','x')]); assert [round(x,5) if x!=-1.0 else -1.0 for x in res]==[6.0,0.5,-1.0,1.0,-1.0]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define predict_party_victory(senate:str)->str 'Radiant' or 'Dire'.","tests":["assert predict_party_victory('RD')=='Radiant' and predict_party_victory('RDD')=='Dire'"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define num_islands(grid:list[list[str]])->int count islands of '1' (DFS/BFS).","tests":["assert num_islands([['1','1','0','0','0'],['1','1','0','0','0'],['0','0','1','0','0'],['0','0','0','1','1']])==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define flood_fill(image:list[list[int]],sr:int,sc:int,newColor:int)->list[list[int]].","tests":["assert flood_fill([[1,1,1],[1,1,0],[1,0,1]],1,1,2)==[[2,2,2],[2,2,0],[2,0,1]]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_time_to_finish_trips(time:list[int],totalTrips:int)->int binary search minimal time.","tests":["assert min_time_to_finish_trips([1,2,3],5)==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define two_city_sched_cost(costs:list[tuple[int,int]])->int minimal cost to fly N people to two cities.","tests":["assert two_city_sched_cost([(10,20),(30,200),(400,50),(30,20)])==110"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define eliminate_maximum(dist:list[int],speed:list[int])->int maximum monsters eliminated before any reaches city.","tests":["assert eliminate_maximum([1,3,4],[1,1,1])==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define maximum_units(boxTypes:list[tuple[int,int]],truckSize:int)->int greedy by units.","tests":["assert maximum_units([(1,3),(2,2),(3,1)],4)==8"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define last_stone_weight_ii(stones:list[int])->int minimal possible weight by partition.","tests":["assert last_stone_weight_ii([2,7,4,1,8,1])==1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_score_triangulation(values:list[int])->int polygon triangulation DP.","tests":["assert min_score_triangulation([1,3,1,4,1,5])==13"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define count_numbers_with_unique_digits(n:int)->int count in [0,10^n).","tests":["assert count_numbers_with_unique_digits(2)==91"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define find_derangement(n:int,mod:int=10**9+7)->int compute !n modulo mod.","tests":["assert find_derangement(3)==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define sort_colors(nums:list[int])->list[int] Dutch National Flag sort of 0,1,2.","tests":["assert sort_colors([2,0,2,1,1,0])==[0,1,1,2,2,2]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define relative_sort_ints_by_bitcount(arr:list[int])->list[int] sort by bitcount then by value.","tests":["assert relative_sort_ints_by_bitcount([0,1,2,3,4,5,6,7,8])==[0,1,2,4,8,3,5,6,7]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define find_original_array_from_doubled(changed:list[int])->list[int] reconstruct original or [].","tests":["assert find_original_array_from_doubled([1,3,4,2,6,8])==[1,3,4]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define max_width_ramp(nums:list[int])->int max j-i with nums[i]<=nums[j].","tests":["assert max_width_ramp([6,0,8,2,1,5])==4"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define find_best_value(arr:list[int],target:int)->int choose a value to cap elements so sum closest to target (smaller if tie).","tests":["assert find_best_value([4,9,3],10)==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define k_weakest_rows(mat:list[list[int]],k:int)->list[int] rows by soldiers then index.","tests":["assert k_weakest_rows([[1,1,0,0,0],[1,1,1,1,0],[1,0,0,0,0],[1,1,0,0,0],[1,1,1,1,1]],3)==[2,0,3]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define relative_order_array(arr:list[int],ref:list[int])->list[int] custom order by ref then increasing for rest.","tests":["assert relative_order_array([2,3,1,3,2,4,6,7,9,2,19],[2,1,4,3,9,6])==[2,2,2,1,4,3,3,9,6,7,19]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define matrix_reshape(mat:list[list[int]],r:int,c:int)->list[list[int]] or original if impossible.","tests":["assert matrix_reshape([[1,2],[3,4]],1,4)==[[1,2,3,4]]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define search_matrix_sorted_rows_cols(mat:list[list[int]],target:int)->bool search in sorted rows and columns.","tests":["assert search_matrix_sorted_rows_cols([[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]],5) and not search_matrix_sorted_rows_cols([[1,4],[2,5]],20)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_area_rect(points:list[tuple[int,int]])->int area of smallest axis-aligned rectangle; 0 if none.","tests":["assert min_area_rect([(1,1),(1,3),(3,1),(3,3),(2,2)])==4"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define longest_arith_subseq_diff(nums:list[int],diff:int)->int longest arithmetic subsequence with fixed difference.","tests":["assert longest_arith_subseq_diff([1,5,7,8,5,3,4,2,1],-2)==4"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define maximum_sum_circular_subarray(nums:list[int])->int.","tests":["assert maximum_sum_circular_subarray([5,-3,5])==10"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define shortest_path_all_keys(grid:list[str])->int collect keys a-f with doors A-F; -1 if impossible.","tests":["assert shortest_path_all_keys(['@.a..','###.#','b.A.B'])==8"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_steps_make_anagram(a:str,b:str)->int min deletions to make anagrams.","tests":["assert min_steps_make_anagram('bab','aba')==0 and min_steps_make_anagram('leetcode','coats')==7"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define longest_string_with_k_distinct(s:str,k:int)->int length of longest substring with at most k distinct characters.","tests":["assert longest_string_with_k_distinct('eceba',2)==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define find_minimum_in_rotated_sorted(nums:list[int])->int with unique elements (binary search).","tests":["assert find_minimum_in_rotated_sorted([3,4,5,1,2])==1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define find_minimum_in_rotated_with_duplicates(nums:list[int])->int (may have duplicates).","tests":["assert find_minimum_in_rotated_with_duplicates([2,2,2,0,1])==0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define search_rotated_array(nums:list[int],target:int)->int return index or -1 (unique elements).","tests":["assert search_rotated_array([4,5,6,7,0,1,2],0)==4"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define search_rotated_with_duplicates(nums:list[int],target:int)->bool.","tests":["assert search_rotated_with_duplicates([2,5,6,0,0,1,2],0) and not search_rotated_with_duplicates([1,1,3,1],0)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define find_kth_largest(nums:list[int],k:int)->int using quickselect.","tests":["assert find_kth_largest([3,2,3,1,2,4,5,5,6],4)==4"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define smallest_range_i(nums:list[int],k:int)->int minimize max-min after adding/subtracting at most k to each element.","tests":["assert smallest_range_i([1,3,6],3)==0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define len_longest_fib_subseq(arr:list[int])->int length of longest Fibonacci-like subsequence (>=3) else 0.","tests":["assert len_longest_fib_subseq([1,3,7,11,12,14,18])==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define get_permutation(n:int,k:int)->str k-th permutation (1-indexed) of [1..n] (duplicate of earlier concept, different name).","tests":["assert get_permutation(4,9)=='2314'"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define find_max_form(strs:list[str],m:int,n:int)->int max number of strings with at most m zeros and n ones.","tests":["assert find_max_form(['10','0001','111001','1','0'],5,3)==4"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define combination_sum_unique(candidates:list[int],target:int)->list[list[int]] each number used once (order of combos not important).","tests":["res=combination_sum_unique([10,1,2,7,6,1,5],8); assert set(map(tuple,[tuple(x) for x in [sorted(c) for c in res]]))=={(1,1,6),(1,2,5),(1,7),(2,6)}"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define combination_sum_k(nums:list[int],k:int,target:int)->list[list[int]] choose k distinct numbers sum to target (nums are 1..9 typical).","tests":["assert set(map(tuple,combination_sum_k(list(range(1,10)),3,7)))=={(1,2,4)}"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define count_bits_1_to_n(n:int)->int total number of set bits in all numbers from 1..n.","tests":["assert count_bits_1_to_n(7)==12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define trailing_zeroes_factorial(n:int)->int count trailing zeroes in n!.","tests":["assert trailing_zeroes_factorial(100)==24"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define nth_digit(n:int)->int the nth digit in the infinite integer sequence 123456789101112... (1-indexed).","tests":["assert nth_digit(11)==0 and nth_digit(12)==1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define add_strings(a:str,b:str)->str add non-negative integers as strings.","tests":["assert add_strings('456','77')=='533'"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define multiply_strings(num1:str,num2:str)->str multiply big integers.","tests":["assert multiply_strings('123','456')=='56088'"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define compare_version(v1:str,v2:str)->int return -1,0,1.","tests":["assert compare_version('1.01','1.001')==0 and compare_version('1.0','1.0.0')==0 and compare_version('0.1','1.1')==-1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define string_to_integer_atoi(s:str)->int like atoi with bounds 32-bit signed.","tests":["assert string_to_integer_atoi('4193 with words')==4193 and string_to_integer_atoi('-91283472332')==-2147483648"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define is_valid_number(s:str)->bool numeric validation with optional sign, decimal, exponent.","tests":["assert is_valid_number('0') and is_valid_number(' 0.1 ') and not is_valid_number('abc') and is_valid_number('2e10')"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define find_repeated_dna_sequences(s:str)->list[str] all 10-letter-long sequences that occur more than once.","tests":["assert set(find_repeated_dna_sequences('AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT'))=={'AAAAACCCCC','CCCCCAAAAA'}"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define longest_common_prefix_pair(a:str,b:str)->str longest common prefix of two strings.","tests":["assert longest_common_prefix_pair('interspecies','interstellar')=='inters'"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_window_distinct_all(s:str)->str smallest substring containing all distinct characters present in s.","tests":["assert min_window_distinct_all('aabcbcdbca')=='dbca'"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define rearrange_string_k_distance(s:str,k:int)->str rearrange so same chars at least k apart, or '' if impossible (any valid).","tests":["res=rearrange_string_k_distance('aabbcc',3); assert res=='' or all(res[i]!=res[i+3] for i in range(len(res)-3))"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_pal_partition_changes(s:str,k:int)->int minimal changes to partition into k palindromes (like earlier variant).","tests":["assert min_pal_partition_changes('abc',2)==1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define count_ways_to_split_string_k_equal_sum(s:str,k:int)->int number of ways to split binary string into k parts with equal number of 1s (mod 10**9+7).","tests":["assert count_ways_to_split_string_k_equal_sum('10101',3)==4"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define split_binary_string_equal_01(s:str)->int number of splits into substrings with equal 0s and 1s (greedy).","tests":["assert split_binary_string_equal_01('0100110101')==4"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_time_difference(times:list[str])->int minimum minutes between time points in 24-hr cycle.","tests":["assert min_time_difference(['00:00','23:59','00:00'])==0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define total_hamming_distance(nums:list[int])->int sum of Hamming distances among all pairs.","tests":["assert total_hamming_distance([4,14,2])==6"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define poor_pigs(buckets:int,minutesToDie:int,minutesToTest:int)->int minimal pigs needed.","tests":["assert poor_pigs(1000,15,60)==5"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define bulb_switch(n:int)->int bulbs on after toggling rounds 1..n.","tests":["assert bulb_switch(9999)==99"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define reach_number(target:int)->int minimal steps to reach target on number line summing 1..k with +/- signs.","tests":["assert reach_number(3)==2 and reach_number(2)==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define smallest_repunit_div_by_k(k:int)->int length of smallest N of all 1s divisible by k, or -1 if impossible.","tests":["assert smallest_repunit_div_by_k(3)==3 and smallest_repunit_div_by_k(2)==-1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define maximum_swap(num:int)->int swap two digits at most once to get maximum.","tests":["assert maximum_swap(2736)==7236"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define num_steps_to_reduce_binary_string(s:str)->int steps to reduce to 1: if even divide by 2 else add 1.","tests":["assert num_steps_to_reduce_binary_string('1101')==6"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define count_nice_pairs(nums:list[int])->int count pairs (i<j) with nums[i]+rev(nums[j])==nums[j]+rev(nums[i]) modulo 1e9+7.","tests":["assert count_nice_pairs([42,11,1,97])==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define count_subarrays_fixed_bounds(nums:list[int],minK:int,maxK:int)->int number of subarrays with min==minK and max==maxK.","tests":["assert count_subarrays_fixed_bounds([1,3,5,2,7,5],1,5)==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define find_min_arrow_shots_circular(points:list[tuple[int,int]],m:int)->int minimal arrows to hit intervals on circle of length m (small inputs).","tests":["assert isinstance(find_min_arrow_shots_circular([(1,3),(2,5)],10),int)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define graph_coloring_k(n:int,edges:list[tuple[int,int]],k:int)->bool whether graph is k-colorable (n<=12 via backtracking).","tests":["assert graph_coloring_k(3,[(0,1),(1,2),(0,2)],3) and not graph_coloring_k(3,[(0,1),(1,2),(0,2)],2)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define tsp_bitmask_path(dist:list[list[int]])->tuple[int,list[int]] minimal cost and path (start 0).","tests":["d=[[0,10,15,20],[10,0,35,25],[15,35,0,30],[20,25,30,0]]; c,p=tsp_bitmask_path(d); assert c==80 and p[0]==0 and len(p)==5 and p[0]==p[-1]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_cut_max_flow_segmentation(n:int,edges:list[tuple[int,int,int]])->tuple[int,set[int]] return maxflow and mincut reachable set from source 0 to sink n-1 (Dinic).","tests":["mf,S=min_cut_max_flow_segmentation(4,[(0,1,3),(0,2,2),(1,2,1),(1,3,2),(2,3,2)]); assert mf==4 and 0 in S and 3 not in S"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_path_cover_dag(n:int,edges:list[tuple[int,int]])->int minimum number of vertex-disjoint paths covering all vertices (transform to bipartite matching).","tests":["assert min_path_cover_dag(3,[(0,1),(1,2)])==1 and min_path_cover_dag(3,[])==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define max_matching_general_graph(n:int,edges:list[tuple[int,int]])->int Edmonds blossom (n<=30 small).","tests":["assert max_matching_general_graph(4,[(0,1),(1,2),(2,3),(3,0),(0,2)])==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_vertex_cover_tree(n:int,edges:list[tuple[int,int]])->int tree DP.","tests":["assert min_vertex_cover_tree(3,[(0,1),(1,2)])==1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define tree_dp_max_independent_set(n:int,edges:list[tuple[int,int]],values:list[int])->int weighted MIS on tree.","tests":["assert tree_dp_max_independent_set(5,[(0,1),(0,2),(1,3),(1,4)],[1,2,3,1,1])==5"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define centroid_decomposition_sizes(n:int,edges:list[tuple[int,int]])->list[int] return subtree sizes after removing centroid recursively (return sizes of components upon each centroid removal; order any).","tests":["res=centroid_decomposition_sizes(3,[(0,1),(1,2)]); assert sorted(res)==[1,1,3]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define rerooting_tree_max_depths(n:int,edges:list[tuple[int,int]])->list[int] for each node, maximum distance to any node.","tests":["assert rerooting_tree_max_depths(6,[(0,1),(0,2),(2,3),(2,4),(2,5)])==[2,3,2,3,3,3]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define tree_count_pairs_within_distance(n:int,edges:list[tuple[int,int]],k:int)->int count pairs with distance<=k using centroid decomposition (n<=2e4 small k).","tests":["assert isinstance(tree_count_pairs_within_distance(5,[(0,1),(1,2),(1,3),(3,4)],2),int)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define digit_dp_count_no_adjacent_equal(n:int)->int count numbers in [0..n] with no adjacent equal digits (base 10).","tests":["assert digit_dp_count_no_adjacent_equal(100)==91"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define digit_dp_count_divisible_by_k(n:int,k:int)->int count numbers in [0..n] with sum of digits divisible by k.","tests":["assert digit_dp_count_divisible_by_k(99,3)==67"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define count_valid_numbers_no_13(n:int)->int count numbers in [0..n] whose decimal representation doesn't contain substring '13'.","tests":["assert count_valid_numbers_no_13(150)==139"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define count_arrays_with_inversions(n:int,k:int,mod:int=10**9+7)->int number of permutations of 1..n with exactly k inversions.","tests":["assert count_arrays_with_inversions(3,1)==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define number_of_BST(n:int,mod:int=10**9+7)->int number of binary search trees (Catalan).","tests":["assert number_of_BST(3)==5"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_insertions_to_form_palindrome(s:str)->int minimal insertions to make palindrome.","tests":["assert min_insertions_to_form_palindrome('leetcode')==5"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define shortest_edit_script(a:str,b:str)->list[tuple[str,str]] produce minimal operations (I,D,S,M) to convert a->b (Levenshtein).","tests":["ops=shortest_edit_script('ab','yabd'); def apply(a,ops): i=0; out=[]; \n  \n  for t,ch in ops:\n   if t=='M': out.append(a[i]); i+=1\n   elif t=='S': out.append(ch); i+=1\n   elif t=='I': out.append(ch)\n   elif t=='D': i+=1\n  \n  return ''.join(out)\n; assert apply('ab',ops)=='yabd'"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define lps_kmp(s:str)->list[int] classic LPS array (alt name).","tests":["assert lps_kmp('ababaca')==[0,0,1,2,3,0,1]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define suffix_automaton_occurrences(s:str,pattern:str)->int count occurrences of pattern via SAM.","tests":["assert suffix_automaton_occurrences('aaaaa','aa')==4"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define kth_substring_lex(s:str,k:int)->str k-th substring in lexicographic order (1-indexed) using SAM/SA (n<=2000).","tests":["assert kth_substring_lex('ababa',3)=='aba'"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define minimal_unique_substrings_cover(s:str)->list[str] split s into minimal number of substrings so that each appears only once overall (greedy with last occurrence).","tests":["assert minimal_unique_substrings_cover('abac')==['aba','c'] or minimal_unique_substrings_cover('abac')==['ab','ac']"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_swaps_make_palindrome(s:str)->int minimal adjacent swaps to form palindrome, -1 if impossible.","tests":["assert min_swaps_make_palindrome('mamad')==3 and min_swaps_make_palindrome('asflkj')==-1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define longest_repeating_substring_len(s:str)->int via binary search + rolling hash.","tests":["assert longest_repeating_substring_len('abcd')==0 and longest_repeating_substring_len('aaaa')==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define compress_string_length_with_deletions(s:str,k:int)->int minimal compressed length (RLE) after deleting at most k chars (like 1531).","tests":["assert compress_string_length_with_deletions('aaabcccd',2)==4"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_palindrome_partition_cuts(s:str)->int minimal cuts to partition into palindromes.","tests":["assert min_palindrome_partition_cuts('aab')==1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define fenwick_range_update_point_query(n:int,ops:list[tuple[str,int,int,int]])->list[int] support add on [l,r] and point query; return results of 'get',i.","tests":["ops=[('add',1,3,2),('add',0,1,1),('get',2,0,0),('get',1,0,0)]; assert fenwick_range_update_point_query(5,ops)==[2,3]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define k_concat_max_subarray(arr:list[int],k:int)->int maximum subarray for array repeated k times (Kadane + prefix/suffix).","tests":["assert k_concat_max_subarray([1,-2,1],5)==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_cost_path_grid_with_turn_penalty(grid:list[list[int]],turn:int)->int cost of entering cells plus turn penalty when direction changes (4-dir).","tests":["assert isinstance(min_cost_path_grid_with_turn_penalty([[1,2],[3,4]],1),int)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define longest_path_matrix_move_once(mat:list[list[int]])->int longest path moving to strictly larger neighbor using each cell at most once (backtracking with memo; small n).","tests":["assert longest_path_matrix_move_once([[1,2],[3,4]])>=3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define grid_min_cost_with_teleports(grid:list[list[int]],teleports:dict[tuple[int,int],tuple[int,int]])->int move cost=cell value; teleport zero extra cost if on cell with teleport (Dijkstra).","tests":["g=[[1,1,1],[9,9,1],[1,1,1]]; tp={(0,0):(2,0)}; assert grid_min_cost_with_teleports(g,tp)<=5"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_total_manhattan_tree(points:list[tuple[int,int]])->int minimal total Manhattan distance to one point (1-median) choose grid point minimizing sum.","tests":["assert min_total_manhattan_tree([(0,0),(2,2),(3,1)])==min([abs(x-0)+abs(y-0)+abs(x-2)+abs(y-2)+abs(x-3)+abs(y-1) for x in range(4) for y in range(3)])"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_manhattan_spanning_tree(points:list[tuple[int,int]])->int heuristic exact for small n using Prim with Manhattan metric.","tests":["assert isinstance(min_manhattan_spanning_tree([(0,0),(2,2),(3,1),(5,1)]),int)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define k_center_problem(points:list[tuple[float,float]],k:int)->float 2-approx via greedy (farthest-first) returning covering radius.","tests":["assert k_center_problem([(0,0),(1,0),(0,1),(1,1)],2)<=1.0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define approximate_steiner_tree_mst(points:list[tuple[int,int]])->int MST length over points as 2-approximation of Euclidean Steiner tree (return MST length).","tests":["assert approximate_steiner_tree_mst([(0,0),(0,1),(1,0),(1,1)]) in (3,4)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_circle_cover_two(points:list[tuple[float,float]])->tuple[tuple[float,float],float] smallest circle covering points using randomized incremental (Welzl) (small n).","tests":["_,r=min_circle_cover_two([(0,0),(1,0),(0,1)]); assert abs(r- (2**0.5)/2)<1e-3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define rectangle_splitting_min_squares(a:int,b:int)->int minimal number of squares to cut rectangle aÃb (DP).","tests":["assert rectangle_splitting_min_squares(2,3)==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define coin_change_minimax(coins:list[int],target:int)->int minimal coins (BFS on residues small target).","tests":["assert coin_change_minimax([1,3,4],6)==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define subset_sum_exists(nums:list[int],target:int)->bool using bitset DP (sum up to 200000).","tests":["assert subset_sum_exists([3,34,4,12,5,2],9) and not subset_sum_exists([3,34,4,12,5,2],30)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define optimal_account_balancing(transactions:list[tuple[int,int,int]])->int minimal number of transactions to settle debts.","tests":["assert optimal_account_balancing([(0,1,10),(2,0,5)])==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define hand_of_straights(hand:list[int],groupSize:int)->bool whether can rearrange into groups of size groupSize consecutive numbers.","tests":["assert hand_of_straights([1,2,3,6,2,3,4,7,8],3) and not hand_of_straights([1,2,3,4,5],4)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define is_n_straight_hand(hand:list[int],groupSize:int)->bool variant using counts and greedy.","tests":["assert is_n_straight_hand([1,2,3,4,5,6],2)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define num_subseq_with_sum_at_most(nums:list[int],target:int)->int number of subsequences with min+max<=target modulo 1e9+7.","tests":["assert num_subseq_with_sum_at_most([3,5,6,7],9)==4"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define max_length_unique_concat(arr:list[str])->int maximum length by concatenating subsequence with all unique letters.","tests":["assert max_length_unique_concat(['un','iq','ue'])==4"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define max_xor_of_two_numbers(nums:list[int])->int using trie.","tests":["assert max_xor_of_two_numbers([3,10,5,25,2,8])==28"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define longest_nice_pair(nums:list[int])->int length of longest subarray where bitwise AND equals bitwise OR (all equal numbers).","tests":["assert longest_nice_pair([1,1,2,2,2,3])==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define split_array_into_fibonacci(s:str)->list[int] construct fibonacci-like sequence from string digits; empty if none.","tests":["assert split_array_into_fibonacci('123456579')==[123,456,579]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define decode_string_at_index(S:str,K:int)->str return the K-th letter in decoded string (without building).","tests":["assert decode_string_at_index('leet2code3',10)=='o'"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define confusing_number_ii(n:int)->int count confusing numbers <=n (rotate 0,1,6,8,9).","tests":["assert confusing_number_ii(20)==6"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_reorder_to_reach_zero(n:int,connections:list[tuple[int,int]])->int minimum edges to reverse so all nodes can reach 0.","tests":["assert min_reorder_to_reach_zero(6,[(0,1),(1,3),(2,3),(4,0),(4,5)])==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define maximum_detonation(bombs:list[tuple[int,int,int]])->int bomb chain reaction count (build graph).","tests":["assert maximum_detonation([(2,1,3),(6,1,4)])==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define shortest_path_with_portals(n:int,edges:list[tuple[int,int,int]],portals:list[tuple[int,int]])->int edges weighted; portals are zero-cost teleports between nodes (bidirectional).","tests":["assert shortest_path_with_portals(4,[(0,1,1),(1,2,1),(2,3,1)],[(0,2)])==1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define circular_array_loop(nums:list[int])->bool cyc with length >1 and same direction.","tests":["assert circular_array_loop([2,-1,1,2,2]) and not circular_array_loop([-1,2])"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define find_leaves_of_binary_tree(root:tuple|None)->list[list[int]] collect leaves by rounds (tree as tuples).","tests":["t=(1,(2,(4,None,None),(5,None,None)),(3,None,None)); assert find_leaves_of_binary_tree(t)==[[4,5,3],[2],[1]]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define path_sum_count(root:tuple|None,target:int)->int count paths that sum to target (downward).","tests":["t=(10,(5,(3,(3,None,None),(-2,None,None)),(2,None,(1,None,None))),( -3,None,(11,None,None))); assert path_sum_count(t,8)==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define serialize_deserialize_bst with preorder serialization (list) and deserialization to tuple; functions bst_serialize(root)->list and bst_deserialize(lst)->tuple|None.","tests":["t=(2,(1,None,None),(3,None,None)); data=bst_serialize(t); t2=bst_deserialize(data); assert bst_serialize(t2)==data"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define kth_smallest_in_bst(root:tuple|None,k:int)->int.","tests":["bst=(5,(3,(2,None,None),(4,None,None)),(6,None,None)); assert kth_smallest_in_bst(bst,3)==4"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define construct_maximum_binary_tree(nums:list[int])->tuple|None build tree as tuples (val,left,right).","tests":["t=construct_maximum_binary_tree([3,2,1,6,0,5]); assert t[0]==6 and t[1][0]==3 and t[2][0]==5"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define smallest_subtree_with_all_deepest(root:tuple|None)->tuple|None return subtree containing all deepest nodes (root of that subtree).","tests":["t=(3,(5,(6,None,None),(2,(7,None,None),(4,None,None))),(1,(0,None,None),(8,None,None))); r=smallest_subtree_with_all_deepest(t); assert r[0] in {2,5,1,3,7,4,6,0,8}"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define flatten_binary_tree_to_list(root:tuple|None)->list[int] preorder flatten (return list of values).","tests":["t=(1,(2,(3,None,None),(4,None,None)),(5,None,(6,None,None))); assert flatten_binary_tree_to_list(t)==[1,2,3,4,5,6]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define lowest_common_ancestor_bst(root:tuple|None,p:int,q:int)->int for BST.","tests":["t=(6,(2,(0,None,None),(4,(3,None,None),(5,None,None))),(8,(7,None,None),(9,None,None))); assert lowest_common_ancestor_bst(t,2,8)==6 and lowest_common_ancestor_bst(t,2,4)==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define time_needed_to_inform(n:int,headID:int,manager:list[int],informTime:list[int])->int total time to inform all employees.","tests":["assert time_needed_to_inform(6,2,[2,2,-1,2,2,2],[0,0,1,0,0,0])==1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define longest_string_path_in_file_system(input:str)->int length of longest absolute path to a file (\\n and \\t encoded).","tests":["assert longest_string_path_in_file_system('dir\\n\\tsubdir1\\n\\tsubdir2\\n\\t\\tfile.ext')==20"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define number_of_matching_subseq(s:str,words:list[str])->int count how many words are subsequences of s.","tests":["assert number_of_matching_subseq('abcde',['a','bb','acd','ace'])==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define partition_array_for_max_sum(arr:list[int],k:int)->int partition into groups up to length k; each group contributes max*len.","tests":["assert partition_array_for_max_sum([1,15,7,9,2,5,10],3)==84"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define max_sum_two_no_overlap(A:list[int],L:int,M:int)->int max sum of two non-overlapping subarrays of lengths L and M.","tests":["assert max_sum_two_no_overlap([0,6,5,2,2,5,1,9,4],1,2)==20"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define stone_game_iii(piles:list[int])->str return 'Alice' or 'Bob'.","tests":["assert stone_game_iii([1,2,3,7])=='Bob' and stone_game_iii([1,2,3,-9])=='Alice'"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define soup_servings_probability(n:int)->float probability soup A empties first; for large n return ~1 (use threshold).","tests":["assert abs(soup_servings_probability(50)-0.625)<1e-3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_difficulty_job_schedule(jobDifficulty:list[int],d:int)->int split tasks into d days to minimize sum of max per day.","tests":["assert min_difficulty_job_schedule([6,5,4,3,2,1],2)==7"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_skips_for_travel(dist:list[int],speed:int,hoursBefore:int)->int minimum rest skips to arrive on time (DP).","tests":["assert min_skips_for_travel([1,3,2],4,2)==1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define cherry_pickup_two_robots(grid:list[list[int]])->int two robots from top row to bottom collecting max cherries (col independent moves per row).","tests":["assert cherry_pickup_two_robots([[3,1,1],[2,5,1],[1,5,5],[2,1,1]])==24"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define count_palindromic_subseq_len5(s:str)->int count distinct palindromic subsequences of length 5 (small alphabets).","tests":["assert isinstance(count_palindromic_subseq_len5('aaaaa'),int) and count_palindromic_subseq_len5('aaaaa')>=1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define maximum_candies_per_child(candies:list[int],k:int)->int maximum candies each child can get by splitting piles (binary search).","tests":["assert maximum_candies_per_child([5,8,6],3)==5//1 and maximum_candies_per_child([5,8,6],4)==4"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define paint_fence(n:int,k:int)->int ways to paint fence posts with no more than 2 adjacent same colors.","tests":["assert paint_fence(3,2)==6"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define count_vowel_permutation(n:int)->int number of strings of length n where vowels follow rules (a->e, i; e->a,i; i->a,e,o,u; o->i,u; u->a) modulo 1e9+7.","tests":["assert count_vowel_permutation(2)==10"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define num_ways_to_stay_in_place(steps:int,arrLen:int)->int number ways to stay at index 0 after steps with moves -1,0,1 (mod 1e9+7).","tests":["assert num_ways_to_stay_in_place(3,2)==4"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_number_operations_to_target(arr:list[int])->int minimal increments on subarrays to build arr from zeros.","tests":["assert min_number_operations_to_target([1,2,3,2,1])==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define max_profit_job_scheduling(startTime:list[int],endTime:list[int],profit:list[int])->int weighted interval scheduling (LeetCode 1235).","tests":["assert max_profit_job_scheduling([1,2,3,3],[3,4,5,6],[50,10,40,70])==120"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define schedule_minimum_machines(jobs:list[tuple[int,int]])->int minimal machines to handle all jobs (interval coloring equals max overlap).","tests":["assert schedule_minimum_machines([(0,30),(5,10),(15,20)])==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define shortest_path_alternating_colors(n:int,redEdges:list[tuple[int,int]],blueEdges:list[tuple[int,int]])->list[int].","tests":["assert shortest_path_alternating_colors(3,[(0,1),(1,2)],[])==[0,1,2]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define frog_position_probability(n:int,edges:list[tuple[int,int]],t:int,target:int)->float probability frog is at target after t seconds (each step random to neighbors not visited).","tests":["p=frog_position_probability(7,[(1,2),(1,3),(1,7),(2,4),(2,6),(3,5)],2,4); assert abs(p-0.1666666667)<1e-6"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define num_buses_to_destination(routes:list[list[int]],source:int,target:int)->int minimal buses to ride from source to target.","tests":["assert num_buses_to_destination([[1,2,7],[3,6,7]],1,6)==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define minimum_hamming_distance_with_swaps(source:list[int],target:list[int],allowedSwaps:list[tuple[int,int]])->int.","tests":["assert minimum_hamming_distance_with_swaps([1,2,3,4],[2,1,4,5],[(0,1),(2,3)])==1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define remove_stones_max(stones:list[tuple[int,int]])->int maximum stones removed where a stone can be removed if another shares row or column.","tests":["assert remove_stones_max([(0,0),(0,1),(1,0),(1,2),(2,1),(2,2)])==5"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_operations_make_array_beautiful(nums:list[int])->int minimal changes to make adjacent unequal and counts of 2 frequent values dominate (LC 2170 style).","tests":["assert isinstance(min_operations_make_array_beautiful([3,1,3,2,4,3]),int)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define maximum_subsequence_score(nums1:list[int],nums2:list[int],k:int)->int pick k indices maximizing sum(nums1[i])*min(nums2[i]).","tests":["assert maximum_subsequence_score([1,3,3,2],[2,1,3,4],3)==12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define minimum_size_substrings_to_make_anagram(s:str,t:str)->int minimal total length of substrings to replace in s to make an anagram of t (greedy counts).","tests":["assert minimum_size_substrings_to_make_anagram('xxyyzz','xxyyzz')==0 and minimum_size_substrings_to_make_anagram('abc','bca')==0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define max_consecutive_answers(answerKey:str,k:int)->int max consecutive same after flipping at most k.","tests":["assert max_consecutive_answers('TTFF',2)==4"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define longest_common_subsequence_k_sequences(arr:list[list[int]])->int LCS length across k sequences (k<=3 small DP).","tests":["assert longest_common_subsequence_k_sequences([[1,2,3],[2,1,3],[1,3,5]])==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define median_of_two_sorted_arrays(a:list[int],b:list[int])->float O(log(min(n,m))).","tests":["assert median_of_two_sorted_arrays([1,3],[2])==2.0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define build_kmp_automaton(pattern:str)->list[dict[str,int]] transitions for lowercase letters.","tests":["auto=build_kmp_automaton('aba'); assert len(auto)==3 and all('a' in st and 'b' in st for st in auto)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define approximate_set_cover(universe:set[int],subsets:list[set[int]])->list[int] greedy returns indices of chosen subsets (ln n approximation).","tests":["u={1,2,3,4}; S=[{1,2},{2,3},{3,4},{4,1}]; idx=approximate_set_cover(u,S); covered=set().union(*[S[i] for i in idx]); assert covered==u"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define max_flow_dinic(n:int,edges:list[tuple[int,int,int]])->int and then min_cut(n,edges)->tuple[int,set[int]] return maxflow and reachable set from source 0 after maxflow to sink n-1.","tests":["mf,S=min_cut(4,[(0,1,3),(0,2,2),(1,2,1),(1,3,2),(2,3,2)]); assert mf==4 and 0 in S and 3 not in S"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define hopcroft_karp_matching(left:int,adj:list[list[int]])->int maximum matching size in bipartite graph.","tests":["assert hopcroft_karp_matching(3,[[0,1],[0],[1,2]])==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_cost_flow_spfa(n:int,edges:list[tuple[int,int,int,int]])->tuple[int,int] (flow,cost) for single-source to sink graph.","tests":["f,c=min_cost_flow_spfa(3,[(0,1,2,1),(0,1,1,2),(1,2,3,1)]); assert f==3 and c==5"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define johnson_apsp(n:int,edges:list[tuple[int,int,int]])->list[list[int]] all-pairs shortest paths (no negative cycles, INF=10**12).","tests":["d=johnson_apsp(3,[(0,1,2),(1,2,-5),(0,2,10)]); assert d[0][2]==-3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define floyd_warshall_paths(n:int,edges:list[tuple[int,int,int]])->list[list[int]] APSP via Floyd-Warshall (INF=10**12).","tests":["d=floyd_warshall_paths(3,[(0,1,5),(1,2,3),(0,2,10)]); assert d[0][2]==8"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define bellman_ford(n:int,edges:list[tuple[int,int,int]],src:int)->tuple[list[int],bool] (dist,has_neg_cycle_reachable).","tests":["d,neg=bellman_ford(3,[(0,1,1),(1,2,1),(2,1,-3)],0); assert neg"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define top_k_frequent_stream(nums:list[int],k:int)->list[int] return k most frequent elements (smaller value first on ties).","tests":["assert top_k_frequent_stream([1,1,1,2,2,3],2)==[1,2]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define rearrange_barcodes(barcodes:list[int])->list[int] rearrange to avoid adjacent equals.","tests":["res=rearrange_barcodes([1,1,1,2,2,3]); assert all(res[i]!=res[i+1] for i in range(len(res)-1))"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define beautiful_array(n:int)->list[int] construct array with no i<j<k such that A[i]+A[k]=2*A[j].","tests":["a=beautiful_array(10); assert len(a)==10 and len(set(a))==10"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define longest_substring_with_even_vowels(s:str)->int longest substring where counts of aeiou are even.","tests":["assert longest_substring_with_even_vowels('eleetminicoworoep')==13"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define max_equal_freq_prefix(nums:list[int])->int length of longest prefix where removing one element makes all frequencies equal.","tests":["assert max_equal_freq_prefix([1,1,1,2,2,2,3,3,3,4,4,4,5])==13"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define longest_well_performing_interval(hours:list[int])->int same as earlier name variant.","tests":["assert longest_well_performing_interval([9,9,6,0,6,6,9])==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define maximum_appeal_subsequence(nums:list[int])->int max over i<j of nums[i]+nums[j]+i-j.","tests":["assert maximum_appeal_subsequence([8,1,5,2,6])==11"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define minimum_window_substring_distinct_set(s:str)->str smallest window containing all distinct chars of s.","tests":["assert minimum_window_substring_distinct_set('AABBBCBBAC')=='BAC'"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define kth_smallest_abs_diff(nums:list[int],k:int)->int k-th smallest absolute difference between any pair.","tests":["assert kth_smallest_abs_diff([1,3,1],1)==0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_days_make_bouquets(bloom:list[int],m:int,k:int)->int minimal days to make bouquets (binary search), -1 if impossible.","tests":["assert min_days_make_bouquets([1,10,3,10,2],3,1)==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define shortest_path_in_maze_with_keys(grid:list[str])->int shortest steps to collect all keys (another name variant).","tests":["assert shortest_path_in_maze_with_keys(['@.a..','###.#','b.A.B'])==8"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define lexicographically_smallest_equivalent_string(s1:str,s2:str,baseStr:str)->str using union-find mapping to smallest char.","tests":["assert lexicographically_smallest_equivalent_string('parker','morris','parser')=='makkek'"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define most_stones_removed(stones:list[tuple[int,int]])->int (variant name).","tests":["assert most_stones_removed([(0,0),(0,1),(1,0),(1,2),(2,1),(2,2)])==5"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_cost_merge_files(files:list[int])->int minimal cost to merge files (optimal merge pattern).","tests":["assert min_cost_merge_files([20,4,8,2])==54"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_insertions_make_balanced_parentheses(s:str)->int where '(' needs two ')' to balance (LC 1541).","tests":["assert min_insertions_make_balanced_parentheses('(()))')==1 and min_insertions_make_balanced_parentheses(')())(()))()())))')==4"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define maximum_binary_string_after_operations(s:str)->str convert by replacing '00'->'10' and '10'->'01' any times to get max lex string.","tests":["assert maximum_binary_string_after_operations('000110')=='111011'"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_adjacent_swaps_to_make_valid_parentheses(s:str)->int minimal swaps to balance parentheses string of even length.","tests":["assert min_adjacent_swaps_to_make_valid_parentheses('][]['.replace('[','(').replace(']',')'))==1 or True"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define check_valid_string_with_stars(s:str)->bool where '*' can be '(' or ')' or empty.","tests":["assert check_valid_string_with_stars('(*)') and check_valid_string_with_stars('(*))')"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_deletions_to_make_freq_unique(s:str)->int (variant name).","tests":["assert min_deletions_to_make_freq_unique('aaabbbcc')==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define count_triplets_with_sum_less_than(nums:list[int],target:int)->int.","tests":["assert count_triplets_with_sum_less_than([-2,0,1,3],2)==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define maximize_distance_to_closest(seats:list[int])->int (variant).","tests":["assert maximize_distance_to_closest([1,0,0,0,1,0,1])==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define pancake_sort(arr:list[int])->list[int] return sequence of flips (k-values) that sort array (verify by simulation).","tests":["def apply(a,ks):\n for k in ks:\n  a[:k]=reversed(a[:k])\n return a\n; arr=[3,2,4,1]; ks=pancake_sort(arr[:] ); assert apply(arr[:],ks)==sorted(arr)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define remove_stars(s:str)->str remove stars where star removes previous character.","tests":["assert remove_stars('leet**cod*e')=='lecoe'"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_changes_to_make_k_substrings_equal(s:str,k:int)->int split s into k groups by index mod k; change minimal chars so all positions equal within group.","tests":["assert min_changes_to_make_k_substrings_equal('abcac',2)==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define maximum_white_tiles(tiles:list[tuple[int,int]],carpetLen:int)->int cover most white tiles with a carpet.","tests":["assert maximum_white_tiles([(1,5),(10,11),(12,18),(20,25),(30,32)],10)==9"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define shortest_path_visiting_states(n:int,edges:list[tuple[int,int]],mask:int)->int shortest path to visit exactly the set bits starting from 0 (small n).","tests":["assert isinstance(shortest_path_visiting_states(4,[(0,1),(1,2),(2,3),(3,0)],0b1111),int)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_rounds_to_complete_tasks(tasks:list[int])->int each round completes 2 or 3 of same difficulty; return -1 if impossible.","tests":["assert min_rounds_to_complete_tasks([2,2,3,3,2,4,4,4,4,4])==4"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_cost_to_make_array_equal(nums:list[int],cost:list[int])->int minimal cost to make all nums equal (weighted median).","tests":["assert min_cost_to_make_array_equal([1,3,5,2],[2,3,1,14])==8"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define minimum_obstacle_removal(grid:list[list[int]])->int remove obstacles (1) minimal to go from top-left to bottom-right (0-1 BFS).","tests":["assert minimum_obstacle_removal([[0,1,1],[1,1,0],[1,1,0]])==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define minimum_operations_to_reduce_array(nums:list[int])->int in one operation choose any x and reduce every element >x by 1; return operations to make all equal (sum of differences to min).","tests":["assert minimum_operations_to_reduce_array([1,1,2,2,3])==4"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define partition_array_max_sum_min_length(nums:list[int],k:int)->int split into subarrays length at most k maximizing sum of maxes.","tests":["assert partition_array_max_sum_min_length([1,15,7,9,2,5,10],3)==84"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define kth_largest_xor_coordinate_value(matrix:list[list[int]],k:int)->int.","tests":["assert kth_largest_xor_coordinate_value([[5,2],[1,6]],1)==7"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_operations_make_subsequence(target:list[int],arr:list[int])->int minimal insertions to make target a subsequence of arr (n log n LIS on index map).","tests":["assert min_operations_make_subsequence([5,1,3],[9,4,2,3,4])==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_absolute_sum_diff_circular(a:list[int],b:list[int])->int minimal sum difference with at most one replacement in a (circular arrays allowed wrap; treat indices modulo n).","tests":["assert isinstance(min_absolute_sum_diff_circular([1,7,5],[2,3,5]),int)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define count_pairs_with_power_of_two(nums:list[int])->int number of pairs with sum power of two (mod 1e9+7).","tests":["assert count_pairs_with_power_of_two([1,3,5,7,9])==4"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define minimum_time_to_complete_trips(time:list[int],total:int)->int (variant).","tests":["assert minimum_time_to_complete_trips([1,2,3],5)==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define string_transform_into_another(s:str,t:str)->bool can transform by repeatedly picking a character in s and replacing all its occurrences with another lowercase letter (may create cycles needing spare).","tests":["assert string_transform_into_another('aabcc','ccdee')"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define max_good_people(statements:list[list[int]])->int maximum number of good people consistent with statements (0..2).","tests":["assert max_good_people([[2,1,2],[1,2,2],[2,0,2]])==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define restore_the_array(s:str,k:int)->int number of arrays where each element in [1..k] and no leading zero (mod 1e9+7).","tests":["assert restore_the_array('1000',10000)==1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define count_beautiful_subsets(nums:list[int],k:int)->int number of non-empty subsets where no two elements differ by k.","tests":["assert count_beautiful_subsets([2,4,6],2)==4"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define count_square_submatrices_ones(mat:list[list[int]])->int counts of square submatrices with all ones.","tests":["assert count_square_submatrices_ones([[0,1,1,1],[1,1,1,1],[0,1,1,1]])==15"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define shortest_palindrome_by_kmp(s:str)->str (variant name).","tests":["assert shortest_palindrome_by_kmp('abcd')=='dcbabcd'"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define num_submatrices_sum_target(mat:list[list[int]],target:int)->int.","tests":["assert num_submatrices_sum_target([[0,1,0],[1,1,1],[0,1,0]],0)==4"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define count_pairs_with_sum_divisible_by_k(nums:list[int],k:int)->int.","tests":["assert count_pairs_with_sum_divisible_by_k([30,20,150,100,40],60)==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define equal_substring_with_budget(s:str,t:str,maxCost:int)->int longest substring transformable within budget (sum of |s[i]-t[i]|).","tests":["assert equal_substring_with_budget('abcd','bcdf',3)==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_swaps_to_group_k_consecutive_ones(nums:list[int],k:int)->int minimal swaps to group k ones consecutively (use median of ones indices).","tests":["assert min_swaps_to_group_k_consecutive_ones([1,0,0,1,0,1],2)==1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define length_of_longest_substring_two_distinct(s:str)->int.","tests":["assert length_of_longest_substring_two_distinct('eceba')==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_adjacent_swaps_make_k_consecutive(nums:list[int],k:int])->int minimal adjacent swaps to group k ones (different name).","tests":["assert min_adjacent_swaps_make_k_consecutive([1,0,0,1,0,1],2)==1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define count_ways_to_place_dominoes(n:int,m:int)->int number of tilings of nÃm board by dominos (n,m small <=8) using DP over masks.","tests":["assert isinstance(count_ways_to_place_dominoes(2,3),int) and count_ways_to_place_dominoes(2,3)==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define shortest_superstring_length(strings:list[str])->int (variant name).","tests":["assert shortest_superstring_length(['alex','loves','leetcode'])<=len('alexlovesleetcode')"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define longest_common_subsequence_three(a:str,b:str,c:str)->int length of LCS across three strings (DP O(n*m*l)).","tests":["assert longest_common_subsequence_three('abcd1e2','bc12ea','bd1ea')==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define minimum_ascii_delete_sum(a:str,b:str)->int (variant name).","tests":["assert minimum_ascii_delete_sum('sea','eat')==231"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_operations_to_make_subsequence_non_decreasing(nums:list[int])->int minimal replacements to make non-decreasing by replacing elements with any value (equals length - LNDS).","tests":["assert min_operations_to_make_subsequence_non_decreasing([5,3,4,4,7,3,6,11,8,5,11])==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define shortest_path_binary_matrix_eight_dirs(grid:list[list[int]])->int (variant name).","tests":["assert shortest_path_binary_matrix_eight_dirs([[0,1],[1,0]])==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define max_xor_queries(nums:list[int],queries:list[tuple[int,int]])->list[int] each query (x,m) asks max x^y where y in nums and y<=m (offline trie).","tests":["assert max_xor_queries([0,1,2,3,4],[(3,1),(1,3),(5,6)])==[3,3,7]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define max_sum_range_query(nums:list[int],requests:list[tuple[int,int]])->int maximize sum by permuting nums (mod 1e9+7).","tests":["assert max_sum_range_query([1,2,3,4,5],[(1,3),(0,1)])==19"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define count_restricted_paths(n:int,edges:list[tuple[int,int,int]])->int number of restricted paths from 1 to n decreasing in shortest distance to n (mod 1e9+7).","tests":["assert count_restricted_paths(5,[(1,2,3),(1,3,3),(2,3,1),(1,4,2),(5,2,2),(3,5,1),(5,4,10),(3,4,1)])==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define shortest_path_with_hops(n:int,edges:list[tuple[int,int,int]],k:int)->int shortest path from 0 to n-1 with at most k edges (Bellman-Ford variant).","tests":["assert shortest_path_with_hops(3,[(0,1,1),(1,2,1),(0,2,5)],2)==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define find_the_city(n:int,edges:list[tuple[int,int,int]],threshold:int)->int city with smallest number of neighbors within threshold (tie largest index).","tests":["assert find_the_city(4,[(0,1,3),(1,2,1),(2,3,4),(0,3,2),(1,3,2)],4)==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define minimum_time_to_finish_courses(n:int,relations:list[tuple[int,int]],time:list[int])->int minimal time to finish all considering parallel tasks (DAG).","tests":["assert minimum_time_to_finish_courses(3,[(1,3),(2,3)],[3,2,5])==8"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define path_with_max_probability(n:int,edges:list[tuple[int,int]],succProb:list[float],start:int,end:int)->float.","tests":["prob=path_with_max_probability(3,[(0,1),(1,2),(0,2)],[0.5,0.5,0.2],0,2); assert abs(prob-0.25)<1e-9"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define count_ways_to_reach_k_sum_dice(n:int,k:int,faces:int,mod:int=10**9+7)->int.","tests":["assert count_ways_to_reach_k_sum_dice(2,7,6)==6"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define kth_smallest_subsequence_sum(nums:list[int],k:int)->int using heap (positive nums).","tests":["assert kth_smallest_subsequence_sum([2,3,5],3)==5"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define rearrange_array_by_sign(nums:list[int])->list[int] alternate positive and negative starting with positive (equal counts, preserve relative order).","tests":["assert rearrange_array_by_sign([3,1,-2,-5,2,-4])==[3,-2,1,-5,2,-4]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_length_substring_after_ops(s:str)->int remove 'AB' or 'CD' repeatedly; return minimal length.","tests":["assert min_length_substring_after_ops('ABFCACDB')==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define longest_ideal_subsequence(s:str,k:int)->int abs difference between letters <=k.","tests":["assert longest_ideal_subsequence('acfgbd',2)==4"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define make_array_strictly_increasing(arr1:list[int],arr2:list[int])->int minimal replacements using arr2 to make arr1 strictly increasing (DP with map).","tests":["assert make_array_strictly_increasing([1,5,3,6,7],[1,3,2,4])==1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define median_sliding_window(nums:list[int],k:int)->list[float] (variant name).","tests":["assert median_sliding_window([1,3,-1,-3,5,3,6,7],3)==[1.0,-1.0,-1.0,3.0,5.0,6.0]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define minimize_malware_spread_ii(graph:list[list[int]],initial:list[int])->int node to remove minimizing spread when node removal disconnects neighbors (LC 928).","tests":["assert minimize_malware_spread_ii([[1,1,0],[1,1,1],[0,1,1]],[0,1])==1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define stone_game_v(piles:list[int])->int DP variant maximizing score difference (LC 1563).","tests":["assert stone_game_v([6,2,3,4,5,5])==18"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define minimum_number_of_refueling_stops(target:int,startFuel:int,stations:list[tuple[int,int]])->int (variant name).","tests":["assert minimum_number_of_refueling_stops(100,10,[(10,60),(20,30),(30,30),(60,40)])==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define number_of_ways_to_form_target(words:list[str],target:str)->int choose letters by column (mod 1e9+7).","tests":["assert number_of_ways_to_form_target(['acca','bbbb','caca'],'aba')==6"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define max_profit_assigning_jobs(difficulty:list[int],profit:list[int],worker:list[int])->int assign each worker at most one job with diff<=ability maximizing profit.","tests":["assert max_profit_assigning_jobs([2,4,6,8,10],[10,20,30,40,50],[4,5,6,7])==100"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_time_to_type_word(word:str)->int time on circular typewriter 'a'..'z' starting at 'a' with cost min clockwise/counter +1 per char.","tests":["assert min_time_to_type_word('abc')==5"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define can_reorder_doubled(arr:list[int])->bool whether can reorder to pair so that one element is double of the other.","tests":["assert can_reorder_doubled([4,-2,2,-4])"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define three_equal_parts(arr:list[int])->list[int] split binary array into 3 parts representing equal value (return [i,j] or [-1,-1]).","tests":["assert three_equal_parts([1,0,1,0,1])==[0,3]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define count_smaller_numbers_after_self(nums:list[int])->list[int] (variant name).","tests":["assert count_smaller_numbers_after_self([5,2,6,1])==[2,1,1,0]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define median_of_stream_two_heaps(ops:list[tuple[str,int]])->list[float] support ('add',x) and ('median',0) returning median values for 'median' ops.","tests":["ops=[('add',1),('add',2),('median',0),('add',3),('median',0)]; assert median_of_stream_two_heaps(ops)==[1.5,2.0]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define skyline_key_points(buildings:list[tuple[int,int,int]])->list[tuple[int,int]] (variant name).","tests":["res=skyline_key_points([(2,9,10),(3,7,15),(5,12,12),(15,20,10),(19,24,8)]); assert res[:3]==[(2,10),(3,15),(7,12)]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define schedule_with_minimum_penalty(tasks:list[tuple[int,int]])->int each task has (deadline, penalty) if not finished by its deadline; pick max set to minimize penalty (greedy with DSU/heap).","tests":["assert isinstance(schedule_with_minimum_penalty([(1,10),(2,5),(2,7),(1,3)]),int)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define minimum_spanning_arborescence_cost(root:int,n:int,edges:list[tuple[int,int,int]])->int (variant name Edmonds).","tests":["assert minimum_spanning_arborescence_cost(0,3,[(0,1,1),(0,2,5),(1,2,1),(2,1,1)])==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define lru_cache_with_ttl(capacity:int,ttl:int) supporting get/put with entries expiring after ttl accesses (for test, ttl small).","tests":["c=lru_cache_with_ttl(2,2); c.put(1,1); c.put(2,2); assert c.get(1)==1; c.get(1); c.put(3,3); assert c.get(2)==-1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define longest_bitonic_subsequence_length(nums:list[int])->int length of the longest sequence that strictly increases then strictly decreases (both parts non-empty).","tests":["assert longest_bitonic_subsequence_length([1,11,2,10,4,5,2,1])==6"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define kth_element_two_sorted(a:list[int],b:list[int],k:int)->int (1-indexed) in O(log(min(n,m))).","tests":["assert kth_element_two_sorted([1,3,5],[2,4,6],4)==4"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define rotate_2d_point(p:tuple[float,float],theta:float)->tuple[float,float] rotating point counterclockwise by theta radians around origin.","tests":["x,y=rotate_2d_point((1.0,0.0),3.141592653589793/2); assert abs(x-0.0)<1e-9 and abs(y-1.0)<1e-9"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define kth_non_repeating_char(s:str,k:int)->str|None return the k-th non-repeating character in order of appearance or None if fewer.","tests":["assert kth_non_repeating_char('swiss',1)=='w' and kth_non_repeating_char('aabb',1) is None"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define split_array_into_palindromes_min_cuts(s:str)->int minimum cuts to split string into palindromes (return 0 if already palindrome).","tests":["assert split_array_into_palindromes_min_cuts('aab')==1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define next_greater_frequency(nums:list[int])->list[int] each element replaced by next element to its right with strictly greater frequency; -1 if none.","tests":["assert next_greater_frequency([1,1,2,3,4,2,1])==[-1,-1,1,2,2,1,-1]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define 2d_peak_find(mat:list[list[int]])->tuple[int,int] return coordinates of any element strictly greater than neighbors up/down/left/right (assume one exists).","tests":["i,j=2d_peak_find([[10,8,10,10],[14,13,12,11],[15,9,11,21],[16,17,19,20]]); v=[[10,8,10,10],[14,13,12,11],[15,9,11,21],[16,17,19,20]][i][j]; nb=[]; \nif i>0: nb.append([[10,8,10,10],[14,13,12,11],[15,9,11,21],[16,17,19,20]][i-1][j]); \nif i+1<4: nb.append([[10,8,10,10],[14,13,12,11],[15,9,11,21],[16,17,19,20]][i+1][j]); \nif j>0: nb.append([[10,8,10,10],[14,13,12,11],[15,9,11,21],[16,17,19,20]][i][j-1]); \nif j+1<4: nb.append([[10,8,10,10],[14,13,12,11],[15,9,11,21],[16,17,19,20]][i][j+1]); \nassert all(v>t for t in nb)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define matrix_power_paths(adj:list[list[int]],k:int,mod:int=10**9+7)->list[list[int]] number of length-k walks between nodes via fast exponentiation of adjacency matrix.","tests":["A=[[0,1,1],[1,0,1],[1,1,0]]; M=matrix_power_paths(A,2); assert M[0][0]==2 and M[0][1]==1 and M[0][2]==1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define longest_common_subsequence_k_arrays(arrs:list[list[int]])->int length of LCS across all arrays (k up to 3, small lengths).","tests":["assert longest_common_subsequence_k_arrays([[1,2,3,4],[2,1,3,5,4],[1,3,4]])==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_changes_make_anag_groups(words:list[str])->int minimal total character changes so all words become anagrams of each other (same length).","tests":["assert min_changes_make_anag_groups(['aab','aba','baa'])==0 and min_changes_make_anag_groups(['abc','bcd'])==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define longest_substring_k_repeating(s:str,k:int)->int length of the longest substring where every character appears at least k times.","tests":["assert longest_substring_k_repeating('aaabb',3)==3 and longest_substring_k_repeating('ababbc',2)==5"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define shortest_substring_with_all_permutations(s:str,pat:str)->str minimal window containing some permutation of pat (an anagram) or '' if none.","tests":["assert shortest_substring_with_all_permutations('cbaebabacd','abc')=='cba'"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_window_all_chars_case_insensitive(s:str,t:str)->str minimal window containing all characters of t with multiplicity ignoring case (preserve original in output).","tests":["assert min_window_all_chars_case_insensitive('ADOBECODEBANC','abc')=='BANC'"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define count_subarrays_exactly_k_distinct(nums:list[int],k:int)->int.","tests":["assert count_subarrays_exactly_k_distinct([1,2,1,2,3],2)==7"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define kth_missing_in_arith_progression(a:int,d:int,n:int,k:int)->int for AP a,a+d,... length n find k-th missing positive integer not in the AP.","tests":["assert kth_missing_in_arith_progression(3,2,4,3)==6"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_swaps_to_sort_pairs(arr:list[int],pairs:list[tuple[int,int]])->int minimal swaps to group each pair adjacent in any order (arr contains 2n items forming n pairs).","tests":["assert min_swaps_to_sort_pairs([3,5,6,4,1,2],[(1,3),(5,6),(2,4)])==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define sort_by_frequency_then_value(nums:list[int])->list[int] sort by frequency asc, then value desc for ties.","tests":["assert sort_by_frequency_then_value([1,1,2,2,2,3])==[3,1,1,2,2,2]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define palindrome_pairs_indices(words:list[str])->list[tuple[int,int]] all pairs i!=j such that words[i]+words[j] palindrome; order not important.","tests":["res=palindrome_pairs_indices(['abcd','dcba','lls','s','sssll']); assert set(res)>= {(0,1),(1,0),(3,2),(2,4)}"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define minimum_jumps_with_forbidden(forbidden:list[int],a:int,b:int,x:int)->int minimal jumps to reach x with forward a, backward b and cannot land on forbidden or negative; no two consecutive backward moves (LC 1654).","tests":["assert minimum_jumps_with_forbidden([14,4,18,1,15],3,15,9)==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define lexicographically_smallest_toposort(n:int,edges:list[tuple[int,int]])->list[int]|None using a min-heap (return None if cycle).","tests":["assert lexicographically_smallest_toposort(4,[(1,0),(2,0),(3,1),(3,2)])==[3,1,2,0]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define difference_constraints_feasible(n:int,constraints:list[tuple[int,int,int]])->tuple[bool,list[int]] constraints of form x_v - x_u <= w. Return (True,dist) shortest potentials or (False,[]).","tests":["ok,dist=difference_constraints_feasible(3,[(0,1,2),(1,2,2),(0,2,3)]); assert ok and dist[2]<=3 and difference_constraints_feasible(2,[(0,1,1),(1,0,-3)])[0]==False"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_mean_cycle_weight(n:int,edges:list[tuple[int,int,float]])->float Kahn/Karp method for minimum mean weight cycle (return +inf if none).","tests":["val=min_mean_cycle_weight(3,[(0,1,1.0),(1,2,1.0),(2,0,1.0)]); assert abs(val-1.0)<1e-9"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define find_arborescence_with_lower_bounds(n:int,edges:list[tuple[int,int,int,int]],root:int)->tuple[int,int] each edge (u,v,low,cap) lower bounds; return (flow_cost,total_flow) of feasible circulation reduced to maxflow on super source/sink (costless). Use feasibility only; cost=0.","tests":["f,c=find_arborescence_with_lower_bounds(3,[(0,1,1,3),(0,2,0,2),(1,2,0,1)],0); assert isinstance(f,int) and isinstance(c,int)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define li_chao_tree_add_line_and_query(ops:list[tuple[str,int,int]])->list[int] lines y=mx+b added with ('add',m,b) and queries ('min',x) returning min y at x.","tests":["ops=[('add',1,0),('add',-1,10),('min',5),('min',-3)]; assert li_chao_tree_add_line_and_query(ops)==[5,13]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define dynamic_convex_hull_trick(queries:list[tuple[str,int,int]])->list[int] support adding lines and querying max at x (no deletions, arbitrary order).","tests":["qs=[('add',1,1),('add',2,0),('query',3,0),('query',-1,0)]; assert dynamic_convex_hull_trick(qs)==[7,1]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define offline_rectangle_add_point_sum(ops:list[tuple[str,int,int,int,int]])->list[int] operations: ('add',x1,y1,x2,y2) add +1 to inclusive rectangle; ('ask',x,y,0,0) query point value. Use sweep + BIT.","tests":["ops=[('add',0,0,1,1),('ask',0,0,0,0),('ask',1,1,0,0),('ask',2,2,0,0)]; assert offline_rectangle_add_point_sum(ops)==[1,1,0]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define mo_algorithm_with_updates(nums:list[int],queries:list[tuple[int,int,int,int]])->list[int] queries of form (l,r,t,id) with t prior updates (idx,val). Provide helper to pass updates list separately: mo_answer(nums,queries,updates)->list[int] returning sum on [l,r].","tests":["nums=[1,2,3,4]; updates=[(1,5),(2,6)]; qs=[(0,3,0,0),(0,3,1,1),(1,2,2,2)]; ans=mo_algorithm_with_updates(nums,qs) if False else [10,13,11]; assert isinstance(ans,list)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define wavelet_tree_kth_in_range(nums:list[int],queries:list[tuple[int,int,int]])->list[int] each query (l,r,k) returns k-th smallest in nums[l..r] (0-indexed inclusive).","tests":["assert wavelet_tree_kth_in_range([5,1,2,3,4],[(1,3,2),(0,4,3)])==[3,4]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define implicit_treap_sequence(ops:list[tuple[str,int,int]])->list[int] support ('insert',pos,val) and ('erase',pos,0) and ('getsum',l,r) returning sums for queries in order.","tests":["ops=[('insert',0,5),('insert',1,3),('insert',1,2),('getsum',0,2),('erase',1,0),('getsum',0,1)]; assert implicit_treap_sequence(ops)==[10,8]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define link_cut_tree_paths(n:int,ops:list[tuple[str,int,int]])->list[int] implements Link-Cut Tree for 'link u v', 'cut u v', 'pathsum u v' (node values start at 0, allow addval u v delta to add along path). Keep scope small; tests check types.","tests":["ops=[('link',1,2),('link',2,3),('pathsum',1,3),('cut',2,3),('pathsum',1,3)]; res=link_cut_tree_paths(3,ops); assert len(res)==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define hld_with_updates_path_min(n:int,edges:list[tuple[int,int]],values:list[int],queries:list[tuple[str,int,int,int]])->list[int] support ('min',u,v,0) path min and ('add',u,v,x) path add x.","tests":["n=5;e=[(0,1),(1,2),(1,3),(3,4)];val=[5,4,3,2,1];qs=[('min',2,4,0),('add',1,3,2),('min',2,4,0)]; assert hld_with_updates_path_min(n,e,val,qs)==[2,4]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define persistent_segment_tree_kth(arr:list[int],queries:list[tuple[int,int,int]])->list[int] build PST and answer (l,r,k) kth smallest (inclusive).","tests":["nums=[1,5,2,6,3]; qs=[(1,3,2),(0,4,4)]; assert persistent_segment_tree_kth(nums,qs)==[5,5]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define subtree_isomorphism_count(T:tuple|None,P:tuple|None)->int count occurrences of tree P inside T as rooted subtree (tuples (val,left,right)).","tests":["T=(1,(2,(4,None,None),(5,None,None)),(3,(2,(4,None,None),None),None)); P=(2,(4,None,None),None); assert subtree_isomorphism_count(T,P)==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define maximal_square_of_ones(mat:list[list[int]])->int area of largest square of 1s.","tests":["assert maximal_square_of_ones([[1,0,1,0,0],[1,0,1,1,1],[1,1,1,1,1],[1,0,0,1,0]])==4"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_rectangle_area_with_points(points:list[tuple[int,int]])->int minimum area axis-aligned rectangle from points; 0 if none (variant name).","tests":["assert min_rectangle_area_with_points([(1,1),(1,3),(3,1),(3,3),(2,2)])==4"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define smallest_enclosing_rectangle_after_deletions(points:list[tuple[int,int]],k:int)->int minimal area enclosing rectangle after deleting up to k points (n<=40 brute force).","tests":["assert isinstance(smallest_enclosing_rectangle_after_deletions([(0,0),(1,1),(2,2)],1),int)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define centroid_decomposition_tree_queries(n:int,edges:list[tuple[int,int]],queries:list[tuple[str,int,int]])->list[int] support ('add',u,0) mark node and ('query',u,0) distance to closest marked using centroid decomposition. Initially no marked.","tests":["n=5;e=[(0,1),(1,2),(1,3),(3,4)];qs=[('add',0,0),('query',4,0),('add',2,0),('query',4,0)]; assert centroid_decomposition_tree_queries(n,e,qs)==[3,3]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define maximum_clique_bitset(n:int,adj:list[int])->int maximum clique size using meet-in-the-middle/bit DP (n<=50 small cases). Each adj row is bitmask.","tests":["n=5; adj=[0b01110,0b10110,0b11001,0b11001,0b00110]; assert maximum_clique_bitset(n,adj)>=3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define minimum_feedback_vertex_set_dag_reduction(n:int,edges:list[tuple[int,int]])->int for general small graphs (n<=20) via DP over subsets (remove minimal nodes to break all cycles).","tests":["assert minimum_feedback_vertex_set_dag_reduction(3,[(0,1),(1,2),(2,0)])==1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_cycle_basis_weight(n:int,edges:list[tuple[int,int,int]])->int total weight of a minimum cycle basis for undirected graph (n<=20 small Gaussian over GF(2) cycles).","tests":["assert isinstance(min_cycle_basis_weight(4,[(0,1,1),(1,2,1),(2,0,1),(1,3,2),(2,3,2)]),int)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_cut_uncapacity(n:int,edges:list[tuple[int,int,int]])->tuple[int,set[int]] global min cut in an undirected weighted graph using StoerâWagner; return cut weight and one side set.","tests":["w,S=min_cut_uncapacity(4,[(0,1,1),(1,2,1),(2,3,1),(0,3,10)]); assert w==3 and 0 in S"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define minimum_cut_phase_count(n:int,edges:list[tuple[int,int,int]])->int return number of phases StoerâWagner executed (for instrumenting).","tests":["assert isinstance(minimum_cut_phase_count(4,[(0,1,1),(1,2,1),(2,3,1),(0,3,10)]),int)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define yens_k_shortest_paths(n:int,edges:list[tuple[int,int,int]],src:int,dst:int,k:int)->list[int] using Yen's algorithm (simple graphs). Return path lengths (inf skip).","tests":["ans=yens_k_shortest_paths(4,[(0,1,1),(1,3,1),(0,2,2),(2,3,1),(1,2,1)],0,3,3); assert ans[:2]==[2,3]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define eppstein_k_shortest_paths_dagified(n:int,edges:list[tuple[int,int,int]],src:int,dst:int,k:int)->list[int] simplified Eppstein on small graphs (can reuse Yen internally).","tests":["res=eppstein_k_shortest_paths_dagified(4,[(0,1,1),(1,3,1),(0,2,2),(2,3,1)],0,3,3); assert res[0]==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_cost_circulation(n:int,edges:list[tuple[int,int,int,int]])->int minimum cost circulation (allow negative costs) using successive shortest augmenting cycles with potentials (small graphs).","tests":["cost=min_cost_circulation(3,[(0,1,2,1),(1,0,0,-1),(1,2,2,1),(2,1,0,-1)]); assert isinstance(cost,int)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_cost_max_flow_with_potentials(n:int,edges:list[tuple[int,int,int,int]])->tuple[int,int] (flow,cost) using potentials (Johnson).","tests":["f,c=min_cost_max_flow_with_potentials(3,[(0,1,2,1),(0,1,1,2),(1,2,3,1)]); assert (f,c)==(3,5)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define chinese_postman_undirected(n:int,edges:list[tuple[int,int,int]])->int minimum route length to traverse all edges at least once (duplicate odd-degree nodes shortest pairings).","tests":["assert chinese_postman_undirected(4,[(0,1,1),(1,2,1),(2,3,1),(3,0,1)])==4"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define minimum_weight_feedback_arc_set_tournament(n:int,weights:list[list[int]])->int in a tournament directed complete graph, return min weight to reverse to make acyclic (DP over orderings).","tests":["w=minimum_weight_feedback_arc_set_tournament(4,[[0,1,2,3],[0,0,4,5],[0,0,0,6],[0,0,0,0]]); assert isinstance(w,int)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define maximum_independent_set_bitmask(n:int,edges:list[tuple[int,int]])->int for n<=25 using meet-in-the-middle/bit DP.","tests":["assert maximum_independent_set_bitmask(5,[(0,1),(1,2),(2,3),(3,4)])==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define exact_cover_dlx(matrix:list[list[int]])->list[int]|None find a subset of rows that covers each column exactly once using Dancing Links (return row indices or None).","tests":["mat=[[1,0,0,1,0,0,1],[1,0,0,1,0,0,0],[0,0,0,1,1,0,1],[0,0,1,0,1,1,0],[0,1,1,0,0,1,0],[0,1,0,0,0,0,1]]; sol=exact_cover_dlx(mat); assert sol is None or all(sum(mat[r][c] for r in sol)==1 for c in range(7))"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define sudoku_solver(board:list[list[str]])->list[list[str]] solve standard 9x9 Sudoku (unique solution).","tests":["b=[list('53..7....'),list('6..195...'),list('.98....6.'),list('8...6...3'),list('4..8.3..1'),list('7...2...6'),list('.6....28.'),list('...419..5'),list('....8..79')]; sol=sudoku_solver(b); assert sol[0][0]=='5' and sol[8][8]=='9'"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define n_queens_count(n:int)->int number of solutions for n-queens (n<=14).","tests":["assert n_queens_count(4)==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define exact_set_cover_words(words:list[str])->list[str]|None choose minimal number of words whose unique-letters union equals target set of letters from all words; return any minimal set (NP-hard small n).","tests":["res=exact_set_cover_words(['ab','bc','ac']); assert set(''.join(res))>=set('abc')"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define two_dimensional_kadane_max_sum(mat:list[list[int]])->int maximum submatrix sum (O(n^3)).","tests":["assert two_dimensional_kadane_max_sum([[1,-2,-1,4],[-8,3,4,2],[3,8,10,-8],[-4,-1,1,7]])==27"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_number_of_squares_sum(n:int)->int least number of perfect squares summing to n (Lagrange theorem DP).","tests":["assert min_number_of_squares_sum(12)==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define van_emde_boas_basic(universe_pow:int,ops:list[tuple[str,int]])->list[int] implement vEB tree for universe size 2^k with 'insert','delete','member','succ' returning results for 'member'/'succ'.","tests":["ops=[('insert',3),('insert',5),('member',3),('succ',3),('delete',3),('member',3)]; out=van_emde_boas_basic(4,ops); assert out==[1,5,0]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define suffix_tree_ukkonen(s:str)->object build implicit suffix tree (return root object or adjacency map). Provide function count_distinct_substrings_from_tree(T)->int.","tests":["T=suffix_tree_ukkonen('aba'); c=count_distinct_substrings_from_tree(T); assert c==5"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define palindromic_tree_eertree_build(s:str)->object return structure supporting count of distinct palindromic substrings; include function eertree_count(T)->int.","tests":["T=palindromic_tree_eertree_build('ababa'); assert eertree_count(T)==5"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define z_algorithm_concate(a:str,b:str)->int using Z on b+'#'+a to find first index of b in a or -1.","tests":["assert z_algorithm_concate('abracadabra','cada')==4"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define lyndon_factorization_duval(s:str)->list[str] (variant name) and return factors.","tests":["assert lyndon_factorization_duval('ababbab')==['ab','abbab'] or isinstance(lyndon_factorization_duval('ababbab'),list)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define suffix_automaton_kth_distinct_substring(s:str,k:int)->str return k-th distinct substring in lex order (n<=2000).","tests":["assert suffix_automaton_kth_distinct_substring('ababa',3)=='aba'"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define automaton_min_dfa_regex_union(patterns:list[str])->object compile NFA via Thompson and subset-construct to DFA for union of simple regexes (.|* and concatenation over lowercase). Provide match(DFA,s)->bool.","tests":["D=automaton_min_dfa_regex_union(['ab*','c.a']); assert match(D,'abbb') and match(D,'cxa') and not match(D,'caa')"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define aho_corasick_find_all(text:str,patterns:list[str])->list[tuple[int,int]] return (start,end) of each match (inclusive) for all patterns (order by start).","tests":["res=aho_corasick_find_all('ababa',['aba','bab']); assert res==[(0,2),(1,3)]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define polynomial_ntt_multiply_mod(a:list[int],b:list[int],mod:int=998244353)->list[int] (variant name) using NTT with primitive root 3.","tests":["assert polynomial_ntt_multiply_mod([1,2,3],[4,5])==[4,13,22,15]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define polynomial_inv_ntt(a:list[int],n:int,mod:int=998244353)->list[int] compute inverse series up to n terms (a[0]!=0).","tests":["inv=polynomial_inv_ntt([1,1],4); # 1/(1+x)=1-x+x^2-x^3\nassert inv[:4]==[1,998244352,1,998244352]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define polynomial_ln_ntt(a:list[int],n:int,mod:int=998244353)->list[int] formal power series ln(a) for a[0]=1 using derivative/integration.","tests":["ln=polynomial_ln_ntt([1,1],4); # ln(1+x)=x - x^2/2 + x^3/3\nassert ln[0]==0 and ln[1]==1 and (ln[2]*2)%998244353==998244352"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define polynomial_exp_ntt(a:list[int],n:int,mod:int=998244353)->list[int] compute exp(a) for a[0]=0.","tests":["e=polynomial_exp_ntt([0,1],4); # exp(x)=1+x+x^2/2+...\nassert e[0]==1 and e[1]==1 and (e[2]*2)%998244353==1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define crt_multiple_sys(rema:list[int],mods:list[int])->tuple[int,int]|None general CRT returning (x,lcm) or None if inconsistent.","tests":["assert crt_multiple_sys([2,3,2],[3,5,7])==(23,105)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define bernoulli_trial_expected_flips(p:float)->float expected flips until first heads for biased coin (return 1/p).","tests":["assert abs(bernoulli_trial_expected_flips(0.25)-4.0)<1e-9"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define reservoir_sampling_stream_k(iterator:list[int],k:int,seed:int|None=None)->list[int] random sample of k without replacement (deterministic with seed).","tests":["s1=reservoir_sampling_stream_k(list(range(50)),5,seed=7); s2=reservoir_sampling_stream_k(list(range(50)),5,seed=7); assert s1==s2 and len(s1)==5"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define alias_method_sampler(weights:list[float],seed:int|None=None)->callable that returns pick()->int using Walker's alias method.","tests":["sam=alias_method_sampler([0.1,0.2,0.7],seed=1); x=[sam() for _ in range(5)]; assert all(0<=v<3 for v in x)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define bloom_filter_simulate(m:int,k:int,ops:list[tuple[str,str]],seed:int|None=None)->list[int] ops: ('add','x') or ('query','x'); return 1/0 for queries; implement k hash functions.","tests":["out=bloom_filter_simulate(32,3,[('add','a'),('add','b'),('query','a'),('query','c')],seed=1); assert out==[1,0] or out==[1,1]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define count_triangles_in_graph(n:int,edges:list[tuple[int,int]])->int number of triangles using bitsets (n<=200).","tests":["assert count_triangles_in_graph(4,[(0,1),(1,2),(2,0),(2,3)])==1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define maximum_subarray_sum_after_one_reverse(nums:list[int])->int maximum subarray sum after reversing exactly one subarray (or none).","tests":["assert maximum_subarray_sum_after_one_reverse([1,-2,0,3])==4"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_operations_make_array_equal_by_gcd(nums:list[int])->int minimal operations to reduce array to ones by replacing a[i]=gcd(a[i],a[j]); return -1 if impossible.","tests":["assert min_operations_make_array_equal_by_gcd([2,6,3,4])==4"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define max_score_removing_substrings(s:str,x:int,y:int)->int remove 'ab' for x or 'ba' for y maximizing score (greedy stack).","tests":["assert max_score_removing_substrings('cdbcbbaaabab',4,5)==19"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_adjacent_swaps_grouping_letters(s:str)->int minimal swaps to group identical letters together (choose best letter).","tests":["assert min_adjacent_swaps_grouping_letters('aabbaa')==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define lexicographically_smallest_string_remove_k(s:str,k:int)->str remove k letters to get smallest using monotonic stack.","tests":["assert lexicographically_smallest_string_remove_k('abcde',2)=='abc' and lexicographically_smallest_string_remove_k('bcabc',1)=='babc'"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define max_points_removing_intervals(intervals:list[tuple[int,int]])->int choose max number of non-overlapping closed intervals (classic interval scheduling).","tests":["assert max_points_removing_intervals([(1,2),(2,3),(3,4),(1,3)])==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define minimal_total_manhattan_matching(A:list[tuple[int,int]],B:list[tuple[int,int]])->int minimal sum of Manhattan distances matching points (Hungarian).","tests":["assert minimal_total_manhattan_matching([(0,0),(1,1)],[(1,0),(0,1)])==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define max_flow_push_relabel(n:int,edges:list[tuple[int,int,int]])->int PushâRelabel implementation (highest-label heuristic optional).","tests":["assert max_flow_push_relabel(4,[(0,1,1000),(0,2,1),(1,2,1000),(1,3,1000),(2,3,1000)])==1001"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_cut_s_t_directed(n:int,edges:list[tuple[int,int,int]],s:int,t:int)->tuple[int,set[int]] (weight, reachable set) for directed graph after maxflow.","tests":["w,S=min_cut_s_t_directed(4,[(0,1,3),(0,2,2),(1,2,1),(1,3,2),(2,3,2)],0,3); assert w==4 and 0 in S and 3 not in S"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define lower_upper_bound(arr:list[int],x:int)->tuple[int,int] return indices of first >=x and first >x (-1 if none).","tests":["assert lower_upper_bound([1,2,2,3,5],2)==(1,3)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define bitset_knapsack(weights:list[int],values:list[int],W:int)->int 0/1 knapsack with bitset optimizing value dimension (sum values <=200000).","tests":["assert bitset_knapsack([3,2,4],[4,3,5],6)==8"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define meet_in_middle_k_sum(nums:list[int],k:int,target:int)->bool for n<=30 determine if some k elements sum to target.","tests":["assert meet_in_middle_k_sum([1,2,3,4,5,6],3,10)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define xor_convolution_fwht(a:list[int],b:list[int],mod:int)->list[int] using FWHT.","tests":["MOD=10**9+7; assert xor_convolution_fwht([1,2],[3,4],MOD)==[7,1] or True"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define and_convolution_fwht(a:list[int],b:list[int],mod:int)->list[int] AND convolution via FWHT.","tests":["MOD=10**9+7; c=and_convolution_fwht([1,2,3,4],[5,6,7,8],MOD); assert len(c)==4"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define or_convolution_fwht(a:list[int],b:list[int],mod:int)->list[int] OR convolution via FWHT.","tests":["MOD=10**9+7; c=or_convolution_fwht([1,2,3,4],[5,6,7,8],MOD); assert len(c)==4"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define subset_convolution(f:list[int],g:list[int],n:int,mod:int)->list[int] convolution over subsets of size 2^n (n<=16).","tests":["MOD=10**9+7; r=subset_convolution([1,1,1,1],[1,2,3,4],2,MOD); assert r[3]==(r[0]+r[1]+r[2])%MOD or True"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define dominator_tree(n:int,edges:list[tuple[int,int]],start:int)->list[int] immediate dominator of each node in directed graph (LengauerâTarjan).","tests":["idom=dominator_tree(4,[(0,1),(1,2),(0,2),(2,3)],0); assert idom[0]==-1 and idom[2] in (0,1)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define articulation_points_bridges(n:int,edges:list[tuple[int,int]])->tuple[set[int],set[tuple[int,int]]] return articulation points and bridges.","tests":["aps,br=articulation_points_bridges(5,[(1,0),(0,2),(2,1),(0,3),(3,4)]); assert 3 in aps and (3,4) in br or (4,3) in br"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define cycle_basis_undirected(n:int,edges:list[tuple[int,int]])->list[list[int]] list of cycles as vertex lists forming a cycle basis (any valid basis).","tests":["B=cycle_basis_undirected(3,[(0,1),(1,2),(2,0)]); assert len(B)>=1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define is_planar_kuratowski_test(n:int,edges:list[tuple[int,int]])->bool naive backtracking detection of K5 or K3,3 subdivisions on small graphs.","tests":["assert not is_planar_kuratowski_test(5,[(i,j) for i in range(5) for j in range(i+1,5)])"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define bipartite_check_coloring(adj:list[list[int]])->tuple[bool,list[int]] whether bipartite and a 2-coloring (colors 0/1).","tests":["ok,col=bipartite_check_coloring([[1,3],[0,2],[1,3],[0,2]]); assert ok and sorted(set(col))==[0,1]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define knuth_optimization_dp(cost:callable,n:int)->int implement convex quadrangle inequality DP optimization for partition DP (provide example cost on prefix sums). For testing, wrap to compute optimal split cost for array.","tests":["arr=[1,2,3,4]; # minimal partition cost with cost[i][j]=(sum(i..j))^2\n# Just verify function returns an int\nassert isinstance(knuth_optimization_dp(lambda i,j:0,4),int)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define divide_and_conquer_dp(cost:callable,n:int,k:int)->int implement divide&conquer optimization for k partitions (Monge).","tests":["assert isinstance(divide_and_conquer_dp(lambda i,j: (j-i)*(j-i),10,3),int)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define alien_dictionary_all_orders(words:list[str])->list[str] list all valid orders (limit small alphabets) in lex order.","tests":["res=alien_dictionary_all_orders(['ba','bc','ac','cab']); assert 'bac' in res"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define find_path_with_k_turns(grid:list[list[int]],k:int)->int minimal steps from (0,0) to (n-1,m-1) with at most k direction changes; -1 if impossible.","tests":["assert isinstance(find_path_with_k_turns([[0,0,0],[0,1,0],[0,0,0]],2),int)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_swaps_to_make_graph_bipartite(n:int,edges:list[tuple[int,int]])->int minimal node swaps between two partitions to make bipartite labeling consistent (components resolved separately).","tests":["assert isinstance(min_swaps_to_make_graph_bipartite(4,[(0,2),(1,3)]),int)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define expected_rolls_to_get_sequence(seq:list[int],sides:int)->float expected rolls to see sequence as consecutive outcomes (Aho automaton with DP).","tests":["E=expected_rolls_to_get_sequence([1,2,3],6); assert E>0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define random_spanning_tree_kirchhoff(n:int,edges:list[tuple[int,int,int]])->int number of spanning trees using Kirchhoff's Matrix-Tree theorem (weights ignored).","tests":["assert random_spanning_tree_kirchhoff(3,[(0,1,1),(1,2,1),(0,2,1)])==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define weighted_spanning_trees_count(n:int,edges:list[tuple[int,int,int]])->int using weighted Laplacian (product of weights) modulo 1e9+7.","tests":["cnt=weighted_spanning_trees_count(3,[(0,1,2),(1,2,3),(0,2,4)]); assert isinstance(cnt,int)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_vertex_cover_bipartite_set(n_left:int,adj:list[list[int]])->list[int] indices of left nodes in some minimum vertex cover (use KÅnig). Return sorted.","tests":["assert min_vertex_cover_bipartite_set(2,[[0],[0]]) in ([0],[1])"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define maximum_closure_problem(n:int,profits:list[int],edges:list[tuple[int,int]])->tuple[int,set[int]] choose subset with max profit subject to if u chosen then v chosen for each (u->v). Reduce to min-cut.","tests":["val,S=maximum_closure_problem(3,[5,-2,3],[(0,1)]); assert val==8 and 0 in S and 1 in S"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define karger_min_cut_repetitions(n:int,edges:list[tuple[int,int]],reps:int,seed:int|None=None)->int randomized contracting min-cut with repetitions; return best cut size.","tests":["assert karger_min_cut_repetitions(4,[(0,1),(1,2),(2,3),(3,0),(0,2),(1,3)],30,seed=1)==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define minimum_spanning_tree_kruskal(n:int,edges:list[tuple[int,int,int]])->int total weight of MST (Kruskal).","tests":["assert minimum_spanning_tree_kruskal(4,[(0,1,1),(1,2,2),(2,3,1),(3,0,2)])==4"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define boruvka_mst(n:int,edges:list[tuple[int,int,int]])->int MST total weight via BorÅ¯vka algorithm.","tests":["assert boruvka_mst(4,[(0,1,1),(1,2,2),(2,3,1),(3,0,2)])==4"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define dynamic_mst_offline(n:int,edges_add:list[tuple[int,int,int,int]],queries:list[tuple[int,int]])->list[int] edges_add have (u,v,w,t) time added; each query (t,0) asks current MST weight (use divide & conquer over time + DSU rollback).","tests":["ans=dynamic_mst_offline(3,[(0,1,1,0),(1,2,2,1)],[(0,0),(1,0)]); assert ans[0]==1 and ans[1]==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define rectangle_k_cover_minimum_points(rects:list[tuple[int,int,int,int]],k:int)->int minimal number of points to stab all rectangles with point multiplicity up to k per rectangle (small n brute-force).","tests":["assert isinstance(rectangle_k_cover_minimum_points([(0,0,1,1),(1,1,2,2)],1),int)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define kd_tree_knn(points:list[tuple[float,float]],q:tuple[float,float],k:int)->list[int] return indices of k nearest points (ties arbitrary).","tests":["idx=kd_tree_knn([(0,0),(1,1),(2,2)],(0.1,0.1),2); assert set(idx)=={0,1}"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define delaunay_triangulation_basic(points:list[tuple[float,float]])->list[tuple[int,int,int]] BowyerâWatson for small sets; return triangle vertex indices.","tests":["tris=delaunay_triangulation_basic([(0,0),(1,0),(0,1),(1,1)]); assert len(tris) in (2,0)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define convex_polygon_intersection_polygon(P:list[tuple[float,float]],Q:list[tuple[float,float]])->list[tuple[float,float]] return polygon vertices of intersection (SutherlandâHodgman).","tests":["A=[(0,0),(2,0),(2,2),(0,2)]; B=[(1,1),(3,1),(3,3),(1,3)]; poly=convex_polygon_intersection_polygon(A,B); assert any(abs(x-1.0)<1e-9 and abs(y-1.0)<1e-9 for x,y in poly)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define rotating_calipers_min_area_rect(points:list[tuple[float,float]])->float minimal area enclosing rectangle for convex polygon (small n).","tests":["poly=[(0,0),(2,0),(2,1),(0,1)]; assert abs(rotating_calipers_min_area_rect(poly)-2.0)<1e-6"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define k_means(points:list[tuple[float,float]],k:int,seed:int|None=None)->list[int] Lloyd's algorithm for small sets; return cluster assignment per point.","tests":["labels=k_means([(0,0),(0,1),(10,10),(10,11)],2,seed=1); assert set(labels)=={0,1} and labels[0]==labels[1] and labels[2]==labels[3]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define spectral_clustering_2_clusters(adj:list[list[float]])->list[int] compute Fiedler vector of Laplacian and bipartition by sign (ties arbitrary).","tests":["labels=spectral_clustering_2_clusters([[0,1,0,0],[1,0,1,0],[0,1,0,1],[0,0,1,0]]); assert set(labels)=={0,1}"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define pagerank_power_iter(adj:list[list[int]],d:float=0.85,eps:float=1e-9)->list[float] compute PageRank normalized to sum 1.","tests":["r=pagerank_power_iter([[0,1],[1,0]]); assert abs(sum(r)-1.0)<1e-9 and abs(r[0]-r[1])<1e-9"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define simrank_similarity(adj:list[list[int]],C:float=0.8,k:int=5)->list[list[float]] small graphs; similarity matrix with sim(i,i)=1.","tests":["S=simrank_similarity([[1],[0]],0.8,3); assert abs(S[0][0]-1.0)<1e-9 and abs(S[0][1]-S[1][0])<1e-9"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define suffix_array_sa_is(s:str)->list[int] SA-IS algorithm (n<=2000).","tests":["assert suffix_array_sa_is('banana')==[5,3,1,0,4,2]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define minimal_unique_substring_cover_all(s:str)->list[str] split into minimal number substrings so each appears only once globally (variant name).","tests":["res=minimal_unique_substring_cover_all('abcab'); assert ''.join(res)=='abcab' and len(set(res))==len(res)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define range_tree_2d(points:list[tuple[int,int]],queries:list[tuple[int,int,int,int]])->list[int] counts of points in axis-aligned rectangles (inclusive) (build + query).","tests":["pts=[(1,1),(2,2),(3,3)]; qs=[(0,0,2,2),(2,2,3,3)]; assert range_tree_2d(pts,qs)==[2,2]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define suffix_array_lcp_sparse_table(s:str)->tuple[list[int],object] build SA and ST for RMQ on LCP; provide lcp_query helper returning LCP of suffixes at i and j.","tests":["sa,st=suffix_array_lcp_sparse_table('banana'); from_idx=lambda x: x; # dummy\nassert isinstance(sa,list)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define zeta_mobius_subset(n:int,arr:list[int],mod:int)->tuple[list[int],list[int]] perform subset zeta transform and inverse (MÃ¶bius) over size 2^n.","tests":["MOD=10**9+7; f=[1,2,3,4]; z,m=zeta_mobius_subset(2,f,MOD); assert len(z)==4 and len(m)==4"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define dirichlet_convolution_prefix(f:list[int],g:list[int],n:int,mod:int)->list[int] compute h(k)=sum_{d|k} f(d)g(k/d) for k<=n (small n).","tests":["h=dirichlet_convolution_prefix([0,1,1,1,1,1,1,1,1,1],[0,1,2,3,4,5,6,7,8,9],9,10**9+7); assert h[6]==(1*6+2*3+3*2+6*1)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define mobius_mu_upto(n:int)->list[int] compute MÃ¶bius function Î¼(k) for k=1..n using sieve.","tests":["mu=mobius_mu_upto(10); assert mu[0]==1 and mu[1]==-1 and mu[3]==-1 and mu[5]==-1 and mu[9]==0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define sprague_grundy_graph_game(n:int,moves:list[list[int]])->int Grundy of starting node 0 where moves[u] lists next nodes (DAG).","tests":["assert sprague_grundy_graph_game(3,[[1,2],[2],[]])==1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define impartial_game_nimbers_heap_splitting(n:int)->int Grundy number for one heap where a move splits heap into two unequal heaps (Grundy of n).","tests":["assert impartial_game_nimbers_heap_splitting(1)==0 and impartial_game_nimbers_heap_splitting(3)>0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define xor_basis_count_subsets_with_xor(nums:list[int],target:int,mod:int)->int number of subsets with XOR==target using linear basis over GF(2).","tests":["MOD=10**9+7; assert isinstance(xor_basis_count_subsets_with_xor([1,2,3],0,MOD),int)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define gaussian_elimination_integer(A:list[list[int]],b:list[int])->tuple[bool,list[int]] exact integer solution using fraction-free elimination; return (True,sol) if unique integer solution.","tests":["ok,x=gaussian_elimination_integer([[2,3],[1,-1]],[5,1]); assert ok and x==[2,1]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define smith_normal_form(M:list[list[int]])->tuple[list[list[int]],list[list[int]],list[list[int]]] return U,D,V such that U*M*V=D diagonal (integers).","tests":["U,D,V=smith_normal_form([[2,4],[6,8]]); assert D[0][0] in (2,1)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define crt_chinese_remainder_pairwise(rema:list[int],mods:list[int])->tuple[int,int]|None compute unique solution modulo lcm if exists; use extended gcd iteratively.","tests":["assert crt_chinese_remainder_pairwise([2,3,2],[3,5,7])==(23,105)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define miller_rabin_deterministic_128(n:int)->bool primality test for 128-bit integers.","tests":["assert miller_rabin_deterministic_128(2**127-1)==True or isinstance(miller_rabin_deterministic_128(97),bool)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define pollard_rho_factor_128(n:int)->list[int] factor 128-bit integers (n>1) using MillerâRabin + Pollard Rho; return list of prime factors (any order).","tests":["fs=sorted(pollard_rho_factor_128(1000003*1000033)); assert fs==[1000003,1000033]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define discrete_log_mod_prime_power(a:int,b:int,p:int,k:int)->int|None find x s.t. a^x â¡ b (mod p^k) for odd prime p using lifting (return smallest x or None).","tests":["assert discrete_log_mod_prime_power(2,4,5,1) in (2,7,12,17)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define count_solutions_linear_diophantine(a:int,b:int,c:int,lo:int,hi:int)->int number of integer pairs (x,y) satisfying ax+by=c with x,y in [lo,hi] (small bounds).","tests":["assert count_solutions_linear_diophantine(2,3,7,0,10)==1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define mod_linear_recurrence_nth(init:list[int],coef:list[int],n:int,mod:int)->int find n-th term using linear recurrences via linear recurrences/Kitamasa or BerlekampâMassey and exponentiation.","tests":["assert mod_linear_recurrence_nth([0,1],[1,1],10,10**9+7)==55"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define baby_step_giant_step_general(a:int,b:int,m:int)->int|None discrete log for gcd(a,m)=1.","tests":["assert baby_step_giant_step_general(2,8,13)==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define quadratic_sieve_trial(n:int)->list[int] very small quadratic sieve/trial division hybrid to factor semi-primes up to ~1e10 in tests; return factors any order.","tests":["fs=sorted(quadratic_sieve_trial(1000003*1000033)); assert fs==[1000003,1000033]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define suffix_automaton_minimal_cyclic_shift(s:str)->str minimal rotation using SAM (alternative to Booth).","tests":["assert suffix_automaton_minimal_cyclic_shift('bba')=='abb'"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define shortest_common_superstring_all(strings:list[str])->str return any shortest superstring (bitmask DP).","tests":["s=shortest_common_superstring_all(['alex','loves','leetcode']); assert all(x in s for x in ['alex','loves','leetcode'])"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define edit_distance_with_transposition_weights(a:str,b:str,swap_cost:int=1)->int DamerauâLevenshtein with configurable transposition cost.","tests":["assert edit_distance_with_transposition_weights('ca','abc',1)==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define string_period_k_mismatch(s:str,k:int)->int minimal period p such that Hamming(s[i],s[i+p]) mismatches <=k over valid positions (n<=2000).","tests":["assert string_period_k_mismatch('abacaba',1)<=4"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define small_covering_array_strength2(v:int,k:int)->list[list[int]] construct small covering array CA(N;2,k,v) for small k,v by greedy (cover all pairs). Return matrix NÃk with entries 0..v-1.","tests":["A=small_covering_array_strength2(2,4); assert len(A)>0 and all(0<=x<2 for row in A for x in row)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define approximate_vertex_cover(graph:list[list[int]])->list[int] 2-approx greedy; return cover set.","tests":["vc=approximate_vertex_cover([[1],[0,2],[1]]); assert set(vc)>= {1}"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define maximum_subarray_min_times_len(nums:list[int])->int maximize min(subarray)*len(subarray).","tests":["assert maximum_subarray_min_times_len([1,2,3,2])==6"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define minimum_time_difference_circular(times:list[str])->int minimum minutes difference on circular clock (variant name).","tests":["assert minimum_time_difference_circular(['23:59','00:00'])==1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define randomized_quickselect_kth(nums:list[int],k:int,seed:int|None=None)->int return k-th smallest (1-indexed).","tests":["assert randomized_quickselect_kth([3,2,1,5,6,4],2,seed=1)==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_swaps_to_sort_by_cycles(nums:list[int])->int minimal swaps to sort an array of distinct ints by cycle decomposition.","tests":["assert min_swaps_to_sort_by_cycles([4,3,2,1])==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define earliest_meeting_time_k_people(schedules:list[list[tuple[int,int]]],k:int,duration:int)->tuple[int,int]|None earliest [start,end) that at least k people are free for duration.","tests":["res=earliest_meeting_time_k_people([[(10,50),(60,120)],[(0,15),(60,70)],[(0,20)]],2,10); assert res==(60,70)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_window_all_words_in_order(s:str,words:list[str])->str shortest substring where words appear in given order (possibly overlapping).","tests":["assert min_window_all_words_in_order('abcdebdde',['b','de'])=='bcde'"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define decode_ways_with_spaces_and_star(s:str)->int '*' for 1..9, spaces ignored; result mod 1e9+7 (variant).","tests":["assert decode_ways_with_spaces_and_star('1 *')==18"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define minimum_total_weighted_path_triangle(triangle:list[list[int]],weights:list[list[int]])->int choose one element per row; cost is sum(weights[i][j]*value).","tests":["tri=[[2],[3,4],[6,5,7],[4,1,8,3]]; W=[[1],[1,1],[1,1,1],[1,1,1,1]]; assert minimum_total_weighted_path_triangle(tri,W)==11"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define max_rectangle_area_histogram(heights:list[int])->int largest rectangle in histogram.","tests":["assert max_rectangle_area_histogram([2,1,5,6,2,3])==10"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define maximal_rectangle_binary_matrix(mat:list[list[str]])->int largest rectangle of '1's (variant name).","tests":["m=[['1','0','1','0','0'],['1','0','1','1','1'],['1','1','1','1','1'],['1','0','0','1','0']]; assert maximal_rectangle_binary_matrix(m)==6"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_sum_of_k_non_overlapping_subarrays(nums:list[int],k:int)->int minimal sum of k non-overlapping subarray sums (positive numbers).","tests":["assert min_sum_of_k_non_overlapping_subarrays([1,2,3,4,5],2)==6"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define longest_subarray_equal_0_1(nums:list[int])->int convert 0->-1 and find max length whose sum==0.","tests":["assert longest_subarray_equal_0_1([0,1,0])==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_operations_to_make_array_k_increasing(arr:list[int],k:int)->int for each modulus class, make non-decreasing with min operations (replace value).","tests":["assert min_operations_to_make_array_k_increasing([5,4,3,2,1],1)==4"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_insertions_to_balance_parens_double_close(s:str)->int '(' needs two ')' to balance (variant).","tests":["assert min_insertions_to_balance_parens_double_close('())')==0 and min_insertions_to_balance_parens_double_close('))())(')==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define kth_smallest_subarray_or(nums:list[int],k:int)->int k-th smallest bitwise OR of subarrays (n<=200).","tests":["assert isinstance(kth_smallest_subarray_or([1,2,3],3),int)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define number_of_subsequences_bounded_minmax(nums:list[int],lower:int,upper:int)->int count subsequences where min>=lower and max<=upper modulo 1e9+7 (non-empty).","tests":["assert number_of_subsequences_bounded_minmax([3,5,6,7],3,6)==6"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define subarray_minimums_sum_mod(nums:list[int])->int sum of subarray minimums modulo 1e9+7 (variant).","tests":["assert subarray_minimums_sum_mod([3,1,2,4])==17"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_abs_difference_two_subarrays(nums:list[int])->int split array into two equal halves and minimize |sum(A)-sum(B)| (n even, n<=30).","tests":["assert min_abs_difference_two_subarrays([3,9,7,3])==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define minimize_max_pair_sum(nums:list[int])->int pair elements to minimize maximum pair sum.","tests":["assert minimize_max_pair_sum([3,5,2,3])==7"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_cost_to_equalize_by_increment_decrement(nums:list[int],inc:int,dec:int)->int minimal cost to make all elements equal.","tests":["assert min_cost_to_equalize_by_increment_decrement([1,2,3],5,3)==8"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define LIS_nlogn_reconstruct(nums:list[int])->list[int] return one LIS using patience piles + backpointers.","tests":["seq=LIS_nlogn_reconstruct([10,9,2,5,3,7,101,18]); assert len(seq)==4 and all(seq[i]<seq[i+1] for i in range(len(seq)-1))"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define longest_palindromic_substring_center(s:str)->str return any longest palindrome using expand-around-center.","tests":["assert longest_palindromic_substring_center('babad') in ('bab','aba')"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define shortest_supersequence_with_words(text:str,words:list[str])->tuple[int,int]|None return indices (l,r) of shortest substring containing all words in order as subsequence.","tests":["assert shortest_supersequence_with_words('abcdebdde',['b','de'])==(1,4)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_deletions_make_string_good(s:str)->int delete chars so that freq of each char are unique (variant).","tests":["assert min_deletions_make_string_good('aaabbbcc')==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define split_string_descending_consecutive(s:str)->bool split string into descending consecutive integers without leading zeros (LC 1849).","tests":["assert split_string_descending_consecutive('1234')==False and split_string_descending_consecutive('050043')==True"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define minimize_string_value_after_removals(s:str,k:int)->int minimal sum of squares of counts after removing k characters greedily.","tests":["assert minimize_string_value_after_removals('abccc',1)==6"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define reorder_routes_to_zero(n:int,edges:list[tuple[int,int]])->int number of edges to reverse so every node reaches 0 (variant name).","tests":["assert reorder_routes_to_zero(6,[(0,1),(1,3),(2,3),(4,0),(4,5)])==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define longest_subarray_with_diff_at_most_k_abs(nums:list[int],k:int)->int using two deques for max/min (variant name).","tests":["assert longest_subarray_with_diff_at_most_k_abs([8,2,4,7],4)==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define sum_distance_after_operations(points:list[int],s:str,d:int)->int compute total pairwise distance after moving each point left or right by d depending on s[i] ('L'/'R'), modulo 1e9+7.","tests":["assert sum_distance_after_operations([1,0,4], 'RRL', 2) == sum_distance_after_operations([1,0,4], 'RRL', 2)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define eliminate_nodes_to_avoid_cycles(n:int,edges:list[tuple[int,int]])->list[int] remove minimal nodes to make DAG (small n via subset DP), return one minimal set sorted.","tests":["res=eliminate_nodes_to_avoid_cycles(3,[(0,1),(1,2),(2,0)]); assert len(res)==1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define k_shortest_walks_with_nonneg_weights(n:int,edges:list[tuple[int,int,int]],src:int,dst:int,k:int)->list[int] using modified Dijkstra (Eppstein-like) for nonnegative weights.","tests":["w=k_shortest_walks_with_nonneg_weights(4,[(0,1,1),(1,3,1),(0,2,2),(2,3,1)],0,3,3); assert w[:2]==[2,3]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define sum_over_subsets_dp(f:list[int],n:int,mod:int)->list[int] SOS DP computing F[mask]=sum f[sub] over subâmask.","tests":["F=sum_over_subsets_dp([0,1,2,3],2,10**9+7); assert F==[0,1,2,6]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_travel_cost_with_coupons(dist:list[int],coupons:list[int])->int using DP to minimize total cost where coupon reduces next leg by its value (each used once).","tests":["assert isinstance(min_travel_cost_with_coupons([10,20,30],[5,10]),int)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_inversions_after_k_rotations(arr:list[int],k:int)->int minimal inversions over all rotations up to k times around (compute via BIT + formula).","tests":["assert isinstance(min_inversions_after_k_rotations([1,3,2,4],4),int)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define segment_tree_beats_range_chmin_chmax_add_sum(arr:list[int],ops:list[tuple[str,int,int,int]])->list[int] support range chmin, chmax, add, and query sum (small constraints).","tests":["ops=[('add',0,3,2),('sum',0,3,0),('chmin',1,2,2),('sum',0,3,0)]; assert len(segment_tree_beats_range_chmin_chmax_add_sum([1,2,3,4],ops))==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define randomized_meldable_heap(ops:list[tuple[str,int]])->list[int] implement skew heap with ('push',x),('pop',0),('top',0) returning outputs for 'top'/'pop' (pop returns popped).","tests":["ops=[('push',3),('push',1),('top',0),('pop',0),('top',0)]; assert randomized_meldable_heap(ops)==[1,1,3]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define splay_tree_sequence(ops:list[tuple[str,int]])->list[int] simple splay tree with ('insert',x),('erase',x),('kth',k)->value,('rank',x)->#<x.","tests":["ops=[('insert',5),('insert',1),('insert',3),('kth',2),('rank',4),('erase',3),('kth',2)]; assert splay_tree_sequence(ops)==[3,2,5]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define treap_with_lazy_reverse(ops:list[tuple[str,int,int]])->list[str] implicit treap with range reverse and report string; operations ('build',0,0) uses internal example, ('rev',l,r).","tests":["res=treap_with_lazy_reverse([('build',0,0),('rev',1,3)]); assert isinstance(res,list)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define time_series_segmentation_least_squares(y:list[float],k:int)->float minimal squared error by partitioning into k contiguous segments with constant mean (DP with prefix sums).","tests":["err=time_series_segmentation_least_squares([1,2,3,10,10,10],2); assert err<1.0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define median_of_distances(points:list[tuple[int,int]])->float median of pairwise Euclidean distances (n<=60; compute all pairs).","tests":["assert abs(median_of_distances([(0,0),(3,4),(0,4)])-4.0)<1e-9"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define earth_movers_distance_1d(a:list[int],b:list[int])->int EMD between histograms a and b on 1D bins.","tests":["assert earth_movers_distance_1d([1,0,0],[0,0,1])==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define hungarian_max(cost:list[list[int]])->int maximum assignment by converting to min-cost.","tests":["assert hungarian_max([[4,1,3],[2,0,5],[3,2,2]])==9"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_weight_cycle_directed(n:int,edges:list[tuple[int,int,int]])->int minimum directed cycle weight using min-plus closure (n<=60).","tests":["w=min_weight_cycle_directed(3,[(0,1,2),(1,2,3),(2,0,4)]); assert w==9"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define max_bipartite_matching_dinic(left:int,adj:list[list[int]])->int faster matching via Dinic on bipartite graph.","tests":["assert max_bipartite_matching_dinic(2,[[0,1],[0]])==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define sparse_table_gcd(arr:list[int])->tuple and gcd_query(st,lg,l,r)->int RMQ for GCD.","tests":["st,lg=sparse_table_gcd([2,4,6,8,10]); assert gcd_query(st,lg,1,3)==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define binary_lifting_kth_ancestor(n:int,edges:list[tuple[int,int]],root:int,queries:list[tuple[int,int]])->list[int] query (u,k) kth ancestor or -1.","tests":["n=5;e=[(0,1),(0,2),(1,3),(1,4)]; qs=[(3,1),(4,2),(2,1)]; assert binary_lifting_kth_ancestor(n,e,0,qs)==[1,0,-1]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define dynamic_tree_euler_tour_range_update_query(n:int,edges:list[tuple[int,int]],values:list[int],queries:list[tuple[str,int,int,int]])->list[int] flatten tree, support ('add',u,v,x) path add and ('sum',u,v,0) path sum using HLD + BIT; small n.","tests":["n=5;e=[(0,1),(1,2),(1,3),(3,4)];val=[1,2,3,4,5];qs=[('sum',2,4,0),('add',1,3,2),('sum',2,4,0)]; assert dynamic_tree_euler_tour_range_update_query(n,e,val,qs)==[14,18]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define directed_mst_edmonds(root:int,n:int,edges:list[tuple[int,int,int]])->int directed MST (variant name).","tests":["assert directed_mst_edmonds(0,3,[(0,1,1),(0,2,5),(1,2,1),(2,1,1)])==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_weight_arborescence_with_constraints(root:int,n:int,edges:list[tuple[int,int,int]],mandatory:list[tuple[int,int]])->int find min arborescence containing mandatory edges (small graphs).","tests":["assert isinstance(min_weight_arborescence_with_constraints(0,3,[(0,1,1),(1,2,1),(0,2,3)],[(0,1)]),int)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define hopcroft_karp_with_reconstruction(left:int,adj:list[list[int]])->tuple[int,list[tuple[int,int]]] matching size and pairs (u,v).","tests":["m,p=hopcroft_karp_with_reconstruction(2,[[0,1],[0]]); assert m==2 and len(p)==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_cut_karger_stein(n:int,edges:list[tuple[int,int]],reps:int,seed:int|None=None)->int randomized KargerâStein; return best cut.","tests":["assert min_cut_karger_stein(4,[(0,1),(1,2),(2,3),(3,0),(0,2),(1,3)],50,seed=1)==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define bcj_polynomial_multiply(a:list[int],b:list[int],mod:int)->list[int] multiply using FFT over doubles then round, but verify with convolution modulo mod (small).","tests":["assert bcj_polynomial_multiply([1,2,3],[4,5],10**9+7)==[4,13,22,15]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define nth_term_linear_recurrence_with_charpoly(init:list[int],coef:list[int],n:int,mod:int)->int using characteristic polynomial exponentiation (linear recurrences).","tests":["assert nth_term_linear_recurrence_with_charpoly([0,1],[1,1],10,10**9+7)==55"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define mod_pow_tetration(a:int,levels:int,m:int)->int compute a^^levels mod m using Euler lifting where possible (levels>=1).","tests":["assert isinstance(mod_pow_tetration(3,3,100),int)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define digraph_minimum_feedback_arc_set_bruteforce(n:int,weights:list[list[int]])->int minimum FAS weight for very small n<=10 via DP over permutations.","tests":["w=digraph_minimum_feedback_arc_set_bruteforce(4,[[0,1,1,1],[0,0,1,1],[0,0,0,1],[0,0,0,0]]); assert isinstance(w,int)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_sum_path_grid_3dir(grid:list[list[int]])->int move right/right-down/right-up (wrap not allowed), minimal sum from leftmost column to rightmost.","tests":["assert min_sum_path_grid_3dir([[1,2,3],[4,5,6],[7,8,9]])==12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define max_sum_path_grid_3dir(grid:list[list[int]])->int maximize sum under same movement.","tests":["assert max_sum_path_grid_3dir([[1,2,3],[4,5,6],[7,8,9]])==24"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define count_palindromic_paths_dag(n:int,edges:list[tuple[int,int]],labels:str)->int number of palindromic paths from 0 to n-1 (small DAG via DP with meet from both ends).","tests":["assert isinstance(count_palindromic_paths_dag(3,[(0,1),(1,2)],'aba'),int)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_changes_to_make_k_anagrams(a:str,b:str,k:int)->bool (variant) can make k-anagrams in at most k changes.","tests":["assert min_changes_to_make_k_anagrams('anagram','grammar',3)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define minimal_perfect_hash_fks(keys:list[int],m:int,seed:int|None=None)->tuple[list[int],int] build FKS 2-level hash tables; return second-level sizes and total slots; for testing, just ensure all keys map uniquely.","tests":["tbl,tot=minimal_perfect_hash_fks([1,3,5,7],8,seed=1); assert isinstance(tot,int)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define consistent_hashing_ring(nodes:list[str],replicas:int,keys:list[str])->dict[str,str] map keys to node labels via hashing to ring with replicas; deterministic via built-in hash seeded to 0 (simulate with custom).","tests":["m=consistent_hashing_ring(['A','B'],3,['k1','k2','k3']); assert set(m.values())<={'A','B'}"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define lru_k_cache(k:int,capacity:int,ops:list[tuple[str,int,int]])->list[int] LRU-K variant: promote to cache when an item has been accessed k times; operations ('get',key,0) and ('put',key,value). Return outputs of gets (-1 miss).","tests":["out=lru_k_cache(2,2,[('put',1,1),('get',1,0),('get',1,0),('put',2,2),('get',2,0)]); assert out==[-1,1,2]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define consistent_topological_sort_stream(n:int,prereqs_stream:list[tuple[int,int]])->list[int] process edges and at end output any topo order or [] if cycle (Kahn with dynamic updates).","tests":["order=consistent_topological_sort_stream(3,[(0,1),(1,2)]); assert order in ([0,1,2],[0,2,1])"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define randomized_incremental_convex_hull(points:list[tuple[float,float]],seed:int|None=None)->list[tuple[float,float]] return hull CCW.","tests":["h=randomized_incremental_convex_hull([(0,0),(1,0),(0,1),(1,1),(0.5,0.5)]); assert set(h)=={(0,0),(1,0),(1,1),(0,1)}"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define farthest_pair_rotating_calipers(points:list[tuple[float,float]])->tuple[int,int,float] return indices and squared distance of farthest pair (diameter).","tests":["i,j,d=farthest_pair_rotating_calipers([(0,0),(2,0),(2,2),(0,2)]); assert int(d)==8"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define line_segment_union_length(segments:list[tuple[int,int]])->int union length for 1D segments (closed-open).","tests":["assert line_segment_union_length([(1,3),(2,5),(6,8)])==5"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define kruskal_reconstruct_path_in_mst(n:int,edges:list[tuple[int,int,int]],u:int,v:int)->int total weight along MST path between u and v.","tests":["w=kruskal_reconstruct_path_in_mst(4,[(0,1,1),(1,2,2),(2,3,1),(3,0,2)],0,2); assert w in (3,4)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_number_of_taxis(intervals:list[tuple[int,int]])->int minimal taxis to cover all ride intervals (same as rooms).","tests":["assert min_number_of_taxis([(0,30),(5,10),(15,20)])==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define sparse_linear_assignment(cost:list[list[int]])->int minimal cost assignment for sparse matrix using Hungarian or successive shortest path (small).","tests":["assert sparse_linear_assignment([[9,2,7],[6,4,3],[5,8,1]])==13"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define longest_cycle_in_directed_graph(edges:list[int])->int edges[i] is outgoing neighbor or -1; return length of longest cycle.","tests":["assert longest_cycle_in_directed_graph([3,3,4,2,3])==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_ops_to_make_symmetric_matrix(mat:list[list[int]])->int make matrix symmetric by changing elements to median in each symmetric orbit (i,j),(j,i).","tests":["assert min_ops_to_make_symmetric_matrix([[1,2],[3,4]])==1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define shortest_path_with_edge_block(n:int,edges:list[tuple[int,int,int]],src:int,dst:int,blocked:tuple[int,int])->int shortest path avoiding one specific directed edge.","tests":["assert shortest_path_with_edge_block(3,[(0,1,1),(1,2,1),(0,2,3)],0,2,(0,1))==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_sum_partition_with_max_diff(nums:list[int],k:int)->int partition into k contiguous parts minimizing sum of (max-min) in each part (DP).","tests":["assert isinstance(min_sum_partition_with_max_diff([1,5,6,2,3],2),int)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define best_line_through_points(points:list[tuple[int,int]])->tuple[int,int,int] return normalized line coefficients ax+by+c=0 with gcd(a,b,c)=1 representing line through max points.","tests":["a,b,c=best_line_through_points([(1,1),(2,2),(3,3),(1,2)]); assert a*1+b*1+c==0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_time_make_rope_colorful(colors:str,neededTime:list[int])->int remove minimal time so adjacent colors differ (LC 1578).","tests":["assert min_time_make_rope_colorful('abaac',[1,2,3,4,5])==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define minimize_maximum_difference_after_m_changes(nums:list[int],m:int)->int for each change you can increment/decrement one element by 1; minimize difference between max and min after m changes (binary search).","tests":["assert isinstance(minimize_maximum_difference_after_m_changes([1,10],5),int)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define minimize_days_to_make_m_bouquets(bloom:list[int],m:int,k:int)->int (variant name).","tests":["assert minimize_days_to_make_m_bouquets([1,10,3,10,2],3,1)==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define minimize_total_absolute_deviation(arr:list[int])->int minimal sum |x-a_i| achieved at median.","tests":["assert minimize_total_absolute_deviation([1,2,3,4])==4"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define maximize_total_squared_deviation(arr:list[int])->int maximal sum (x-a_i)^2 occurs at extremes; return value at optimal x (real).","tests":["assert abs(maximize_total_squared_deviation([1,2,3])- ( (3-2)**2+(3-2)**2+(3-2)**2 ) )<1e-9 or True"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define celsius_to_kelvin(c:float)->float using K=C+273.15.","tests":["assert abs(celsius_to_kelvin(25.0)-298.15)<1e-9; assert abs(celsius_to_kelvin(-273.15)-0.0)<1e-9"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define kmh_to_ms(v:float)->float converting km/h to m/s.","tests":["assert abs(kmh_to_ms(36)-10.0)<1e-9; assert abs(kmh_to_ms(72)-20.0)<1e-9"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define kinematics_1d(u:float,a:float,t:float)->tuple[float,float] returning (s,v) where s=ut+0.5at^2 and v=u+at.","tests":["s,v=kinematics_1d(5,2,3); assert abs(s-24)<1e-9 and abs(v-11)<1e-9"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define projectile_range(v0:float,theta_deg:float,g:float=9.81)->float ignoring air resistance (R=v0^2*sin(2Î¸)/g).","tests":["assert abs(projectile_range(10,45)-10.19368)<1e-3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define projectile_max_height(v0:float,theta_deg:float,g:float=9.81)->float (H=v0^2*sin^2Î¸/(2g)).","tests":["assert abs(projectile_max_height(10,45)-2.549)<1e-3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define shm_position(A:float,f_hz:float,t:float,phi:float=0.0)->float computing x(t)=A*cos(2Ïft+Ï).","tests":["assert abs(shm_position(2,0.5,1,0)-(-2))<1e-9"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define radioactive_decay(N0:float,half_life:float,t:float)->float computing N(t)=N0*2^(-t/half_life).","tests":["assert abs(radioactive_decay(100,2,2)-50)<1e-9; assert abs(radioactive_decay(100,2,3)-35.3553390593)<1e-6"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define rc_discharge(V0:float,R:float,C:float,t:float)->float computing V(t)=V0*exp(-t/(RC)).","tests":["assert abs(rc_discharge(5.0,10_000.0,100e-6,1.0)-5.0/2.718281828459045)<1e-6"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define parallel_resistance(ohms:list[float])->float computing equivalent of resistors in parallel.","tests":["assert abs(parallel_resistance([100,200,300])-54.5454545455)<1e-6"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define solve_two_loop_linear(R11:float,R12:float,R22:float,V1:float,V2:float)->tuple[float,float] solving 2Ã2 system: R11*I1+R12*I2=V1 and R12*I1+R22*I2=V2.","tests":["i1,i2=solve_two_loop_linear(3,1,2,5,5); assert abs(i1-1)<1e-9 and abs(i2-2)<1e-9"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define thin_lens(f:float,do_:float)->tuple[float,float] returning (di,m) using 1/f=1/do+1/di and magnification m=-di/do.","tests":["di,m=thin_lens(10.0,30.0); assert abs(di-15.0)<1e-9 and abs(m+0.5)<1e-9"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define critical_angle_deg(n1:float,n2:float)->float returning Î¸c in degrees for n1>n2 using arcsin(n2/n1).","tests":["assert abs(critical_angle_deg(1.5,1.0)-41.8103149)<1e-4"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define doppler_source_toward_observer(f:float,vs:float,c:float=343.0)->float frequency heard for moving source toward stationary observer: f' = f*c/(c-vs).","tests":["assert abs(doppler_source_toward_observer(440,34.3)-488.8888889)<1e-6"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define lorentz_gamma(v:float,c:float=299792458.0)->float (Î³=1/sqrt(1-v^2/c^2)).","tests":["assert abs(lorentz_gamma(0.6*299792458)-1.25)<1e-12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define relativistic_addition(u:float,v:float,c:float=299792458.0)->float returning (u+v)/(1+uv/c^2).","tests":["w=relativistic_addition(0.7*299792458,0.7*299792458); assert abs(w/299792458-0.939597315)<1e-6"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define wien_temperature(lambda_max_m:float)->float using T=b/Î» with b=2.897771955e-3 mÂ·K.","tests":["assert abs(wien_temperature(500e-9)-5795.54391)<5"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define stefan_boltzmann_temperature(P:float,A:float)->float returning T=(P/(ÏA))^(1/4), Ï=5.670374419e-8.","tests":["sigma=5.670374419e-8; P=sigma*(300.0**4); assert abs(stefan_boltzmann_temperature(P,1.0)-300.0)<1e-6"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define half_life_from_lambda(lmbda:float)->float returning ln(2)/Î».","tests":["import math; assert abs(half_life_from_lambda(math.log(2)/3)-3.0)<1e-12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define ideal_gas_pressure(n:float,T:float,V:float)->float using P=nRT/V with R=8.314462618.","tests":["assert abs(ideal_gas_pressure(1.0,273.15,22.414e-3)-101325)<50"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define adiabatic_T2_from_V2(T1:float,V1:float,V2:float,gamma:float)->float using T V^{Î³-1}=const.","tests":["assert abs(adiabatic_T2_from_V2(300.0,1.0,0.5,1.4)-395.861)<0.1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define speed_of_sound_air(T:float)->float using c=sqrt(Î³ R_s T) with Î³=1.4 and R_s=287 J/kg/K.","tests":["assert abs(speed_of_sound_air(300.0)-347.2)<1.5"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define circular_orbit_speed(mu:float,r:float)->float returning v=sqrt(mu/r). Use mu=3.986004418e14 for Earth.","tests":["v=circular_orbit_speed(3.986004418e14,6371e3+400e3); assert abs(v-7670)<100"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define surface_gravity(G:float,M:float,R:float)->float (g=GM/R^2). Use G=6.67430e-11 for Earth calculation.","tests":["g=surface_gravity(6.67430e-11,5.972e24,6.371e6); assert 9.7<g<9.9"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define pendulum_period_small_angle(L:float,g:float=9.81)->float using T=2Ïâ(L/g).","tests":["assert abs(pendulum_period_small_angle(0.994)-2.0)<1e-3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define floating_fraction_submerged(rho_object:float,rho_fluid:float)->float for floating object (Ï_obj/Ï_fluid).","tests":["assert abs(floating_fraction_submerged(600,1000)-0.6)<1e-12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define bernoulli_velocity(delta_p:float,rho:float)->float using v=sqrt(2ÎP/Ï).","tests":["assert abs(bernoulli_velocity(4905,1000)-3.13209195)<1e-6"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define rayleigh_resolution_rad(lambda_m:float,aperture_m:float)->float Î¸â1.22 Î»/D (radians).","tests":["assert abs(rayleigh_resolution_rad(550e-9,0.1)-6.71e-6)<1e-8"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define photon_energy_ev(lambda_m:float)->float using E=hc/Î» and 1 eV=1.602176634e-19 J.","tests":["assert abs(photon_energy_ev(500e-9)-2.47968)<1e-3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define de_broglie_wavelength(m:float,v:float)->float using Î»=h/(mv), h=6.62607015e-34.","tests":["assert abs(de_broglie_wavelength(9.10938356e-31,1e6)-7.274e-10)<1e-12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define boltzmann_population_ratio(delta_E_eV:float,T:float,g1:int=1,g2:int=1)->float return N2/N1=(g2/g1)*exp(-ÎE/(k_B T)), k_B=8.617333262e-5 eV/K.","tests":["assert abs(boltzmann_population_ratio(0.1,300)-0.0209)<2e-4"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define most_probable_speed_MB(T:float,m_amu:float)->float using v_mp=sqrt(2 k_B T / m) with m=m_amu*1.66053906660e-27 kg and k_B=1.380649e-23.","tests":["assert abs(most_probable_speed_MB(300,28)-422.0)<2.0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define molar_mass(formula:str)->float parsing element symbols with counts and parentheses using approximate atomic masses: H=1.008, C=12.011, N=14.007, O=15.999, Na=22.990, Cl=35.45, K=39.098, S=32.06, P=30.974, Ca=40.078, Mg=24.305.","tests":["mm=molar_mass('H2O'); assert abs(mm-18.015)<0.01; glc=molar_mass('C6H12O6'); assert abs(glc-180.156)<0.05; assert abs(molar_mass('(NH4)2SO4')-132.14)<0.1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define theoretical_yield_NH3(mass_N2_g:float,mass_H2_g:float)->float grams NH3 produced for N2+3H2â2NH3 using molar masses N2=28.014, H2=2.016, NH3=17.031.","tests":["assert abs(theoretical_yield_NH3(28.014,10.08)-34.062)<1e-3; assert abs(theoretical_yield_NH3(56.028,2.016)-17.031)<1e-3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define ph_strong_acid(C:float)->float pH=-log10(C) for monoprotic strong acid.","tests":["import math; assert abs(ph_strong_acid(1e-3)-3.0)<1e-12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define henderson_hasselbalch(pKa:float,base:float,acid:float)->float pH=pKa+log10([base]/[acid]).","tests":["assert abs(henderson_hasselbalch(4.76,1.0,1.0)-4.76)<1e-9; assert abs(henderson_hasselbalch(4.76,2.0,1.0)-5.061)<1e-3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define K_from_deltaG(deltaG_J_per_mol:float,T:float)->float using ÎGÂ°=-RT ln K (R=8.314462618).","tests":["assert abs(K_from_deltaG(-5000,298)-7.52)<0.1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define nernst(E0:float,n:int,T:float,Q:float)->float E=E0-(RT/(nF)) ln Q with R=8.314462618, F=96485.33212.","tests":["assert abs(nernst(1.0,2,298,10)-0.9704)<1e-3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define first_order_concentration(C0:float,k:float,t:float)->float C=C0*exp(-kt).","tests":["assert abs(first_order_concentration(1.0,0.69314718056,1.0)-0.5)<1e-6"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define arrhenius(A:float,Ea_J_per_mol:float,T:float)->float k=A*exp(-Ea/(RT)), R=8.314462618.","tests":["assert abs(arrhenius(1e13,50_000,298)-1.75e4)<1e3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define henry_law_concentration(kH:float,partial_pressure_atm:float)->float concentration c=kH*p (mol/L).","tests":["assert abs(henry_law_concentration(1e-3,0.21)-2.1e-4)<1e-12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define dalton_partial_pressure(moles:dict[str,float],total_pressure_atm:float,species:str)->float using P_i = y_i * P_total.","tests":["P=dalton_partial_pressure({'O2':1,'N2':3},1.0,'O2'); assert abs(P-0.25)<1e-12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define hardy_weinberg_counts(p:float,N:int)->tuple[int,int,int] returning integer counts (AA,Aa,aa) rounded to nearest int.","tests":["assert hardy_weinberg_counts(0.6,100)==(36,48,16)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define gc_content(seq:str)->float returning percentage GC (0..100) ignoring non-ACGT chars.","tests":["assert abs(gc_content('ATGC')-50.0)<1e-9; assert abs(gc_content('ggcc')-100.0)<1e-9"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define michaelis_menten(Vmax:float,Km:float,S:float)->float v=Vmax*S/(Km+S).","tests":["assert abs(michaelis_menten(100,10,10)-50.0)<1e-9"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define logistic_population(N0:float,r:float,K:float,t:float)->float N(t)=K/(1+((K-N0)/N0)*exp(-rt)).","tests":["assert abs(logistic_population(10,0.5,100,0)-10)<1e-9; assert logistic_population(10,0.5,100,10)<100"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define sir_euler_step(S:float,I:float,R:float,beta:float,gamma:float,dt:float)->tuple[float,float,float] one explicit Euler step with total N=S+I+R.","tests":["S,I,R=sir_euler_step(999,1,0,0.3,0.1,1.0); assert abs(S-998.7003)<1e-3 and abs(I-1.1997)<1e-3 and abs(R-0.1)<1e-6"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define selection_next_gen(p:float,w_AA:float,w_Aa:float,w_aa:float)->float allele A frequency next generation under viability selection.","tests":["assert abs(selection_next_gen(0.5,1.0,1.0,0.9)-0.5128205128)<1e-6"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define diffusion_1d_explicit_step(C:list[float],D:float,dt:float,dx:float)->list[float] Neumann (zero-flux) at boundaries.","tests":["res=diffusion_1d_explicit_step([0.0,1.0,0.0],0.1,0.4,1.0); assert all(abs(a-b)<1e-6 for a,b in zip(res,[0.08,0.92,0.08]))"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define competitive_inhibition_rate(Vmax:float,Km:float,S:float,I:float,Ki:float)->float with Î±=1+I/Ki and v=Vmax*S/(Î±Km+S).","tests":["assert abs(competitive_inhibition_rate(100,10,10,10,10)-33.3333333)<1e-6"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define punnett_genotype_probs(p1:str,p2:str)->dict[str,float] for diploid alleles like 'Aa' vs 'Aa' returning probs for 'AA','Aa','aa'.","tests":["d=punnett_genotype_probs('Aa','Aa'); assert abs(d['AA']-0.25)<1e-12 and abs(d['Aa']-0.5)<1e-12 and abs(d['aa']-0.25)<1e-12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define translate_rna(seq:str)->str translate 5'â3' RNA to amino acids using minimal codon map with start anywhere and stop on UAA/UAG/UGA; use standard 1-letter codes; unknown codons as 'X'.","tests":["assert translate_rna('AUGUUUUGA')=='MF'; assert translate_rna('AUGUUC')=='MF'"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define kepler_E_from_M(e:float,M:float,iters:int=20)->float solve E-e sinE=M by Newton's method.","tests":["E=kepler_E_from_M(0.1,1.0); import math; assert abs((E-0.1*math.sin(E))-1.0)<1e-12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define linear_convolution(a:list[float],b:list[float])->list[float] (full discrete convolution).","tests":["assert linear_convolution([1,2,3],[4,5])==[4,13,22,15]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define regression_slope(x:list[float],y:list[float])->float least-squares slope for yâmx+c.","tests":["m=regression_slope([1,2,3],[2.0,4.0,6.0]); assert abs(m-2.0)<1e-12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define voltage_divider(Vin:float,R1:float,R2:float)->float Vout=Vin*R2/(R1+R2).","tests":["assert abs(voltage_divider(12,1000,1000)-6.0)<1e-12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define linear_thermal_expansion(L0:float,alpha:float,delta_T:float)->float ÎL=Î± L0 ÎT.","tests":["assert abs(linear_thermal_expansion(1.0,12e-6,100)-0.0012)<1e-12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define pKa_from_Ka(Ka:float)->float and Ka_from_pKa(pKa:float)->float.","tests":["import math; assert abs(pKa_from_Ka(1e-5)-5.0)<1e-12; assert abs(Ka_from_pKa(5.0)-1e-5)<1e-12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define osmotic_pressure(C_mol_per_L:float,T:float,i:float=1.0)->float Î =i*C*R*T with R=8.314462618 and C in mol/m^3.","tests":["assert abs(osmotic_pressure(0.1,298)-247756.7)<1000"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define beer_lambert_absorbance(epsilon:float,c:float,ell:float)->float A=Îµ c â (Îµ in L/mol/cm, c in mol/L, â in cm).","tests":["assert abs(beer_lambert_absorbance(100.0,0.01,1.0)-1.0)<1e-12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define equilibrium_conversion_A_to_B(K:float,nA0:float,nB0:float)->float for AâB, find x maximizing nonnegative solution of K=(nB0+x)/(nA0-x).","tests":["assert abs(equilibrium_conversion_A_to_B(4.0,1.0,0.0)-0.8)<1e-12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define first_order_rate_constant_from_data(C0:float,Ct:float,t:float)->float k=(1/t)ln(C0/Ct).","tests":["assert abs(first_order_rate_constant_from_data(10.0,3.678794411,1.0)-1.0)<1e-6"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define graham_effusion_ratio(M1:float,M2:float)->float r1_over_r2=sqrt(M2/M1).","tests":["import math; assert abs(graham_effusion_ratio(4.0,32.0)-math.sqrt(8.0))<1e-12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define mix_strong_acid_base_pH(Va_L:float,Ca:float,Vb_L:float,Cb:float)->float assuming HCl+NaOHâNaCl+H2O, ideal volumes add, 25Â°C.","tests":["pH=mix_strong_acid_base_pH(0.01,0.1,0.008,0.1); assert abs(pH-1.954242509)<1e-6"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define doubling_time(N0:float,Nt:float,elapsed:float)->float population doubling time Td given Nt=N0*2^(t/Td).","tests":["assert abs(doubling_time(100,800,6.0)-2.0)<1e-12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define dna_melting_temp_wallace(seq:str)->int Tmâ2*(A+T)+4*(G+C) in Â°C (uppercase/lowercase ignored).","tests":["assert dna_melting_temp_wallace('ATGC')==12 and dna_melting_temp_wallace('ATAT')==8"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define basic_reproduction_number(beta:float,gamma:float)->float R0=beta/gamma for SIR.","tests":["assert abs(basic_reproduction_number(0.3,0.1)-3.0)<1e-12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define rms_brownian_displacement(D:float,t:float)->float â(2Dt).","tests":["import math; assert abs(rms_brownian_displacement(1.0,1.0)-math.sqrt(2.0))<1e-12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define fick_flux_1d(D:float,C1:float,C2:float,dx:float)->float J=-D*(C2-C1)/dx.","tests":["assert abs(fick_flux_1d(1.0,10.0,0.0,2.0)+5.0)<1e-12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define nyquist_rate(f_max:float)->float minimal sampling rate 2*f_max.","tests":["assert nyquist_rate(1000.0)==2000.0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define shannon_entropy(p:list[float])->float entropy in bits; treat 0 log 0 as 0; assume sumâ1.","tests":["assert abs(shannon_entropy([0.5,0.5])-1.0)<1e-12; assert abs(shannon_entropy([1.0])-0.0)<1e-12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define db_ratio(P2:float,P1:float)->float returning 10*log10(P2/P1).","tests":["assert abs(db_ratio(2.0,1.0)-3.0102999566)<1e-9"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define poisson_pmf(k:int,lam:float)->float P(k;Î»)=e^{-Î»}Î»^k/k!.","tests":["import math; assert abs(poisson_pmf(3,2.0)- (math.exp(-2)*8/6))<1e-12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define stationary_dist_2x2(P:list[list[float]])->tuple[float,float] stationary distribution Ï for 2Ã2 stochastic matrix [[a,1-a],[b,1-b]].","tests":["pi=stationary_dist_2x2([[0.9,0.1],[0.2,0.8]]); assert abs(pi[0]-2/3)<1e-6 and abs(pi[1]-1/3)<1e-6"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define rk4_step(f, t:float, y:float, h:float)->float one RungeâKutta 4 step for y' = f(t,y).","tests":["import math; f=lambda t,y:y; y1=rk4_step(f,0.0,1.0,0.1); assert abs(y1-math.e**0.1)<1e-4"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define finite_difference_derivative(f, x:float, h:float=1e-6)->float central difference approximation of f'(x).","tests":["import math; assert abs(finite_difference_derivative(math.sin,1.0)-math.cos(1.0))<1e-6"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define simpson_integral(f,a:float,b:float,n:int)->float composite Simpson with n even subintervals.","tests":["import math; val=simpson_integral(math.sin,0.0,math.pi,100); assert abs(val-2.0)<1e-7"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define haversine_distance_km(lat1:float,lon1:float,lat2:float,lon2:float)->float Earth radius 6371 km.","tests":["d=haversine_distance_km(0,0,0,1); assert abs(d-111.195)<0.5"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define gaussian_pdf(x:float,mu:float,sigma:float)->float standard normal PDF formula.","tests":["import math; assert abs(gaussian_pdf(0,0,1)-1/math.sqrt(2*math.pi))<1e-12; assert abs(gaussian_pdf(1,0,1)-0.2419707245)<1e-9"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define two_state_quantum_prob(alpha:complex,beta:complex)->float probability of measuring |1â© given normalized state Î±|0â©+Î²|1â©.","tests":["p=two_state_quantum_prob(1/2**0.5,1/2**0.5); assert abs(p-0.5)<1e-12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define pauli_x_on_qubit(alpha:complex,beta:complex)->tuple[complex,complex] applying Ï_x swaps amplitudes.","tests":["a,b=pauli_x_on_qubit(1+0j,0+0j); assert a==0 and b==1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define bevs_law_voltages(Vin:float,R:float,C:float,t:float)->float compute step response of RC (voltage across capacitor): Vc=Vin*(1-exp(-t/(RC))).","tests":["assert abs(bevs_law_voltages(5.0,10000.0,100e-6,1.0)-(5*(1-1/2.718281828459045)))<1e-6"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define hydrostatic_pressure(rho:float,g:float,h:float)->float P=Ïgh.","tests":["assert abs(hydrostatic_pressure(1000,9.81,10)-98100)<1e-6"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define reynolds_number(rho:float,v:float,L:float,mu:float)->float Re=Ï v L / Î¼.","tests":["assert abs(reynolds_number(1000,2,0.05,1e-3)-100000)<1e-9"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define terminal_velocity_sphere(rho_f:float,mu:float,r:float,rho_s:float,g:float=9.81)->float Stokes' law v=2/9 * r^2 (Ï_s-Ï_f) g / Î¼ (for small Re).","tests":["v=terminal_velocity_sphere(1000,1e-3,0.001,1100); assert 2.0<v<3.0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define capillary_rise(h:float,rho:float,g:float,gamma:float,theta_deg:float,radius:float)->float check Jurin's law h=2Î³ cosÎ¸/(Ï g r). Return absolute difference between predicted and given h.","tests":["err=capillary_rise(0.015,1000,9.81,0.072,0,0.001); assert abs(err)<1e-6"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define ideal_transformer(Vp:int,Np:int,Ns:int)->int output VsâVp*(Ns/Np) rounded to nearest int.","tests":["assert ideal_transformer(120,100,50)==60 and ideal_transformer(120,50,100)==240"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define coulomb_force(q1:float,q2:float,r:float)->float magnitude using k=8.9875517923e9: F=k|q1 q2|/r^2.","tests":["assert abs(coulomb_force(1e-6,2e-6,0.1)-1.79751035846)<1e-9"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define rlc_resonant_frequency(L:float,C:float)->float f0=1/(2Ïâ(LC)).","tests":["import math; assert abs(rlc_resonant_frequency(1e-3,1e-6)- (1/(2*math.pi*(1e-3*1e-6)**0.5)))<1e-12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define lensmaker_focal_length(n:float,R1:float,R2:float)->float thin lens: 1/f=(n-1)(1/R1-1/R2) (meters); convex surface positive R.","tests":["f=1/((1.5-1)*(1/0.1 - 1/(-0.1))); assert abs(lensmaker_focal_length(1.5,0.1,-0.1)-f)<1e-9"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define eigenvalues_2x2(a:float,b:float,c:float,d:float)->tuple[complex,complex] eigenvalues of [[a,b],[c,d]].","tests":["lam1,lam2=eigenvalues_2x2(1,2,3,4); import cmath; tr=5; det=-2; assert abs((lam1+lam2)-tr)<1e-9 and abs((lam1*lam2)-det)<1e-9"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define monte_carlo_pi(n:int,seed:int=0)->float estimate Ï by sampling in unit square; return float.","tests":["p=monte_carlo_pi(10000,seed=42); assert 3.0<p<3.3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define planck_radiance_lambda(lambda_m:float,T:float)->float spectral radiance B_Î»(T)=(2*h*c**2/lambda^5)/(exp(h*c/(lambda*k_B*T))-1). Use h=6.62607015e-34, c=2.99792458e8, k_B=1.380649e-23.","tests":["import math; val=planck_radiance_lambda(500e-9,5778); assert 2.6e13<val<2.9e13"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define fermi_dirac(E:float,Ef:float,T:float)->float occupancy f=1/(1+exp((E-Ef)/(k_B T))) with k_B=8.617333262e-5 eV/K; handle T=0 with step function.","tests":["assert abs(fermi_dirac(1.0,1.0,300)-0.5)<1e-12; assert fermi_dirac(0.9,1.0,0.0)==1.0 and fermi_dirac(1.1,1.0,0.0)==0.0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define bose_einstein(E:float,T:float)->float occupation number n=1/(exp(E/(k_B T))-1) with k_B=8.617333262e-5 eV/K; if T=0 return 0.","tests":["n=bose_einstein(0.5,300); assert 0<n<1e-8; assert bose_einstein(0.1,0)==0.0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define two_level_partition(beta:float,delta_E:float)->float canonical partition function Z=1+exp(-beta*delta_E) for levels 0 and ÎE.","tests":["import math; assert abs(two_level_partition(1.0,0.0)-2.0)<1e-12; assert abs(two_level_partition(1.0,math.log(3))- (1+1/3))<1e-12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define blackbody_peak_lambda(T:float)->float peak wavelength via Wien's law Î»_max=b/T with b=2.897771955e-3 mÂ·K.","tests":["assert abs(blackbody_peak_lambda(5800)-4.99616e-7)<1e-9"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define circular_loop_B_center(I:float,R:float)->float magnetic field at center B=Î¼0 I/(2R) with Î¼0=4ÏÃ1e-7.","tests":["import math; assert abs(circular_loop_B_center(10.0,0.1)-(4*math.pi*1e-7*10/(0.2)))<1e-12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define kepler_third_period(a_m:float,mu:float=3.986004418e14)->float orbital period T=2Ïâ(a^3/Î¼).","tests":["import math; T=kepler_third_period(7000e3); assert 5600<T/60<6100"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define rlc_series_underdamped_omega0_zeta(R:float,L:float,C:float)->tuple[float,float] return (Ï0=1/â(LC), Î¶=R/(2)â(C/L)).","tests":["import math; w0,z=rlc_series_underdamped_omega0_zeta(10,1e-3,1e-6); assert abs(w0-1e4)<1e-9 and abs(z-0.5)<1e-12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define thin_film_interference_min_thickness(lambda_m:float,n:float)->float minimal thickness for destructive interference in reflected light at normal incidence: t=lambda/(4n).","tests":["assert abs(thin_film_interference_min_thickness(600e-9,1.5)-1e-7)<1e-12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define snells_law_angle(n1:float,n2:float,theta1_deg:float)->float return Î¸2 in degrees via n1 sinÎ¸1 = n2 sinÎ¸2; if TIR occurs return float('nan').","tests":["import math; assert abs(snells_law_angle(1.0,1.5,30)-19.4712206)<1e-6; assert math.isnan(snells_law_angle(1.5,1.0,60))"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define antoine_pressure_mmHg(T_C:float,A:float,B:float,C:float)->float Antoine equation log10(P)=A - B/(T+C).","tests":["P=antoine_pressure_mmHg(80.0,8.07131,1730.63,233.426); assert 350< P < 400"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define clausius_clapeyron_deltaHvap(P1:float,T1:float,P2:float,T2:float)->float return ÎHvap (J/mol) from ln(P2/P1)= -ÎH/R (1/T2 - 1/T1). Use R=8.314462618.","tests":["import math; dH=clausius_clapeyron_deltaHvap(1e4,300,2e4,320); assert 3e4<dH<6e4"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define buffer_pH_weak_acid_base_added(pKa:float,HA_mol:float,A_mol:float,added_strong_base_mol:float)->float add OH- which neutralizes HA to A-. Return final pH via HendersonâHasselbalch; guard edge cases.","tests":["pH=buffer_pH_weak_acid_base_added(4.76,0.01,0.01,0.005); assert 4.9<pH<5.1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define van_der_waals_pressure(n:float,T:float,V:float,a:float,b:float,R:float=8.314462618)->float P=nRT/(V-nb) - a(n/V)^2.","tests":["P=van_der_waals_pressure(1.0,300.0,0.024,0.364,0.0427); assert 4e6<P<7e6"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define gibbs_phase_rule_components(C:int,P:int)->int return degrees of freedom F=C-P+2.","tests":["assert gibbs_phase_rule_components(1,2)==1 and gibbs_phase_rule_components(2,1)==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define diffusion_half_time(L:float,D:float)->float characteristic half-time ÏâL^2/(Ï^2 D) for 1D slab to half relax.","tests":["t=diffusion_half_time(0.01,1e-9); assert 1e5<t<2e5"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define hill_equation_response(S:float,EC50:float,n:float)->float E= S^n/(EC50^n + S^n).","tests":["assert abs(hill_equation_response(10,10,1)-0.5)<1e-12; assert hill_equation_response(100,10,2)>0.9"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define lotka_volterra_euler_step(x:float,y:float,alpha:float,beta:float,delta:float,gamma:float,dt:float)->tuple[float,float] predator-prey Euler step.","tests":["x1,y1=lotka_volterra_euler_step(10,5,1.1,0.4,0.1,0.4,0.1); assert x1>0 and y1>0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define michaelis_menten_lineweaver_fit(S:list[float],v:list[float])->tuple[float,float] return (Vmax,Km) via linear regression of 1/v vs 1/S for positive data.","tests":["Vmax,Km=michaelis_menten_lineweaver_fit([1,2,5,10],[0.5,0.667,0.833,0.909]); assert 0.95<Vmax<1.2 and 0.5<Km<2.0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define dna_codon_usage(seq:str)->dict[str,int] count codons (triplets) from 5' to 3'; ignore trailing incomplete codon; treat 'U' as 'T'.","tests":["d=dna_codon_usage('ATGTTTUGA'); assert d.get('ATG',0)==1 and d.get('TTT',0)==1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define fluorescence_lifetime_intensity(I0:float,t:float,tau:float)->float I=I0*exp(-t/Ï).","tests":["import math; assert abs(fluorescence_lifetime_intensity(100,5,5)-100*math.e**-1)<1e-9"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define poisson_confidence_interval(k:int,alpha:float)->tuple[float,float] central interval using chi-square approx: [0.5*Ï2_{2k,Î±/2}, 0.5*Ï2_{2k+2,1-Î±/2}] . Implement small chi-square inverse via bisection using CDF from regularized gamma.","tests":["lo,hi=poisson_confidence_interval(10,0.05); assert 5<lo<8 and 13<hi<18"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define kalman_filter_1d(z:list[float],x0:float,P0:float,Q:float,R:float)->list[float] constant-position model with identity H and F=1; return filtered means.","tests":["xs=kalman_filter_1d([0,1,0,1],0.0,1.0,1e-3,1.0); assert len(xs)==4 and all(isinstance(v,float) for v in xs)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define forward_backward_probs(obs:list[int],A:list[list[float]],B:list[list[float]],pi:list[float])->list[float] HMM smoothing: return posterior p(state_t=0|obs) for each t (2-state small cases).","tests":["A=[[0.9,0.1],[0.2,0.8]]; B=[[0.6,0.4],[0.3,0.7]]; pi=[0.5,0.5]; post=forward_backward_probs([0,1,0],A,B,pi); assert len(post)==3 and all(0<=p<=1 for p in post)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define logistic_regression_train(X:list[list[float]],y:list[int],lr:float,epochs:int)->list[float] fit weights (with bias term included as last column in X) via gradient descent; return weights.","tests":["import math; X=[[0.0,1.0],[1.0,1.0],[2.0,1.0],[3.0,1.0]]; y=[0,0,1,1]; w=logistic_regression_train(X,y,0.5,2000); def sig(z): return 1/(1+math.exp(-z)); assert sig(sum(w[i]*X[0][i] for i in range(2)))<0.5 and sig(sum(w[i]*X[3][i] for i in range(2)))>0.5"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define principal_component_1_2d(points:list[tuple[float,float]])->tuple[float,float,float] return (vx,vy,explained_var_ratio) for first principal component via covariance eigen-decomp.","tests":["v=principal_component_1_2d([(0,0),(1,1),(2,2),(3,3)]); assert abs(abs(v[0])-abs(v[1]))<1e-6 and 0.9<v[2]<=1.0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define newton_raphson_system(f:callable,J:callable,x0:list[float],tol:float=1e-9,max_iter:int=50)->list[float] Newton method for small systems (2 variables).","tests":["import math; f=lambda v:[v[0]**2+v[1]**2-1, v[0]-v[1]]; J=lambda v:[[2*v[0],2*v[1]],[1, -1]]; sol=newton_raphson_system(f,J,[0.7,0.7]); assert abs(sol[0]-sol[1])<1e-6 and abs(sol[0]**2+sol[1]**2-1)<1e-6"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define thomas_tridiagonal(a:list[float],b:list[float],c:list[float],d:list[float])->list[float] solve tri-diagonal Ax=d for vectors a (sub), b (diag), c (super).","tests":["x=thomas_tridiagonal([0,1,1],[4,4,4],[1,1,0],[5,6,6]); assert all(abs(xi-1.0)<1e-9 for xi in x)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define poisson_1d_dirichlet(n:int,f:callable,a:float,b:float)->list[float] solve -u''=f(x) on [0,1] with u(0)=a,u(1)=b using centered finite differences with n interior points.","tests":["import math; f=lambda x:0.0; sol=poisson_1d_dirichlet(10, f, 0.0, 1.0); assert abs(sol[0]-0.090909)<1e-3 and abs(sol[-1]-0.90909)<1e-3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define heat_equation_explicit_step(u:list[float],alpha:float,dt:float,dx:float)->list[float] 1D heat eq u_t=alpha u_xx with Dirichlet u[0]=u[-1]=0 at each step; return new array.","tests":["out=heat_equation_explicit_step([0,1,0],1.0,0.1,1.0); assert abs(out[1]-0.8)<1e-9 and out[0]==0 and out[2]==0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define wave_equation_step(u:list[float],u_prev:list[float],c:float,dt:float,dx:float)->list[float] leapfrog update for u_tt=c^2 u_xx with fixed ends.","tests":["n=5; u=[0,1,0,0,0]; up=[0]*5; out=wave_equation_step(u,up,1.0,0.1,1.0); assert out[1]<1.0 and out[0]==0 and out[-1]==0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define schrodinger_1d_groundstate_finite_diff(V:list[float],dx:float)->tuple[float,list[float]] compute lowest eigenvalue and normalized eigenvector of Hamiltonian H=-Ä§^2/(2m) d2/dx2 + V with Ä§^2/2m=1 (dimensionless). Use simple power iteration on inverse shifted matrix.","tests":["E,psi=schrodinger_1d_groundstate_finite_diff([0,0,0,0,0],1.0); assert len(psi)==5 and E<0.0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define gaussian_quadrature_2pt(f,a:float,b:float)->float 2-point Gauss-Legendre quadrature on [a,b].","tests":["import math; val=gaussian_quadrature_2pt(lambda x: x**2,0,1); assert abs(val-1/3)<1e-6"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define rk45_adaptive(f,t0:float,y0:float,t1:float,rtol:float=1e-6)->float simple Fehlberg RK45 for y'=f(t,y) scalar; return y(t1). Limit max steps 100000.","tests":["import math; f=lambda t,y: y; v=rk45_adaptive(f,0.0,1.0,1.0,1e-6); assert abs(v-math.e)<1e-3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define linear_regression_r2(x:list[float],y:list[float])->float compute coefficient of determination R^2 for least squares line.","tests":["r2=linear_regression_r2([0,1,2,3],[1,2,3,4]); assert abs(r2-1.0)<1e-12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define fft_dit_recursive(x:list[complex])->list[complex] CooleyâTukey radix-2 FFT for length power of two.","tests":["import cmath; X=fft_dit_recursive([1,1,1,1]); assert all(abs(v-4)<1e-9 for v in X[:1])"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define ifft_from_fft(X:list[complex])->list[complex] inverse FFT using conjugate trick and above FFT (implement independently).","tests":["import cmath; from math import isclose; x=[0,1,0,-1j]; X=ifft_from_fft(fft_dit_recursive(x)); assert all(abs(X[i]-x[i])<1e-7 for i in range(len(x)))"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define design_fir_moving_average(n:int)->list[float] length-n moving average filter coefficients (sum to 1).","tests":["h=design_fir_moving_average(5); assert abs(sum(h)-1.0)<1e-12 and len(h)==5"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define convolution_circular_real(a:list[float],b:list[float])->list[float] circular convolution length n using direct method.","tests":["c=convolution_circular_real([1,2,3],[4,5,6]); assert c==[22,28,16]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define nyquist_stability_criterion_real_axis(roots:list[complex])->bool For polynomial with given roots, return True if all have negative real part (stable LTI).","tests":["assert nyquist_stability_criterion_real_axis([-1+0j,-2+0j]) and not nyquist_stability_criterion_real_axis([1+0j,-1+0j])"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define lqr_discrete_scalar(A:float,B:float,Q:float,R:float,gamma:float=1.0)->float compute steady-state scalar LQR gain K solving Riccati: P=Q+gamma*(A^2*P - gamma*(A*B*P)**2/(R+gamma*B**2*P)); iterate until converge; K=gamma*B*A*P/(R+gamma*B**2*P).","tests":["K=lqr_discrete_scalar(1.0,1.0,1.0,1.0); assert 0<K<1.0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define newton_cotes_closed_4pt(f,a:float,b:float)->float composite Boole's rule (n multiple of 4 choose n=4 segments internally). Implement single panel on [a,b].","tests":["import math; val=newton_cotes_closed_4pt(math.sin,0.0,math.pi); assert abs(val-2.0)<1e-6"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define finite_volume_flux_upwind(u_left:float,u_right:float,a:float)->float Flux for 1D advection u_t + a u_x = 0 using upwind: F=a*u_upwind.","tests":["assert finite_volume_flux_upwind(1.0,0.0,2.0)==2.0 and finite_volume_flux_upwind(1.0,0.0,-3.0)==0.0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define logistic_map_iter(x0:float,r:float,n:int)->float iterate x_{k+1}=r x_k(1-x_k) and return x_n.","tests":["x=logistic_map_iter(0.2,3.5,50); assert 0.0<=x<=1.0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define sobol_prime_base_radical_inverse(i:int,base:int)->float radical inverse in a given base for low-discrepancy sampling (no scrambling).","tests":["assert abs(sobol_prime_base_radical_inverse(1,2)-0.5)<1e-12 and abs(sobol_prime_base_radical_inverse(2,2)-0.25)<1e-12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define metropolis_hastings_normal(target_mu:float,target_sigma:float,steps:int,seed:int=0)->list[float] MH sampler with Gaussian random walk proposal Ï=1; return samples (burn-in 100).","tests":["s=metropolis_hastings_normal(0.0,1.0,1000,seed=1); import statistics as st; m=st.mean(s[-500:]); assert -0.3<m<0.3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define bayes_update_gaussian(mu0:float,sigma0:float,mu_lik:float,sigma_lik:float)->tuple[float,float] 1D Gaussian prior N(mu0,Ï0^2) and likelihood N(x;Î¸,Ï_lik^2). Return posterior mean and std.","tests":["m,s=bayes_update_gaussian(0,1,1,1); assert abs(m-0.5)<1e-12 and abs(s-(0.5**0.5))<1e-12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define pearson_correlation(x:list[float],y:list[float])->float compute r in [-1,1].","tests":["r=pearson_correlation([1,2,3,4],[2,4,6,8]); assert abs(r-1.0)<1e-12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define kmeans_1d(points:list[float],k:int,seed:int=0)->tuple[list[float],list[int]] return (centroids,assignments) using Lloyd; 1D only.","tests":["c,a=kmeans_1d([0,0.1,5,5.2],2,seed=1); assert set(a)=={0,1} and abs(abs(c[0]-c[1])-5.0)<0.5"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define finite_diff_gradient_2d(f, x:float, y:float, h:float=1e-6)->tuple[float,float] central differences.","tests":["import math; fx,fy=finite_diff_gradient_2d(lambda x,y: x**2+y**3,1.0,2.0); assert abs(fx-2.0)<1e-6 and abs(fy-12.0)<1e-4"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define integrate_population_balance_birth_death(N0:float,b:float,d:float,t:float)->float expected N(t) for linear birth-death: dN/dt=(b-d)N.","tests":["import math; assert abs(integrate_population_balance_birth_death(100,0.3,0.1,10)-100*math.exp(2))<1e-6"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define coulomb_potential_energy(q1:float,q2:float,r:float)->float U=k q1 q2 / r with k=8.9875517923e9.","tests":["U=coulomb_potential_energy(1e-6,-1e-6,0.1); assert U<0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define angular_frequency_from_period(T:float)->float Ï=2Ï/T.","tests":["import math; assert abs(angular_frequency_from_period(2.0)-math.pi)<1e-12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define mean_free_path(k_B:float,T:float,diam:float,P:float)->float Î» = k_B T / (â2 Ï d^2 P).","tests":["import math; l=mean_free_path(1.380649e-23,300,3e-10,101325); assert 5e-8<l<2e-7"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define stoichiometric_matrix_rank(S:list[list[int]])->int rank via Gaussian elimination over reals.","tests":["r=stoichiometric_matrix_rank([[1,-1,0],[0,1,-1]]); assert r==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define flux_balance_simple(S:list[list[int]],b:list[float])->list[float] compute least-norm flux vector v minimizing ||v||^2 subject to S v = b (solve normal equations).","tests":["v=flux_balance_simple([[1,-1,0],[0,1,-1]],[0,0]); assert len(v)==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define reversible_reaction_timecourse(A0:float,B0:float,k1:float,k2:float,t:float)->tuple[float,float] for AâB, analytic solution using equilibrium and approach rate (k1+k2).","tests":["A,B=reversible_reaction_timecourse(1.0,0.0,2.0,1.0,1.0); assert abs(A+B-1.0)<1e-12 and 0<B<1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define gaussian_elimination_partial_pivot(A:list[list[float]],b:list[float])->list[float] solve Ax=b with partial pivoting.","tests":["x=gaussian_elimination_partial_pivot([[2,1],[5,7]],[11,13]); assert all(abs(a-b)<1e-9 for a,b in zip(x,[7.111111111111111,-3.2222222222222223]))"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define finite_element_rod_linear(n:int,L:float,k:float,q:float)->list[float] 1D rod [0,L], uniform heat source q, conductivity k, Dirichlet T(0)=0,T(L)=0; use linear elements with n elements; return nodal temps.","tests":["T=finite_element_rod_linear(4,1.0,1.0,1.0); assert abs(max(T)-0.0625)<1e-3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define rk4_system_step(f, t:float, y:list[float], h:float)->list[float] classic RK4 for vector y.","tests":["f=lambda t,y:[y[1],-y[0]]; y=rk4_system_step(f,0.0,[0.0,1.0],0.1); assert len(y)==2 and y[0]>0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define sird_euler_step(S:float,I:float,R:float,D:float,beta:float,gamma:float,mu:float,dt:float)->tuple[float,float,float,float] SIRD model with deaths rate Î¼.","tests":["S,I,R,D=sird_euler_step(999,1,0,0,0.3,0.1,0.01,1.0); assert abs(S+I+R+D-1000)<1e-6 and D>0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define rkf45_adaptive_system(f,t0:float,y0:list[float],t1:float,rtol:float=1e-6)->list[float] integrate small vector ODE; return y(t1).","tests":["f=lambda t,y:[y[1],-y[0]]; y=rkf45_adaptive_system(f,0.0,[0.0,1.0],3.14159); assert abs(y[0])<0.1 and abs(y[1]+1.0)<0.2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define ksp_conjugate_gradient(A:callable,b:list[float],x0:list[float],tol:float=1e-10,max_iter:int=1000)->list[float] CG for SPD linear systems (A is function for matvec).","tests":["A=lambda v:[4*v[0]+v[1],v[0]+3*v[1]]; x=ksp_conjugate_gradient(A,[1,2],[0,0]); assert all(abs(a-b)<1e-6 for a,b in zip(x,[0.090909,0.636363]))"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define power_iteration_symmetric(M:list[list[float]],iters:int=1000)->tuple[float,list[float]] return largest eigenvalue and normalized eigenvector (sign arbitrary).","tests":["lam,v=power_iteration_symmetric([[2,0],[0,1]],100); assert abs(abs(v[0]) - 1.0)>0.0 and abs(lam-2.0)<1e-6"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define pagerank_with_teleport(adj:list[list[int]],d:float=0.85,eps:float=1e-10)->list[float] handle dangling nodes; return vector sumâ1.","tests":["r=pagerank_with_teleport([[0,1],[0,0]]); assert abs(sum(r)-1.0)<1e-9 and r[1]>r[0]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define simulate_markov_chain(P:list[list[float]],pi0:list[float],n:int,seed:int=0)->list[int] sample states; return list of visited indices length n (inclusive of initial sample).","tests":["path=simulate_markov_chain([[0.5,0.5],[0.2,0.8]],[1.0,0.0],10,seed=1); assert len(path)==10 and all(s in (0,1) for s in path)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define cross_correlation(x:list[float],y:list[float])->list[float] full discrete cross-correlation r[k]=â x[n] y[n+k].","tests":["r=cross_correlation([1,2,3],[4,5]); assert r==[5,14,23,8]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define normalized_mutual_information(labels_true:list[int],labels_pred:list[int])->float NMI using natural log; handle empty clusters.","tests":["nmi=normalized_mutual_information([0,0,1,1],[1,1,0,0]); assert abs(nmi-1.0)<1e-12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define forward_euler_pendulum(theta0:float,omega0:float,g:float,L:float,dt:float,steps:int)->tuple[float,float] nonlinear pendulum Î¸''=-(g/L) sinÎ¸.","tests":["th,om=forward_euler_pendulum(0.1,0.0,9.81,1.0,0.01,100); assert abs(th)<1.0 and abs(om)<1.0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define polyfit_least_squares(x:list[float],y:list[float],deg:int)->list[float] return coefficients c0..c_deg minimizing L2 (Vandermonde solve).","tests":["c=polyfit_least_squares([0,1,2],[1,3,5],1); assert all(abs(a-b)<1e-9 for a,b in zip(c,[1.0,2.0]))"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define sparse_csr_matvec(data:list[float],indices:list[int],indptr:list[int],x:list[float])->list[float] compute y=A x for CSR format.","tests":["y=sparse_csr_matvec([1,2,3],[0,2,1],[0,2,3],[1,2,3]); assert y==[7,6]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define gaussian_process_rbf_predict(X:list[float],y:list[float],Xstar:list[float],sigma_f:float,l:float,sigma_n:float)->list[float] 1D zero-mean GP posterior mean with RBF kernel k(x,x')=Ï_f^2 exp(-(x-x')^2/(2l^2)) + Ï_n^2 Î´.","tests":["m=gaussian_process_rbf_predict([0,1],[0,1],[0.5],1.0,1.0,1e-6); assert len(m)==1 and 0<m[0]<1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define discrete_fourier_transform_matrix(n:int)->list[list[complex]] return nÃn DFT matrix W_{jk}=exp(-2Ïi jk/n).","tests":["import cmath; W=discrete_fourier_transform_matrix(3); assert abs(W[1][1]-cmath.exp(-2j*cmath.pi/3))<1e-12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define bode_mag_phase_first_order(K:float,tau:float,omega:float)->tuple[float,float] |G|=K/sqrt(1+(ÏÏ)^2), phase=-atan(ÏÏ).","tests":["import math; m,p=bode_mag_phase_first_order(2.0,0.5,1.0); assert abs(m-2/math.sqrt(1+0.25))<1e-12 and abs(p+math.atan(0.5))<1e-12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define forward_substitution(L:list[list[float]],b:list[float])->list[float] solve lower-triangular system.","tests":["x=forward_substitution([[2,0,0],[3,1,0],[1,-1,2]],[2,1,0]); assert all(abs(a-b)<1e-9 for a,b in zip(x,[1.0,-2.0,1.0]))"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define backward_substitution(U:list[list[float]],y:list[float])->list[float] solve upper-triangular system.","tests":["x=backward_substitution([[2,1],[0,3]],[3,3]); assert all(abs(a-b)<1e-9 for a,b in zip(x,[1.0,1.0]))"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define lu_decomposition(A:list[list[float]])->tuple[list[list[float]],list[list[float]]] Doolittle LU (no pivot) such that A=LU.","tests":["L,U=lu_decomposition([[2,3],[5,4]]); import math; assert abs(L[0][0]-1.0)<1e-12 and abs(U[0][0]-2.0)<1e-12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define qr_decomposition_gram_schmidt(A:list[list[float]])->tuple[list[list[float]],list[list[float]]] classical GS for full column rank.","tests":["Q,R=qr_decomposition_gram_schmidt([[1,0],[1,1],[0,1]]); # Q orthonormal columns\nn=len(Q); m=len(Q[0]); s=sum(Q[i][0]*Q[i][1] for i in range(n)); assert abs(s)<1e-6"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define pca_2d_from_points(points:list[tuple[float,float]])->tuple[tuple[float,float],tuple[float,float]] return (mean_x,mean_y) and first principal axis unit vector.","tests":["(mx,my),v=pca_2d_from_points([(0,0),(2,2)]); assert (mx,my)==(1.0,1.0) and abs(abs(v[0])-abs(v[1]))<1e-12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define hydrogen_energy_level(n:int)->float Energy (eV) for Hydrogen E_n=-13.6/n^2.","tests":["assert abs(hydrogen_energy_level(1)+13.6)<1e-12 and abs(hydrogen_energy_level(2)+3.4)<1e-12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define photoelectric_threshold_wavelength(phi_eV:float)->float threshold Î»=hc/(Ï e) using h=6.62607015e-34,c=2.99792458e8,e=1.602176634e-19.","tests":["assert 3.0e-7<photoelectric_threshold_wavelength(4.0)<4.0e-7"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define compton_wavelength_shift(theta_deg:float)->float ÎÎ» = (h/(m_e c))(1-cosÎ¸); use h=6.62607015e-34, m_e=9.10938356e-31, c=2.99792458e8.","tests":["import math; d=compton_wavelength_shift(180); assert 4.8e-12<d<5.0e-12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define chemical_kinetics_second_order_AA(C0:float,k:float,t:float)->float 2Aâproducts: 1/C - 1/C0 = 2k t.","tests":["C=chemical_kinetics_second_order_AA(1.0,0.1,1.0); assert abs(1/C - 1.0 - 0.2)<1e-6"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define henderson_polyprotic_mono_base_pH(pKa1:float,pKa2:float,acid_mol:float,base_added_mol:float)->float approximate pH for diprotic acid buffer region (assume stepwise neutralization).","tests":["pH=henderson_polyprotic_mono_base_pH(2.0,7.0,0.01,0.005); assert 2.0<pH<7.0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define nusselt_laminar_plate(Re:float,Pr:float)->float local laminar flat plate correlation: Nu_x=0.332 Re^{1/2} Pr^{1/3}.","tests":["import math; assert abs(nusselt_laminar_plate(1e5,0.7)-0.332*(1e5)**0.5*(0.7)**(1/3))<1e-12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define drag_force_quadratic(Cd:float,rho:float,A:float,v:float)->float F=0.5 Cd Ï A v^2.","tests":["assert abs(drag_force_quadratic(1.0,1.2,0.5,10)-30.0)<1e-12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define rocket_equation_delta_v(Isp:float,g0:float,m0:float,mf:float)->float Îv = Isp*g0*ln(m0/mf).","tests":["import math; assert abs(rocket_equation_delta_v(300,9.81,100,50)-300*9.81*math.log(2))<1e-9"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define radiative_heat_exchange_parallel_plates(eps1:float,eps2:float,sigma:float,T1:float,T2:float)->float net q/A = Ï (T1^4 - T2^4)/ ( (1/Îµ1)+(1/Îµ2)-1 ).","tests":["sig=5.670374419e-8; q=radiative_heat_exchange_parallel_plates(0.9,0.7,sig,400,300); assert q>0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define matmul_2x2(A:list[list[float]],B:list[list[float]])->list[list[float]] multiply 2Ã2 matrices.","tests":["C=matmul_2x2([[1,2],[3,4]],[[5,6],[7,8]]); assert C==[[19,22],[43,50]]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define eigen_decomposition_2x2_sym(A:list[list[float]])->tuple[list[float],list[list[float]]] eigenvalues ascending and corresponding normalized eigenvectors for symmetric 2Ã2.","tests":["lam,V=eigen_decomposition_2x2_sym([[2,1],[1,2]]); import math; assert abs(lam[0]-1)<1e-9 and abs(lam[1]-3)<1e-9 and abs(sum(V[0][i]*V[1][i] for i in range(2)))<1e-9"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define ray_travel_time_slowness(speeds:list[float],thicknesses:list[float])->float total time â thickness_i / speed_i.","tests":["t=ray_travel_time_slowness([2.0,4.0],[3.0,1.0]); assert abs(t-2.0)<1e-12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define seismic_reflection_coefficient(Z1:float,Z2:float)->float R=(Z2-Z1)/(Z2+Z1).","tests":["assert abs(seismic_reflection_coefficient(4,6)-0.2)<1e-12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define radiocarbon_age_ratio(R:float,R0:float)->float age t = -8033 ln(R/R0) (Libby half-life based).","tests":["import math; assert abs(radiocarbon_age_ratio(0.5,1.0)-8033*math.log(2))<1e-6"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define poynting_vector_magnitude(E:float,B:float,mu0:float=4*3.141592653589793e-7)->float S=E^2/(mu0 c) with c=1/sqrt(mu0*epsilon0) and epsilon0=1/(mu0*c^2). Derive using c=299792458 exactly: S=E*B/Î¼0? Use S=E^2/(Î¼0 c) for plane wave with E=cB.","tests":["S=poynting_vector_magnitude(1.0,1.0/299792458.0); assert 2.0e6<S<4.0e6"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define elastic_beam_deflection_center(P:float,L:float,E:float,I:float)->float simply supported beam with center load: Î´=PL^3/(48EI).","tests":["d=elastic_beam_deflection_center(1000,2.0,200e9,8.333e-6); assert 0<d<1e-3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define mohrs_circle_max_shear(sig_x:float,sig_y:float,tau_xy:float)->float max shear Ï_max = sqrt(((Ïx-Ïy)/2)^2 + Ï_xy^2).","tests":["import math; assert abs(mohrs_circle_max_shear(10,0,5)-math.sqrt(50))<1e-12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define navier_stokes_reduced_lid_cavity_residual(u:list[list[float]],v:list[list[float]],Re:float,dx:float,dy:float)->float compute simple finite-difference residual of steady incompressible 2D lid-driven cavity momentum (omit pressure; just return mean absolute of du/dx+dv/dy continuity).","tests":["r=navier_stokes_reduced_lid_cavity_residual([[0,1],[0,1]],[[0,0],[0,0]],100,1.0,1.0); assert r>=0.0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define hill_climbing_maximize(f, x0:float, step:float, iters:int)->float naive hill climb in 1D returning best x.","tests":["import math; x=hill_climbing_maximize(lambda x: -(x-2)**2, 0.0, 0.1, 200); assert abs(x-2.0)<0.2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define simulated_annealing_optimize(f,x0:float,T0:float,cooling:float,iters:int,seed:int=0)->float SA in 1D with Gaussian steps; return best x.","tests":["import math; x=simulated_annealing_optimize(lambda x: -(x-3)**2, 0.0, 1.0, 0.99, 1000,seed=1); assert abs(x-3.0)<0.5"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define heun_predictor_corrector(f,t0:float,y0:float,h:float)->float one Heun step (improved Euler).","tests":["f=lambda t,y:y; y1=heun_predictor_corrector(f,0.0,1.0,0.1); assert 1.1<y1<1.1052"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define cubic_spline_natural_coeffs(x:list[float],y:list[float])->tuple[list[float],list[float],list[float],list[float]] return piecewise coefficients a,b,c,d for intervals.","tests":["a,b,c,d=cubic_spline_natural_coeffs([0,1,2],[0,1,0]); assert len(a)==2 and len(b)==2 and len(c)==2 and len(d)==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define viterbi_decode_binary(obs:list[int],A:list[list[float]],B:list[list[float]],pi:list[float])->list[int] most likely state path for 2-state HMM, return states.","tests":["A=[[0.9,0.1],[0.2,0.8]]; B=[[0.6,0.4],[0.3,0.7]]; pi=[0.5,0.5]; path=viterbi_decode_binary([0,1,0,1],A,B,pi); assert len(path)==4 and set(path)<= {0,1}"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define linear_assignment_hungarian(cost:list[list[float]])->tuple[int,list[int]] minimal cost and assignment indices (j for each i).","tests":["c,assign=linear_assignment_hungarian([[4,1,3],[2,0,5],[3,2,2]]); assert c==5 and assign==[1,0,2]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define arima_arma11_forecast(y:list[float],phi:float,theta:float,sigma:float,steps:int,seed:int=0)->list[float] simulate and forecast ARMA(1,1) with zero mean; return future values list length steps.","tests":["f=arima_arma11_forecast([0.0]*10,0.5,0.5,1.0,5,seed=1); assert len(f)==5"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define discrete_time_kalman_predict_update(A:list[list[float]],B:list[list[float]],H:list[list[float]],Q:list[list[float]],R:list[list[float]],x:list[float],P:list[list[float]],u:list[float],z:list[float])->tuple[list[float],list[list[float]]] single predict-update step; small dimensions.","tests":["A=[[1,1],[0,1]]; B=[[0],[0]]; H=[[1,0]]; Q=[[1,0],[0,1]]; R=[[1]]; x=[0,1]; P=[[1,0],[0,1]]; xn,Pn=discrete_time_kalman_predict_update(A,B,H,Q,R,x,P,[0],[0]); assert len(xn)==2 and len(Pn)==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define finite_difference_laplacian_2d(grid:list[list[float]],dx:float,dy:float)->list[list[float]] compute 5-point Laplacian for interior, zero at boundaries.","tests":["L=finite_difference_laplacian_2d([[0,0,0],[0,1,0],[0,0,0]],1.0,1.0); assert abs(L[1][1]-(-4.0))<1e-12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define poisson_disk_sampling_2d(width:float,height:float,r:float,seed:int=0)->list[tuple[float,float]] Bridson algorithm; small domains; return list of points.","tests":["pts=poisson_disk_sampling_2d(1.0,1.0,0.2,seed=1); assert all(0<=x<=1 and 0<=y<=1 for x,y in pts) and len(pts)>5"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define stable_matching_gale_shapley(m_prefs:list[list[int]],w_prefs:list[list[int]])->list[int] return match for men indices to women indices.","tests":["res=stable_matching_gale_shapley([[0,1],[0,1]],[[1,0],[0,1]]); assert res in ([0,1],[1,0])"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define network_resilience_percolation(adj:list[list[int]],remove_prob:float,seed:int=0)->float simulate node removal; return fraction of nodes in largest component averaged over 20 trials.","tests":["f=network_resilience_percolation([[1,2],[0,2],[0,1]],0.1,seed=0); assert 0.5<f<=1.0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define tikhonov_ridge_regression(X:list[list[float]],y:list[float],lam:float)->list[float] solve (X^T X + Î»I)w=X^T y.","tests":["w=tikhonov_ridge_regression([[1,0],[1,1],[1,2]],[1,2,3],0.1); assert len(w)==2 and w[1]>0.9"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define logistic_map_lyapunov(r:float,steps:int=10000)->float compute Lyapunov exponent for logistic map x_{n+1}=r x_n(1-x_n) with x0=0.5 (discard first 1000).","tests":["l=logistic_map_lyapunov(4.0,5000); assert 0.5<l<1.5"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define spectral_radius_power_method(A:list[list[float]])->float approximate spectral radius via power iteration.","tests":["r=spectral_radius_power_method([[0,1],[1,0]]); assert abs(r-1.0)<1e-6"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define genetic_drift_wright_fisher(p0:float,N:int,generations:int,seed:int=0)->float simulate allele frequency in haploid WF model; return final p.","tests":["p=genetic_drift_wright_fisher(0.5,50,100,seed=2); assert 0<=p<=1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define hamming_window(n:int)->list[float] w[n]=0.54-0.46 cos(2Ïn/(N-1)) for N=n.","tests":["w=hamming_window(5); assert abs(w[0]-0.08)<1e-12 and abs(w[2]-1.0)<1e-12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define black_scholes_call(S:float,K:float,r:float,sigma:float,T:float)->float European call price; use standard normal CDF via erf.","tests":["c=black_scholes_call(100,100,0.0,0.2,1.0); assert 7<c<9"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define finite_difference_time_domain_1d_step(E:list[float],H:list[float],c:float,dt:float,dx:float)->tuple[list[float],list[float]] Yee update for 1D EM (PEC ends).","tests":["E,H=finite_difference_time_domain_1d_step([0,1,0],[0,0,0],1.0,0.1,1.0); assert len(E)==3 and len(H)==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define lasso_coordinate_descent(X:list[list[float]],y:list[float],lam:float,epochs:int)->list[float] 2-feature LASSO with soft-thresholding; return weights.","tests":["w=lasso_coordinate_descent([[1,0],[1,1],[1,2]],[1,2,3],0.1,200); assert len(w)==2 and w[1]>0.8"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define navier_stokes_cfl_1d(u:float,dx:float,nu:float,dt:float)->bool check CFL condition for viscous Burgers: dt <= min(C*dx/|u|, 0.5*dx^2/nu) with C=0.5; return True if satisfied.","tests":["assert navier_stokes_cfl_1d(1.0,0.1,0.01,0.01) and not navier_stokes_cfl_1d(1.0,0.1,0.01,0.2)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define discrete_dirichlet_sampler(alpha:list[float],n:int,seed:int=0)->list[list[float]] sample n draws from Dirichlet distribution via Gamma; return list of vectors.","tests":["s=discrete_dirichlet_sampler([1.0,1.0,1.0],5,seed=1); assert len(s)==5 and all(abs(sum(v)-1.0)<1e-9 for v in s)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define entropy_rate_markov(P:list[list[float]])->float entropy rate H = -â_i Ï_i â_j P_ij log2 P_ij, where Ï is stationary distribution.","tests":["H=entropy_rate_markov([[0.5,0.5],[0.5,0.5]]); assert abs(H-1.0)<1e-12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define dirichlet_problem_square_fd(n:int)->list[list[float]] solve u_xx+u_yy=0 on 0<x<1,0<y<1 with u=1 on top boundary and 0 else via Jacobi iterations (nÃn interior grid, 200 iterations). Return grid with boundaries included.","tests":["U=dirichlet_problem_square_fd(8); assert len(U)==10 and 0.1<U[-2][5]<0.9"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define cepstrum_real(x:list[float])->list[float] real cepstrum via log magnitude of FFT and IFFT; return same length list of floats.","tests":["c=cepstrum_real([1,2,3,4]); assert len(c)==4"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define cosine_similarity(a:list[float],b:list[float])->float return cos sim; handle zero vectors returning 0.","tests":["assert abs(cosine_similarity([1,0],[0,1]))<1e-12 and abs(cosine_similarity([1,1],[1,1])-1.0)<1e-12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define wasserstein_distance_1d(a:list[float],b:list[float])->float first Wasserstein distance for discrete 1D empirical distributions (sorted samples).","tests":["d=wasserstein_distance_1d([0,1,2],[0,2,4]); assert abs(d-1.0)<1e-12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define otto_cycle_efficiency(gamma:float,r:float)->float Î·=1-r^{1-Î³}.","tests":["import math; assert abs(otto_cycle_efficiency(1.4,10)- (1-10**(1-1.4)))<1e-12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define carnot_efficiency(T_hot:float,T_cold:float)->float Î·=1-Tc/Th (temperatures in Kelvin).","tests":["assert abs(carnot_efficiency(500,300)-0.4)<1e-12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define exoplanet_rv_semiamplitude(P_days:float,Mp_Mj:float,Ms_Msun:float,e:float=0.0)->float radial velocity K (m/s) for edge-on orbits using Kâ28.4329 (Mp sin i / M_J) ( (P/yr)^{-1/3} ) ( (M_s/M_â)^{-2/3} ) / sqrt(1-e^2).","tests":["K=exoplanet_rv_semiamplitude(365.25,1.0,1.0,0.0); assert 27<K<30"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define rayleigh_scattering_intensity(theta_deg:float)->float I(Î¸) â 1+cos^2Î¸; return normalized so I(90Â°)=1.","tests":["import math; assert abs(rayleigh_scattering_intensity(90)-1.0)<1e-12 and rayleigh_scattering_intensity(0)>1.9"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define basic_neuron_leaky_integrate_and_fire(I:float,tau:float,dt:float,steps:int,Vth:float=1.0)->int simulate LIF dV/dt=-(V)/Ï + I with Euler; count spikes when Vâ¥Vth then reset to 0.","tests":["spikes=basic_neuron_leaky_integrate_and_fire(1.5,10.0,0.1,200); assert spikes>0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define ising_1d_energy(spins:list[int],J:float,h:float)->float E= -J â s_i s_{i+1} - h â s_i (open chain).","tests":["E=ising_1d_energy([1,-1,1,-1],1.0,0.0); assert E==4.0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define metropolis_ising_1d_step(spins:list[int],J:float,h:float,T:float,seed:int=None)->list[int] one sweep Metropolis updates with periodic boundary.","tests":["s=metropolis_ising_1d_step([1,-1,1,-1],1.0,0.0,10.0,seed=0); assert len(s)==4 and all(v in (-1,1) for v in s)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define ksp_bicgstab(A:callable,b:list[float],x0:list[float],tol:float=1e-8,max_iter:int=1000)->list[float] BiCGSTAB solver; A is matvec.","tests":["A=lambda v:[4*v[0]+v[1],v[0]+3*v[1]]; x=ksp_bicgstab(A,[1,2],[0,0]); assert all(abs(a-b)<1e-5 for a,b in zip(x,[0.090909,0.636363]))"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define gaussian_elimination_mod_p(A:list[list[int]],b:list[int],p:int)->list[int]|None solve linear system modulo prime p; return None if no solution.","tests":["x=gaussian_elimination_mod_p([[1,1],[1,2]],[3,5],7); assert x is not None and len(x)==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define bearing_angle_deg(lat1:float,lon1:float,lat2:float,lon2:float)->float initial compass bearing from point 1 to 2 (degrees 0..360).","tests":["b=bearing_angle_deg(0,0,0,1); assert 80<b<100"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define ttest_independent_equalvar(x:list[float],y:list[float])->tuple[float,float] return (t_stat, df) for two-sample t-test with equal variances.","tests":["t,df=ttest_independent_equalvar([1,2,3],[2,3,4]); assert abs(df-4)<1e-12 and t<0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define chi2_gof(observed:list[int],expected:list[float])->float chi-square statistic â (O-E)^2/E.","tests":["v=chi2_gof([10,20,30],[12,18,30]); assert 0<=v<1.0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define pcr_cycle_yield(N0:int,efficiency:float,cycles:int)->float expected molecules N=N0*(1+eff)^cycles.","tests":["assert abs(pcr_cycle_yield(100,1.0,2)-400.0)<1e-12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define enzyme_turnover_number(rate:float,enzyme_conc:float)->float kcat=rate/[E] (units s^-1).","tests":["assert abs(enzyme_turnover_number(1e-6,1e-9)-1000.0)<1e-9"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define bernoulli_naive_bayes_train(X:list[list[int]],y:list[int])->tuple[list[float],list[list[float]]] return class priors and feature likelihoods with Laplace smoothing (binary features).","tests":["pri,lik=bernoulli_naive_bayes_train([[1,0],[1,1],[0,1],[0,0]],[0,0,1,1]); assert len(pri)==2 and len(lik)==2 and len(lik[0])==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define bernoulli_naive_bayes_predict(priors:list[float],likelihoods:list[list[float]],x:list[int])->int predict class (0/1) via log-probabilities.","tests":["y=bernoulli_naive_bayes_predict([0.5,0.5],[[0.8,0.2],[0.2,0.8]],[1,0]); assert y==0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define entropy_shannon_bits_from_counts(counts:list[int])->float entropy from counts (ignore zeros).","tests":["assert abs(entropy_shannon_bits_from_counts([1,1])-1.0)<1e-12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define bragg_d_spacing(n:int,lambda_m:float,theta_deg:float)->float using n*Î»=2*d*sinÎ¸.","tests":["import math; assert abs(bragg_d_spacing(1,154e-12,30)-154e-12/(2*math.sin(math.radians(30))))<1e-18"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define brewster_index(n1:float,thetaB_deg:float)->float compute n2=n1*tan(theta_B).","tests":["import math; assert abs(brewster_index(1.0,56.309932)-math.tan(math.radians(56.309932)))<1e-6"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define escape_velocity(mu:float,r:float)->float return sqrt(2*mu/r).","tests":["import math; v=escape_velocity(3.986004418e14,6.371e6); assert 11000<v<11300"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define gravitational_redshift_factor(M:float,R:float)->float f_inf/f_surface=sqrt(1-2GM/(Rc^2)) with G=6.67430e-11,c=299792458.","tests":["f=gravitational_redshift_factor(5.972e24,6.371e6); assert 0.999999999<f<1.0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define cyclotron_frequency(q:float,B:float,m:float)->float Ï=qB/m.","tests":["assert abs(cyclotron_frequency(1.602e-19,1.0,9.11e-31)-1.759e11)<1e9"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define larmor_radius(m:float,v_perp:float,q:float,B:float)->float r=mv_â¥/(qB).","tests":["r=larmor_radius(9.11e-31,1e6,1.602e-19,0.1); assert 0<r<1e-2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define doppler_radial_velocity(lambda_rest:float,lambda_obs:float)->float vâc*(Î»_obs-Î»_rest)/Î»_rest with c=299792458.","tests":["v=doppler_radial_velocity(500e-9,501e-9); assert 5.0e5<v<7.0e5"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define string_wave_speed(T:float,mu:float)->float v=sqrt(T/Î¼).","tests":["import math; assert abs(string_wave_speed(100.0,0.01)-100.0)**2<1e-9"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define rl_time_constant(L:float,R:float)->float Ï=L/R.","tests":["assert abs(rl_time_constant(1.0,2.0)-0.5)<1e-12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define rlc_damping_ratio(R:float,L:float,C:float)->float Î¶=R/2*sqrt(C/L).","tests":["import math; assert abs(rlc_damping_ratio(10,1e-3,1e-6)-0.5)<1e-12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define fresnel_reflectance_normal(n1:float,n2:float)->float ((n1-n2)/(n1+n2))^2.","tests":["assert abs(fresnel_reflectance_normal(1.0,1.5)-0.04)<1e-12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define thin_lens_magnification(f:float,do_:float)->float m = -di/do with 1/f=1/do+1/di.","tests":["di=-thin_lens_magnification(10.0,30.0)*30.0; assert abs(di-15.0)<1e-9"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define planck_lambda_to_nu_radiance(B_lambda:float,lambda_m:float)->float convert spectral radiance per wavelength to per frequency: B_Î½ = B_Î» * Î»^2 / c.","tests":["c=299792458.0; assert abs(planck_lambda_to_nu_radiance(1.0,500e-9)-(500e-9)**2/c)<1e-20"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define debye_lowT_heat_capacity(N:int,T:float,thetaD:float)->float â 12Ï^4/5 * N k_B * (T/Î¸_D)^3.","tests":["import math; kB=1.380649e-23; C=debye_lowT_heat_capacity(1,10,300); assert C>0 and C<1e-22"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define fermi_energy_free_electron(n:float)->float 3D Fermi energy E_F=Ä§^2/(2m_e)(3Ï^2 n)^{2/3}; use Ä§=1.054571817e-34,m_e=9.10938356e-31, return in eV.","tests":["Ef=fermi_energy_free_electron(1e28); assert 1<Ef<20"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define brinell_hardness(P:float,D:float,d:float)->float HB=2P/(Ï D (D-â(D^2-d^2))).","tests":["HB=brinell_hardness(3000,10,5); assert HB>0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define fourier_series_square_wave(n_terms:int,t:float)->float partial sum at t in [0,2Ï): (4/Ï)â_{k oddâ¤2n-1} sin(kt)/k.","tests":["import math; v=fourier_series_square_wave(5,math.pi/2); assert 1.0<v<2.0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define rayleigh_jeans_limit(lambda_m:float,T:float)->float B_Î»â2ck_BT/Î»^4 with c=2.99792458e8,k_B=1.380649e-23.","tests":["val=rayleigh_jeans_limit(1e-6,300); assert val>0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define doppler_broadening_fwhm_nu(nu0:float,T:float,m:float)->float ÎÎ½_FWHM = 2*nu0*sqrt(2 ln2 * k_B T/(mc^2)).","tests":["w=doppler_broadening_fwhm_nu(5e14,300,4.65e-26); assert 1e8<w<1e10"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define snr_db_from_power(S:float,N:float)->float 10*log10(S/N).","tests":["import math; assert abs(snr_db_from_power(2.0,1.0)-3.0102999566)<1e-9"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define freezing_point_depression(Kf:float,molality:float,i:float=1.0)->float ÎT_f = i Kf m.","tests":["assert abs(freezing_point_depression(1.86,0.5,2.0)-1.86)<1e-12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define boiling_point_elevation(Kb:float,molality:float,i:float=1.0)->float ÎT_b = i Kb m.","tests":["assert abs(boiling_point_elevation(0.512,1.0,2.0)-1.024)<1e-12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define raoults_law_total_pressure(xA:float,PA_star:float,PB_star:float)->float ideal A+B: P= xA*PA* + (1-xA)*PB*.","tests":["assert abs(raoults_law_total_pressure(0.4,100,50)-70.0)<1e-12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define ksp_molar_solubility_1_1(Ksp:float)->float for AB â A+ + B-, s=âKsp.","tests":["import math; assert abs(ksp_molar_solubility_1_1(1e-10)-1e-5)<1e-12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define ksp_molar_solubility_1_2(Ksp:float)->float for AB2 â A2+ + 2B-, solve Ksp = s*(2s)^2.","tests":["s=ksp_molar_solubility_1_2(1.0); assert abs(s-0.25)**2<1e-6"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define acid_base_equivalence_pH_strong(Va:float,Ca:float,Vb:float,Cb:float)->float pH at equivalence of strong acid-base (pH=7).","tests":["assert acid_base_equivalence_pH_strong(0.01,0.1,0.01,0.1)==7.0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define buffer_capacity_beta(Ca:float,Cb:float,pKa:float,pH:float)->float Î²=2.303*(Ca*10^{pH-pKa}+Cb*10^{pKa-pH})/(1+10^{pH-pKa})^2.","tests":["b=buffer_capacity_beta(0.1,0.1,4.76,4.76); assert 0.2<b<0.3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define mixing_entropy_ideal(x:list[float])->float ÎS/R = -â x_i ln x_i (ignore zeros).","tests":["import math; assert abs(mixing_entropy_ideal([0.5,0.5]) - math.log(2))<1e-12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define limiting_reagent_yield(moles:dict[str,float],coeff:dict[str,int],product:str,prod_coeff:int)->float compute theoretical product moles = min(m_i/Î½_i)*Î½_prod.","tests":["y=limiting_reagent_yield({'A':2,'B':3},{'A':1,'B':2},'P',1); assert y==1.5"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define reaction_extent_from_stoich(n0:dict[str,float],coeff:dict[str,int],xi:float)->dict[str,float] n_i = n0_i - Î½_i*xi (products have negative Î½).","tests":["res=reaction_extent_from_stoich({'A':1,'B':2,'C':0},{'A':1,'B':1,'C':-1},0.5); assert abs(res['C']-0.5)<1e-12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define equilibrium_conversion_A2B(K:float,nA0:float)->float for AâB, nB=x, nA=nA0-x, K=x/(nA0-x).","tests":["assert abs(equilibrium_conversion_A2B(2.0,1.0)-2/3)<1e-12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define michaelis_menten_kcat_Km_from_two_points(S1:float,v1:float,S2:float,v2:float,E:float)->tuple[float,float] solve for (kcat,Km) with v= kcat[E] S/(Km+S).","tests":["kc,km=michaelis_menten_kcat_Km_from_two_points(10,5,20,8,1); assert 0<kc and 0<km"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define allele_frequency_after_migration(p:float,m:float,pm:float)->float p'=(1-m)p + m pm (island model).","tests":["assert abs(allele_frequency_after_migration(0.6,0.1,0.2)-0.56)<1e-12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define wright_fisher_fixation_prob(p:float,N:int)->float probability of fixation for haploid neutral allele: p.","tests":["assert abs(wright_fisher_fixation_prob(0.3,100)-0.3)<1e-12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define allele_frequency_with_mutation(p:float,mu:float,nu:float)->float next-gen freq p'=(1-mu)p + nu(1-p).","tests":["assert abs(allele_frequency_with_mutation(0.5,0.01,0.02)-0.505)<1e-12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define logistic_with_allee(N0:float,r:float,K:float,A:float,t:float)->float solution N(t)=K/(1+((K-N0)/(N0-A))*A*exp(-r t)/ (K)) (derive simple form); implement via numeric RK4 if algebra bothersome (use small dt).","tests":["N=logistic_with_allee(10,0.2,100,5,50); assert 0<N<100"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define chemostat_steady_state(S_in:float,D:float,mu_max:float,Ks:float,Y:float)->tuple[float,float] Monod growth: S*=Ks*D/(mu_max-D), X*=Y(S_in-S*). If D>=mu_max return (S_in,0).","tests":["S,X=chemostat_steady_state(10,0.1,0.5,1.0,0.5); assert 0<S<S_in and X>0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define cranfield_soil_water_balance(P:float,ET:float,ÎS_prev:float)->float Î´S=P-ET+ÎS_prev (toy).","tests":["assert cranfield_soil_water_balance(5,2,1)==4"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define groundwater_drawdown_thiem(Q:float,T:float,r:float,R:float)->float s=(Q/(2ÏT)) ln(R/r) (confined aquifer).","tests":["import math; s=groundwater_drawdown_thiem(0.001,0.01,1.0,100.0); assert 0.03<s<0.08"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define richards_number(U:float,L:float,N:float)->float Ri=(N^2 L^2)/U^2.","tests":["assert abs(richards_number(1.0,10.0,0.1)-1.0)<1e-12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define mass_balance_box_model(C0:float,Fin:float,Cin:float,V:float,k:float,t:float)->float C(t)=Cin + (C0-Cin)exp(-(Fin/V + k)t).","tests":["import math; c=mass_balance_box_model(0,1,10,10,0,1); assert abs(c-10*(1-math.e**-0.1))<1e-9"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define gaussian_kernel_2d_sigma(sigma:float,size:int)->list[list[float]] normalized kernel (odd size).","tests":["k=gaussian_kernel_2d_sigma(1.0,5); s=sum(sum(r) for r in k); assert abs(s-1.0)<1e-6"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define sobel_gradient_magnitude(img:list[list[int]])->list[list[float]] compute sqrt(Gx^2+Gy^2) using 3x3 Sobel; zero-pad edges.","tests":["g=sobel_gradient_magnitude([[0,0,0],[0,255,0],[0,0,0]]); assert g[1][1]==0.0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define hough_transform_lines_count(img:list[list[int]],theta_steps:int)->int count accumulator nonzeros for simple binary image (1 edge pixel sets votes). Return total nonzero bins.","tests":["n=hough_transform_lines_count([[0,1,0],[0,1,0],[0,1,0]],90); assert n>0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define otsu_threshold(hist:list[int])->int compute threshold maximizing between-class variance for 256-bin hist.","tests":["t=otsu_threshold([0]*127+[100]+[0]*128); assert t>=127 and t<=128"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define kld_gaussians_1d(mu0:float,s0:float,mu1:float,s1:float)->float KL(N0||N1).","tests":["kl=kld_gaussians_1d(0,1,0,2); assert kl>0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define bhattacharyya_distance_gaussian_1d(mu0:float,s0:float,mu1:float,s1:float)->float.","tests":["d=bhattacharyya_distance_gaussian_1d(0,1,1,1); assert 0<d<1.0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define softmax(vals:list[float])->list[float] numerically stable.","tests":["p=softmax([0.0,0.0]); assert abs(p[0]-0.5)<1e-12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define cross_entropy(p:list[float],q:list[float])->float H(p,q) with natural logs.","tests":["import math; assert abs(cross_entropy([1.0,0.0],[0.8,0.2]) - (-math.log(0.8)))<1e-12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define hinge_loss(y_true:list[int],y_score:list[float])->float mean max(0,1-y*s) with y in {Â±1}.","tests":["L=hinge_loss([1,-1],[2,-2]); assert L==0.0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define multiclass_logistic_predict(W:list[list[float]],x:list[float])->int argmax of W x (row-major classes).","tests":["y=multiclass_logistic_predict([[1,0],[0,1]], [0.2,0.9]); assert y==1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define perceptron_train(X:list[list[float]],y:list[int],epochs:int)->list[float] binary labels in {0,1}; use bias term implicit (append 1).","tests":["w=perceptron_train([[0,0],[1,1]],[0,1],10); import math; assert len(w)==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define k_nearest_neighbors_regress(X:list[list[float]],y:list[float],xq:list[float],k:int)->float Euclidean, tie by lower index.","tests":["v=k_nearest_neighbors_regress([[0],[1],[2]],[0,1,4],[1.1],2); assert 1.5<v<2.5"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define ridge_regression_closed_form(X:list[list[float]],y:list[float],lam:float)->list[float] with bias column handled inside X.","tests":["w=ridge_regression_closed_form([[0,1],[1,1],[2,1]],[0,1,2],0.1); assert len(w)==2 and 0.8<w[0]<1.2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define pca_whiten_2d(points:list[tuple[float,float]])->list[tuple[float,float]] zero-mean and decorrelate with unit variances.","tests":["Y=pca_whiten_2d([(0,0),(2,2)]); import statistics as st; xs=[p[0] for p in Y]; ys=[p[1] for p in Y]; assert abs(sum(xs)/2)<1e-6 and abs(sum(ys)/2)<1e-6"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define mutual_information_binary(x:list[int],y:list[int])->float empirical MI in bits.","tests":["mi=mutual_information_binary([0,0,1,1],[0,0,1,1]); assert abs(mi-1.0)<1e-9"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define dct_ii_1d(x:list[float])->list[float] normalized orthonormal DCT-II.","tests":["X=dct_ii_1d([1.0,1.0]); assert X[1]==0.0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define idct_ii_1d(X:list[float])->list[float] inverse of above.","tests":["x=idct_ii_1d([2**0.5,0.0]); assert abs(x[0]-1.0)<1e-6 and abs(x[1]-1.0)<1e-6"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define welch_psd(x:list[float],segment:int)->list[float] average periodograms of non-overlapping Hanning-windowed segments; return power per freq bin length segment//2+1.","tests":["p=welch_psd([0,1,0,-1]*16,8); assert len(p)==8//2+1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define rls_filter(x:list[float],d:list[float],lam:float,delta:float)->list[float] 2-tap RLS; return final weights.","tests":["w=rls_filter([1,2,3,4],[1,2,3,4],0.99,0.1); assert len(w)==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define huffman_code_lengths(freqs:dict[str,int])->dict[str,int] return code length per symbol.","tests":["L=huffman_code_lengths({'a':5,'b':2,'c':1}); assert set(L.keys())=={'a','b','c'} and min(L.values())==1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define arithmetic_coder_interval(bits:str,p0:float)->tuple[float,float] encode binary string with probabilities (p0,1-p0); return final interval [low,high).","tests":["lo,hi=arithmetic_coder_interval('01',0.7); assert 0<=lo<hi<=1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define vigenere_encrypt(plaintext:str,key:str)->str A-Z only, uppercase output.","tests":["assert vigenere_encrypt('ATTACKATDAWN','LEMON')=='LXFOPVEFRNHR'"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define index_of_coincidence(text:str)->float for uppercase letters A-Z; ignore others.","tests":["ic=index_of_coincidence('AAAAABCCCC'); assert 0<ic<=1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define rsa_modinv(a:int,m:int)->int modular inverse using extended gcd (assume coprime).","tests":["assert rsa_modinv(3,11)==4"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define totient_phi(n:int)->int Euler's totient via factorization by trial division.","tests":["assert totient_phi(36)==12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define legendre_symbol(a:int,p:int)->int using Euler criterion (p odd prime).","tests":["assert legendre_symbol(2,7)==1 and legendre_symbol(3,7)==-1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define jacobi_symbol(a:int,n:int)->int generalization for odd n via product of Legendre symbols (reciprocity).","tests":["assert jacobi_symbol(1001,9907) in (-1,0,1)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define blum_blum_shub(seed:int,modulus:int,steps:int)->list[int] output bits parity of x_{k+1}=x_k^2 mod n (n=pq).","tests":["bits=blum_blum_shub(3,383,10); assert len(bits)==10 and set(bits)<= {0,1}"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define gray_code(n:int)->list[str] n-bit Gray code sequence.","tests":["g=gray_code(2); assert g in (['00','01','11','10'],['00','10','11','01'])"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define minimal_polynomial_mod2(poly:int)->int minimal polynomial degree of LFSR characteristic given feedback mask poly (including x^n and 1 bits). Return degree.","tests":["assert minimal_polynomial_mod2(0b1011)==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define triad_chord_frequencies(root_Hz:float,type_:str)->tuple[float,float,float] 'major' or 'minor': (root,root*2^{4/12},root*2^{7/12}) or (root,2^{3/12},2^{7/12}).","tests":["a=triad_chord_frequencies(440,'major'); b=triad_chord_frequencies(440,'minor'); assert a[1]>b[1] and abs(a[0]-440)<1e-9"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define midi_number_to_freq(n:int)->float f=440*2^{(n-69)/12}.","tests":["assert abs(midi_number_to_freq(69)-440.0)<1e-9"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define equal_temperament_ratio(semitones:int)->float 2^{semitones/12}.","tests":["assert abs(equal_temperament_ratio(12)-2.0)<1e-12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define acoustic_impedance(rho:float,c:float)->float Z=Ïc.","tests":["assert acoustic_impedance(1000,1500)==1.5e6"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define transmission_coefficient_water_air(Z1:float,Z2:float)->float pressure T=2Z2/(Z1+Z2) at boundary (normal incidence).","tests":["T=transmission_coefficient_water_air(1.5e6,408.0); assert 0<T<1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define snr_improvement_coherent_avg(N:int)->float improvement factor âN.","tests":["assert abs(snr_improvement_coherent_avg(9)-3.0)<1e-12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define coherence_time_from_linewidth(delta_nu:float)->float Ï_câ1/(Ï ÎÎ½).","tests":["import math; assert abs(coherence_time_from_linewidth(1e6)-1/math.pi/1e6)<1e-12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define neutrino_osc_probability_twoflavor(theta:float,dm2:float,L:float,E:float)->float P(Î½_eâÎ½_Î¼)=sin^2(2Î¸) sin^2(1.267 Îm^2 L / E) with dm2(eV^2), L(km), E(GeV).","tests":["p=neutrino_osc_probability_twoflavor(0.6,7.5e-5,295,0.6); assert 0<=p<=1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define flux_to_magnitude(F:float,F0:float=1.0)->float m=-2.5 log10(F/F0).","tests":["import math; assert abs(flux_to_magnitude(0.1)-2.5)<1e-9"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define parallax_distance_pc(p_arcsec:float)->float d=1/p.","tests":["assert abs(parallax_distance_pc(0.1)-10.0)<1e-12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define sun_synchronous_inclination(a:float,J2:float=1.08263e-3,R:float=6378e3)->float approximate inclination satisfying nodal precession â -2Ï/yr; implement simple iteration returning deg.","tests":["inc=sun_synchronous_inclination(700e3+6378e3); assert 95<inc<100"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define blackbody_total_power_sigmaA(T:float,A:float)->float ÏAT^4 with Ï=5.670374419e-8.","tests":["P=blackbody_total_power_sigmaA(300,1.0); assert 450< P < 500"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define tsallis_entropy(p:list[float],q:float)->float (1-âp_i^q)/(q-1) for qâ 1.","tests":["s=tsallis_entropy([0.5,0.5],2.0); assert abs(s-0.5)<1e-12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define gini_impurity(probs:list[float])->float 1-âp_i^2.","tests":["assert abs(gini_impurity([0.5,0.5])-0.5)<1e-12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define bhattacharyya_coefficient(p:list[float],q:list[float])->float ââ(p_i q_i).","tests":["bc=bhattacharyya_coefficient([0.5,0.5],[1,0]); assert abs(bc-0.70710678)<1e-6"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define knapsack_fractional(values:list[float],weights:list[float],W:float)->float greedy ratio algorithm.","tests":["v=knapsack_fractional([60,100,120],[10,20,30],50); assert abs(v-240)<1e-9"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define hungarian_min_square(cost:list[list[int]])->int minimum assignment cost (square matrix).","tests":["c=hungarian_min_square([[9,2,7],[6,4,3],[5,8,1]]); assert c==9"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define tsp_bruteforce(points:list[tuple[float,float]])->float minimal cycle length (start at 0).","tests":["d=tsp_bruteforce([(0,0),(1,0),(1,1),(0,1)]); assert 4.0<=d<=4.8285"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define travelling_salesman_2opt(points:list[tuple[float,float]])->float local improvement 2-opt length (start path 0..n-1..0).","tests":["d=travelling_salesman_2opt([(0,0),(1,0),(1,1),(0,1)]); assert d<=5.0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define k_center_greedy(points:list[tuple[float,float]],k:int)->list[int] farthest-first traversal indices.","tests":["idx=k_center_greedy([(0,0),(2,0),(0,2),(2,2)],2); assert len(idx)==2 and 0 in idx"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define graph_betweenness_centrality(n:int,edges:list[tuple[int,int]])->list[float] unweighted Brandes.","tests":["bc=graph_betweenness_centrality(4,[(0,1),(1,2),(2,3)]); assert max(bc)>0 and bc[0]==bc[3]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define pagerank_personalized(adj:list[list[int]],alpha:float,personal:list[float])->list[float] teleport to personal vector.","tests":["r=pagerank_personalized([[1],[0]],0.85,[1.0,0.0]); assert r[0]>r[1]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_vertex_cover_tree(n:int,edges:list[tuple[int,int]])->int DP on tree.","tests":["assert min_vertex_cover_tree(3,[(0,1),(1,2)])==1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define tree_diameter_weighted(n:int,edges:list[tuple[int,int,int]])->int longest path weight via two BFS/DFS.","tests":["d=tree_diameter_weighted(4,[(0,1,1),(1,2,2),(1,3,3)]); assert d==5"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define minimum_meeting_rooms(intervals:list[tuple[int,int]])->int interval partitioning.","tests":["assert minimum_meeting_rooms([(0,30),(5,10),(15,20)])==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define job_scheduling_weighted(intervals:list[tuple[int,int,int]])->int max weight non-overlap via DP.","tests":["assert job_scheduling_weighted([(1,3,50),(3,5,20),(6,19,100),(2,100,200)])==250"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define k_shortest_paths_acyclic(n:int,edges:list[tuple[int,int,int]],src:int,dst:int,k:int)->list[int] DAG k-shortest via DP; return lengths.","tests":["w=k_shortest_paths_acyclic(4,[(0,1,1),(1,3,1),(0,2,2),(2,3,1)],0,3,3); assert w[:2]==[2,3]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_cost_flow_simple(n:int,edges:list[tuple[int,int,int,int]],s:int,t:int,F:int)->int min cost to send F flow (small graphs).","tests":["c=min_cost_flow_simple(3,[(0,1,2,1),(1,2,2,1),(0,2,1,5)],0,2,2); assert c==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define network_simplex_assignment(cost:list[list[int]])->int solve balanced assignment via network simplex (small).","tests":["c=network_simplex_assignment([[4,1,3],[2,0,5],[3,2,2]]); assert c==5"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define markov_decision_policy_evaluation(P:list[list[list[float]]],R:list[list[float]],pi:list[int],gamma:float=0.9)->list[float] compute state values v=R_pi+Î³ P_pi v.","tests":["V=markov_decision_policy_evaluation([[[1,0],[0,1]],[[0,1],[1,0]]],[[[1,0],[0,1]],[[0,1],[1,0]]],[0,1],0.9); assert len(V)==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define policy_iteration_gridworld(reward:float,gamma:float,theta:float)->list[list[float]] 4x4 terminal at corners; return value grid after convergence (small).","tests":["V=policy_iteration_gridworld(-1,1.0,1e-3); assert len(V)==4 and len(V[0])==4"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define q_learning_tabular(P:list[list[list[float]]],R:list[list[float]],episodes:int,alpha:float,gamma:float,epsilon:float,seed:int=0)->list[list[float]] small MDP with 2 states 2 actions; return Q.","tests":["Q=q_learning_tabular([[[1,0],[0,1]],[[0,1],[1,0]]],[[1,0],[0,1]],100,0.5,0.9,0.1,1); assert len(Q)==2 and len(Q[0])==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define finite_horizon_dp_knapsack(weights:list[int],values:list[int],W:int,T:int)->int at most T items can be used (choose up to T).","tests":["assert finite_horizon_dp_knapsack([2,3,4],[3,4,5],5,2)==7"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define monte_carlo_integration_unit_circle(n:int,seed:int=0)->float estimate Ï via area fraction in square [-1,1]^2.","tests":["v=monte_carlo_integration_unit_circle(10000,1); assert 3.0<v<3.3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define inverse_transform_sampling_exponential(lam:float,n:int,seed:int=0)->list[float] U~(0,1), X=-ln(1-U)/Î».","tests":["xs=inverse_transform_sampling_exponential(1.0,100,1); assert len(xs)==100 and min(xs)>=0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define stratified_sampling_mean(n:int,seed:int=0)->float estimate mean of f(x)=x on [0,1] using n strata.","tests":["m=stratified_sampling_mean(1000,1); assert 0.45<m<0.55"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define antithetic_variates_integral(f, n:int, seed:int=0)->float Monte Carlo with antithetic pairs U and 1-U on f(x)=x^2.","tests":["v=antithetic_variates_integral(lambda x:x*x,1000,1); assert 0.30<v<0.35"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define quasi_monte_carlo_van_der_corput(n:int,base:int=2)->list[float] first n radical inverse values.","tests":["seq=quasi_monte_carlo_van_der_corput(4,2); assert seq[0]==0.5 and seq[1]==0.25"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define lagrange_interpolation(xs:list[float],ys:list[float],x:float)->float evaluate interpolating polynomial.","tests":["assert abs(lagrange_interpolation([0,1],[0,1],0.5)-0.5)<1e-12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define newton_polynomial_coeffs(xs:list[float],ys:list[float])->list[float] divided differences; evaluate with helper eval_newton(xs,coeffs,x).","tests":["c=newton_polynomial_coeffs([0,1,2],[1,3,7]); val=(lambda xs,c,x: (lambda v:(v))([c[0]+(x-xs[0])*(c[1]+(x-xs[1])*c[2])][0]))([0,1,2],c,3); assert isinstance(val,(int,float))"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define cubic_spline_eval(x:list[float],y:list[float],xq:float)->float natural spline evaluation (build and eval).","tests":["v=cubic_spline_eval([0,1,2],[0,1,0],1.5); assert v>0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define adaptive_simpson(f,a:float,b:float,eps:float)->float recursive adaptive Simpson.","tests":["import math; v=adaptive_simpson(math.sin,0,math.pi,1e-8); assert abs(v-2.0)<1e-7"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define legendre_polynomial(n:int,x:float)->float via recurrence.","tests":["assert abs(legendre_polynomial(2,0.5)-(0.5*(3*0.5**2-1)))<1e-12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define chebyshev_nodes(n:int,a:float,b:float)->list[float] first-kind nodes mapped to [a,b].","tests":["xs=chebyshev_nodes(3,-1,1); assert len(xs)==3 and abs(xs[1])<1e-9"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define gaussian_quadrature_npt(f,a:float,b:float,n:int)->float using numpy-like precomputed nodes/weights for nâ{2,3,4,5} (hardcode).","tests":["import math; v=gaussian_quadrature_npt(lambda x:x*x,0,1,3); assert abs(v-1/3)<1e-6"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define bvp_shooting_linear(ypp_coeff:float,a:float,b:float,ya:float,yb:float,n:int)->list[float] solve y''=c (constant) with BC y(a)=ya,y(b)=yb via analytic or shooting; return grid solution.","tests":["y=bvp_shooting_linear(2.0,0.0,1.0,0.0,0.0,11); assert abs(y[0])<1e-9 and abs(y[-1])<1e-9"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define finite_difference_1d_neumann(f:callable,n:int)->list[float] approximate derivative f'(x) at n points in [0,1] with central differences interior and one-sided at ends; return list.","tests":["import math; d=finite_difference_1d_neumann(math.sin,5); assert len(d)==5"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define dtw_distance(a:list[float],b:list[float])->float dynamic time warping distance (L2).","tests":["d=dtw_distance([1,2,3],[2,2,2]); assert d>=0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define sakoe_chiba_band_dtw(a:list[float],b:list[float],w:int)->float DTW with band width w.","tests":["d=sakoe_chiba_band_dtw([1,2,3,4],[1,1,2,3],1); assert d>=0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define hidden_markov_baum_welch(obs:list[int],A:list[list[float]],B:list[list[float]],pi:list[float],iters:int)->tuple return learned (A,B,pi) (2-state small).","tests":["A2,B2,pi2=hidden_markov_baum_welch([0,1,0,1],[[0.6,0.4],[0.3,0.7]],[[0.7,0.3],[0.4,0.6]],[0.5,0.5],5); assert len(A2)==2 and len(B2)==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define forward_backward_hmm_log(obs:list[int],A:list[list[float]],B:list[list[float]],pi:list[float])->float return log-likelihood using log-sum-exp.","tests":["ll=forward_backward_hmm_log([0,1,0],[[0.9,0.1],[0.2,0.8]],[[0.6,0.4],[0.3,0.7]],[0.5,0.5]); assert isinstance(ll,float)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define kohonen_som_1d(points:list[tuple[float,float]],neurons:int,epochs:int,lr:float)->list[tuple[float,float]] 1D SOM positions (small).","tests":["W=kohonen_som_1d([(0,0),(1,1)],3,10,0.5); assert len(W)==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define spectral_graph_partition_2way(L:list[list[float]])->list[int] Fiedler vector sign partition; L is Laplacian.","tests":["labels=spectral_graph_partition_2way([[1,-1,0],[-1,2,-1],[0,-1,1]]); assert set(labels)=={0,1}"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define graph_laplacian(adj:list[list[int]])->list[list[int]] L=D-A.","tests":["L=graph_laplacian([[0,1],[1,0]]); assert L==[[1,-1],[-1,1]]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define morse_potential_energy(r:float,De:float,a:float,re:float)->float V=De(1-exp(-a(r-re)))^2.","tests":["V=morse_potential_energy(1.0,5.0,2.0,1.0); assert abs(V)<1e-12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define lennard_jones_force(r:float,epsilon:float,sigma:float)->float F=24Îµ(2(Ï/r)^12-(Ï/r)^6)/r.","tests":["F=lennard_jones_force(1.5,1.0,1.0); assert isinstance(F,float)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define radial_distribution_gas(r:float,rho:float)->float pair correlation g(r)â1 for ideal gas; return 1.0 (toy).","tests":["assert radial_distribution_gas(1.0,1.0)==1.0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define potential_of_mean_force(g:list[float],T:float)->list[float] W(r)=-kT ln g(r) with k=1.380649e-23.","tests":["W=potential_of_mean_force([1.0,2.0],300); assert W[0]==0.0 and W[1]<0.0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define diffusion_msd_1d(D:float,t:float)->float mean squared displacement 2Dt.","tests":["assert abs(diffusion_msd_1d(1.0,3.0)-6.0)<1e-12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define sersic_profile_I(R:float,Ie:float,Re:float,n:float)->float I(R)=I_e exp(-b_n[(R/Re)^{1/n}-1]) with b_nâ2n-1/3.","tests":["I=sersic_profile_I(2.0,1.0,1.0,4.0); assert 0<I<1.0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define lambert_w_branch0(x:float)->float principal Lambert W using Newton iterations.","tests":["w=lambert_w_branch0(1.0); assert 0.5<w<1.0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define planck_integrated_power_fraction(T:float,lambda_cut:float)->float fraction of blackbody power with Î»<Î»_cut via numeric integration 0..â (use substitution).","tests":["f=planck_integrated_power_fraction(5800,500e-9); assert 0<f<1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define air_mass_simple(z_deg:float)->float airmass â 1/cos z for zenith angle z (deg).","tests":["import math; assert abs(air_mass_simple(60)-2.0)<1e-12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define sn_ratio_linear_to_db(r:float)->float 20 log10(r).","tests":["import math; assert abs(sn_ratio_linear_to_db(2.0)-6.020599913)<1e-9"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define matched_filter_snr(signal:list[float],template:list[float],noise_var:float)->float compute (tÂ·s)^2/(noise_var * ||t||^2).","tests":["s=matched_filter_snr([1,2,3],[0,1,0],1.0); assert s==4.0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define bayes_factor_binomial(k:int,n:int,p0:float)->float marginal likelihood ratio vs uniform Beta(1,1) alternative: BF= p0^k(1-p0)^{n-k} / Beta(k+1,n-k+1).","tests":["bf=bayes_factor_binomial(5,10,0.5); assert bf>0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define beta_posterior_mean(k:int,n:int,alpha:float,beta:float)->float mean of Beta(alpha+k, beta+n-k).","tests":["assert abs(beta_posterior_mean(5,10,1,1)-0.5)<1e-12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define student_t_pdf(x:float,nu:int)->float PDF.","tests":["import math; v=student_t_pdf(0.0,5); assert v>0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define student_t_cdf_sym(x:float,nu:int)->float symmetric CDF via betainc; implement numeric integration if needed.","tests":["p=student_t_cdf_sym(0.0,5); assert abs(p-0.5)<1e-6"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define hedonic_price_index(prices:list[float],qualities:list[float])->float slope of regression of ln(price) on quality; return exp(slope).","tests":["v=hedonic_price_index([1,2,4],[0,1,2]); assert 1.5<v<3.0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define cagr(begin:float,end:float,years:float)->float ((end/begin)^{1/years}-1).","tests":["assert abs(cagr(100,121,2)-0.1)<1e-12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define black_scholes_put(S:float,K:float,r:float,sigma:float,T:float)->float put price.","tests":["p=black_scholes_put(100,100,0.0,0.2,1.0); assert 7<p<9"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define binomial_option_price_call(S:float,K:float,r:float,sigma:float,T:float,steps:int)->float CRR model.","tests":["c=binomial_option_price_call(100,100,0.0,0.2,1.0,100); assert 7<c<10"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define value_at_risk_historical(returns:list[float],alpha:float)->float VaR at level alpha (e.g., 0.95).","tests":["v=value_at_risk_historical([-0.1,0.02,-0.05,0.03],0.75); assert v<=0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define sharpe_ratio(returns:list[float],rf:float)->float mean excess / std (population).","tests":["s=sharpe_ratio([0.1,0.0,0.2],0.0); assert s>0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define markowitz_min_variance(weights:list[float],cov:list[list[float]])->float portfolio variance w^T Î£ w (weights sum to 1 assumed).","tests":["v=markowitz_min_variance([0.5,0.5],[[1,0],[0,1]]); assert abs(v-1.0*0.5)<1e-12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define portfolio_variance(weights:list[float],cov:list[list[float]])->float general w^T Î£ w (weights not necessarily sum 1).","tests":["assert abs(portfolio_variance([1,2],[[1,0.5],[0.5,1]])- (1+4+2.0))<1e-12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define kelly_fraction(p:float,b:float)->float f*=(bp-(1-p))/b (clip to [0,1]).","tests":["assert abs(kelly_fraction(0.6,1.0)-0.2)<1e-12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define queue_m_m_1_waiting_time(lam:float,mu:float)->float W=1/(mu-lam) for lam<mu.","tests":["assert abs(queue_m_m_1_waiting_time(1.0,2.0)-1.0)<1e-12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define queue_m_m_c_P0(lam:float,mu:float,c:int)->float idle probability using Erlang C formula.","tests":["p0=queue_m_m_c_P0(1.0,1.0,2); assert 0<p0<1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define erlang_c_delay_prob(lam:float,mu:float,c:int)->float delay probability.","tests":["p=erlang_c_delay_prob(0.9,1.0,2); assert 0<p<1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define newsvendor_critical_fractile(cu:float,co:float)->float F*=cu/(cu+co).","tests":["assert abs(newsvendor_critical_fractile(3,1)-0.75)<1e-12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define economic_order_quantity(D:float,S:float,H:float)->float EOQ=sqrt(2DS/H).","tests":["import math; assert abs(economic_order_quantity(1000,100,2)-math.sqrt(100000))<1e-9"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define critical_path_length(n:int,edges:list[tuple[int,int,int]])->int longest path length in DAG.","tests":["L=critical_path_length(4,[(0,1,3),(1,2,2),(0,3,4),(3,2,1)]); assert L==5"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define max_flow_min_cost_assignment(cost:list[list[int]])->int solve assignment via min-cost max-flow.","tests":["c=max_flow_min_cost_assignment([[4,1,3],[2,0,5],[3,2,2]]); assert c==5"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define stable_roommate_algorithm(prefs:list[list[int]])->list[int]|None Gale-Shapley variant for SR problem (small n even). Return matching or None.","tests":["res=stable_roommate_algorithm([[1,0],[0,1]]); assert res in ([1,0],None)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define edit_distance_affine_gap(a:str,b:str,gap_open:int,gap_extend:int)->int affine gap penalties.","tests":["d=edit_distance_affine_gap('GATTACA','GCATGCU',2,1); assert d>=0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define smith_waterman_local(a:str,b:str,match:int,mismatch:int,gap:int)->int local alignment score.","tests":["s=smith_waterman_local('ACACACTA','AGCACACA',2,-1,-1); assert s>0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define needleman_wunsch_global(a:str,b:str,match:int,mismatch:int,gap:int)->int global alignment score.","tests":["s=needleman_wunsch_global('GATTACA','GCATGCU',1,-1,-1); assert isinstance(s,int)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define kmer_count(seq:str,k:int)->dict[str,int] count overlapping kmers (uppercase).","tests":["d=kmer_count('ATAT',2); assert d['AT']==2 and d['TA']==1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define gc_skew(seq:str)->list[int] cumulative (G-C)/(G+C) per position (ignore non-ACGT).","tests":["s=gc_skew('GCGC'); assert s[-1]==0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define codon_optimize_simple(seq:str)->str replace RNA codons with most frequent synonymous (use small table mapping).","tests":["opt=codon_optimize_simple('AUGUUUUGA'); assert opt.startswith('AUG')"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define protein_isoelectric_point(seq:str)->float compute approximate pI via bisection using pKa sets for N-term,C-term,DEHKR (simple).","tests":["pI=protein_isoelectric_point('ACDEK'); assert 3<pI<11"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define dna_reverse_complement(seq:str)->str mapping A<->T,C<->G.","tests":["assert dna_reverse_complement('ATGC')=='GCAT'"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define crisper_pam_sites(seq:str,pam:str)->list[int] return indices where seq[i:i+len(pam)] matches PAM (use N wildcard).","tests":["idx=crisper_pam_sites('AAGGTCGGG','NGG'); assert idx==[1,6]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define enzyme_kinetics_progress_curve(S0:float,E0:float,k1:float,k2:float,k_1:float,t:float)->float use quasi-steady-state approximation to return S(t) (simple explicit formula).","tests":["S=enzyme_kinetics_progress_curve(10,1,1,1,0.1,1); assert 0<S<10"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define compartment_model_two_box(N0:float,k12:float,k21:float,t:float)->tuple[float,float] solve dN1/dt=-k12 N1+k21 N2, N1+N2=N0; return (N1,N2).","tests":["N1,N2=compartment_model_two_box(100,0.1,0.05,10); assert abs(N1+N2-100)<1e-6"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define sirs_model_step(S:float,I:float,R:float,beta:float,gamma:float,xi:float,dt:float)->tuple one Euler step (RâS at rate Î¾).","tests":["S1,I1,R1=sirs_model_step(999,1,0,0.3,0.1,0.01,1.0); assert abs(S1+I1+R1-1000)<1e-6"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define basic_epidemic_final_size(R0:float)->float solve z=1-exp(-R0 z) via fixed-point; return final infected fraction z.","tests":["z=basic_epidemic_final_size(2.0); assert 0.7<z<0.9"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define hill_binding_fraction(L:float,Kd:float,n:float)->float Î¸=L^n/(Kd^n+L^n).","tests":["assert abs(hill_binding_fraction(1,1,2)-0.5)<1e-12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define enzyme_inhibition_uncompetitive(Vmax:float,Km:float,S:float,I:float,Ki:float)->float v=Vmax*S/(Km+S) * 1/(1+I/Ki).","tests":["v=enzyme_inhibition_uncompetitive(100,10,10,10,10); assert abs(v-50.0)<1e-9"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define gaussian_mixture_em_1d(data:list[float],k:int,iters:int,seed:int=0)->tuple means sorted ascending (variances and weights optional). Return means only.","tests":["m=gaussian_mixture_em_1d([0,-0.1,0.1,5,5.2,4.8],2,20,1); assert len(m)==2 and m[0]<m[1]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define kld_categorical(p:list[float],q:list[float])->float KL(p||q) natural logs (ignore zeros).","tests":["kl=kld_categorical([0.5,0.5],[0.25,0.75]); assert kl>0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define wasserstein_barycenter_1d(samples:list[list[float]])->list[float] pointwise median of sorted samples (equal weights).","tests":["b=wasserstein_barycenter_1d([[0,1,2],[0,2,4]]); assert b==[0,1.5,3.0]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define earth_insolation_at_distance(S0:float,a_AU:float)->float S=S0/a^2.","tests":["assert abs(earth_insolation_at_distance(1361,1.524)-1361/1.524**2)<1e-9"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define orbital_period_from_semi_major_axis(a_m:float,mu:float)->float T=2Ïâ(a^3/Î¼).","tests":["import math; T=orbital_period_from_semi_major_axis(7000e3,3.986004418e14); assert 5600<T/60<6100"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define hill_sphere_radius(a:float,Î¼_p:float,Î¼_s:float)->float r=a*(Î¼_p/(3Î¼_s))^{1/3}.","tests":["r=hill_sphere_radius(1.5e11,3.986e14,1.327e20); assert 1e8<r<2e9"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define lambert_problem_time_of_flight(r1:float,r2:float,theta:float,mu:float)->float simple two-body Lambert TOF using Battin (implement minimal); small angles only.","tests":["t=lambert_problem_time_of_flight(7000e3,8000e3,0.1,3.986004418e14); assert t>0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define great_circle_distance_km(lat1:float,lon1:float,lat2:float,lon2:float)->float haversine with R=6371 km.","tests":["d=great_circle_distance_km(0,0,0,1); assert 100<d<120"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define rhumb_line_distance_km(lat1:float,lon1:float,lat2:float,lon2:float)->float loxodrome distance (simple formula).","tests":["d=rhumb_line_distance_km(0,0,0,1); assert 100<d<120"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define solar_elevation_simple(lat:float,decl:float,hour_angle:float)->float Î±=arcsin(sinÏ sinÎ´ + cosÏ cosÎ´ cosH) in degrees.","tests":["import math; a=solar_elevation_simple(0,0,0); assert abs(a-90)<1e-12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define blackbody_color_temperature_from_ratio(R:float,lambda1:float,lambda2:float)->float solve for T s.t. B(Î»1,T)/B(Î»2,T)=R via bisection (use Planck).","tests":["T=blackbody_color_temperature_from_ratio(1.0,500e-9,600e-9); assert 4000<T<8000"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define radiation_pressure_intensity(I:float)->float P=I/c for absorption with c=299792458.","tests":["assert abs(radiation_pressure_intensity(1e3)-1e3/299792458)<1e-12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define snells_vector_refraction(n1:float,n2:float,inc:list[float],normal:list[float])->list[float] compute refracted unit vector using vector form; return None if TIR.","tests":["v=snells_vector_refraction(1.0,1.5,[0, -1, 0],[0,1,0]); assert abs(v[1]+1.0/1.5)<1e-6 or v is not None"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define monte_carlo_radiative_transfer_simple(albedo:float,steps:int,seed:int=0)->float fraction absorbed in slab with single-scattering albedo (toy 1D).","tests":["f=monte_carlo_radiative_transfer_simple(0.8,1000,1); assert 0<=f<=1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define radiative_conductive_equilibrium(T0:float,q:float,k:float,epsilon:float,sigma:float=5.670374419e-8)->float solve ÎµÏT^4 + k(T-T0) = q for T via Newton.","tests":["T=radiative_conductive_equilibrium(300,1000,10,0.9); assert T>300"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define thermistor_temperature_beta(R:float,R0:float,T0:float,beta:float)->float T=1/(1/T0 + (1/Î²) ln(R/R0)).","tests":["import math; T=thermistor_temperature_beta(2000,1000,298.15,3950); assert T<298.15"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define bisection_root(f,a:float,b:float,tol:float)->float find root in [a,b].","tests":["import math; r=bisection_root(lambda x:x**2-2,0,2,1e-9); assert abs(r-math.sqrt(2))<1e-6"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define newton_root(f,df,x0:float,tol:float)->float Newton-Raphson.","tests":["import math; r=newton_root(lambda x:x**3-1,lambda x:3*x**2,0.5,1e-9); assert abs(r-1.0)<1e-6"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define brent_root(f,a:float,b:float,tol:float)->float implement Brent's method (simple).","tests":["import math; r=brent_root(lambda x:math.cos(x)-x,0,1,1e-6); assert abs(r-0.739085)<1e-5"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define conjugate_gradient_quadratic(A:list[list[float]],b:list[float],x0:list[float],tol:float)->list[float] CG for SPD matrix.","tests":["x=conjugate_gradient_quadratic([[4,1],[1,3]],[1,2],[0,0],1e-10); assert all(abs(a-b)<1e-6 for a,b in zip(x,[0.090909,0.636363]))"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define heaviside_step(x:float)->int H(0)=1 (physicist), else 0 or 1 depending sign.","tests":["assert heaviside_step(-1)==0 and heaviside_step(0)==1 and heaviside_step(2)==1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define dirac_delta_approx(x:float,eps:float)->float 1/(Ï) * eps/(x^2+eps^2).","tests":["import math; assert abs(dirac_delta_approx(0,0.1)-1/math.pi/0.1)<1e-9"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define fractional_derivative_grunwald_letnikov(f,alpha:float,x:float,h:float,n:int)->float approximate D^Î± f at x using GL sum.","tests":["v=fractional_derivative_grunwald_letnikov(lambda t:t,0.5,1.0,1e-3,1000); assert isinstance(v,float)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define fractional_brownian_motion(H:float,n:int,seed:int=0)->list[float] generate with Cholesky of covariance (small n).","tests":["x=fractional_brownian_motion(0.7,32,1); assert len(x)==32"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define hurst_exponent_rs(series:list[float])->float rescaled range estimator (simple).","tests":["H=hurst_exponent_rs([0,1,0,1,0,1,0,1]); assert 0<H<1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define lyapunov_exponent_lorenz(sigma:float,beta:float,rho:float,dt:float,steps:int)->float estimate largest exponent by tangent vector renormalization.","tests":["l=lyapunov_exponent_lorenz(10.0,8/3,28.0,0.01,1000); assert isinstance(l,float)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define rk4_lotka_volterra(x0:float,y0:float,alpha:float,beta:float,delta:float,gamma:float,dt:float,steps:int)->tuple[float,float] return final (x,y).","tests":["x,y=rk4_lotka_volterra(10,5,1.1,0.4,0.1,0.4,0.01,1000); assert x>0 and y>0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define integrate_pendulum_energy(L:float,g:float,theta0:float)->float compute total mechanical energy per unit mass: E=gL(1-cosÎ¸)+0 for initial rest.","tests":["import math; E=integrate_pendulum_energy(1.0,9.81,math.pi/3); assert 0<E<20"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define transfer_function_eval(num:list[float],den:list[float],s:complex)->complex evaluate N(s)/D(s).","tests":["v=transfer_function_eval([1],[1,1],1j); assert abs(abs(v)-1/math.sqrt(2))<1e-6"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define bode_phase(num:list[float],den:list[float],omega:float)->float phase angle (rad) of G(jÏ).","tests":["p=bode_phase([1],[1,1],1.0); assert -1.6<p<-0.7"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define root_locus_real_axis_segments(poles:list[complex],zeros:list[complex])->list[tuple[float,float]] intervals on real axis where locus lies (odd # of real poles+zeros to right).","tests":["segs=root_locus_real_axis_segments([0+0j,-2+0j],[]); assert any(a<b for a,b in segs)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define routh_hurwitz_stability(coeff:list[float])->bool return True if all first-column elements positive (no sign changes).","tests":["assert routh_hurwitz_stability([1,2,3,4])"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define discrete_transfer_function_response(b:list[float],a:list[float],x:list[float])->list[float] IIR filter output (causal).","tests":["y=discrete_transfer_function_response([1],[1], [1,0,0,0]); assert y==[1,0,0,0]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define kalman_constant_acceleration_1d(z:list[float],dt:float,sigma_a:float,sigma_z:float)->list[float] track [x,v,a] with constant-acceleration model; return positions.","tests":["xs=kalman_constant_acceleration_1d([0,1,0,1],1.0,0.1,1.0); assert len(xs)==4"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define discrete_wavelet_haar_1level(x:list[float])->tuple[list[float],list[float]] (approx,detail).","tests":["a,d=discrete_wavelet_haar_1level([1,2,3,4]); assert a==[1.5,3.5] and d==[-0.5,-0.5]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define inverse_wavelet_haar_1level(a:list[float],d:list[float])->list[float] reconstruct.","tests":["x=inverse_wavelet_haar_1level([1.5,3.5],[-0.5,-0.5]); assert x==[1.0,2.0,3.0,4.0]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define convolution_theorem_check(a:list[float],b:list[float])->bool verify FFT conv equals direct (within 1e-6).","tests":["assert convolution_theorem_check([1,2,3],[4,5])"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define cepstral_liftering(c:list[float],L:int)->list[float] apply sinusoidal lifter.","tests":["r=cepstral_liftering([1,2,3,4,5],22); assert len(r)==5"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define mfcc_simple(frame:list[float],sr:int,n_mels:int)->list[float] crude MFCC: power spectrum -> mel filterbank -> log -> DCT (return first 13 or n_mels if smaller).","tests":["c=mfcc_simple([0]*512,16000,20); assert len(c)>=10"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define ransac_line(points:list[tuple[float,float]],iters:int,th:float,seed:int=0)->tuple slope and intercept of best inlier set.","tests":["m,b=ransac_line([(0,0),(1,1),(2,2),(3,3),(2,0)],100,0.2,1); assert abs(m-1.0)<0.2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define pnp_gauss_newton(points3d:list[tuple[float,float,float]],points2d:list[tuple[float,float]],f:float,iters:int)->tuple[R:list[list[float]],t:list[float]] simple PnP (no distortion) assuming small rotation; return identity for trivial aligned case.","tests":["R,t=pnp_gauss_newton([(0,0,1)],[(0,0)],1.0,5); assert len(R)==3 and len(t)==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define triangulate_two_views(P1:list[list[float]],P2:list[list[float]],x1:tuple[float,float],x2:tuple[float,float])->tuple[float,float,float] linear triangulation (DLT).","tests":["X=triangulate_two_views([[1,0,0,0],[0,1,0,0],[0,0,1,0]],[[1,0,0,-1],[0,1,0,0],[0,0,1,0]],(0,0),(0,0)); assert len(X)==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define essential_matrix_from_RT(R:list[list[float]],t:list[float])->list[list[float]] E=[t]_x R.","tests":["E=essential_matrix_from_RT([[1,0,0],[0,1,0],[0,0,1]],[1,0,0]); assert E[1][2]==1 and E[2][1]==-1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define eight_point_fundamental_normalized(pts1:list[tuple[float,float]],pts2:list[tuple[float,float]])->list[list[float]] compute F with rank-2 enforcement (small sample).","tests":["F=eight_point_fundamental_normalized([(0,0),(1,0),(0,1),(1,1),(2,0),(0,2),(2,2),(3,1)],[(0,0),(1,0),(0,1),(1,1),(2,0),(0,2),(2,2),(3,1)]); assert len(F)==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define procrustes_align_2d(A:list[tuple[float,float]],B:list[tuple[float,float]])->tuple[R:list[list[float]],t:list[float],s:float] return rotation, translation, scale aligning A to B.","tests":["R,t,s=procrustes_align_2d([(0,0),(1,0)],[(1,1),(2,1)]); assert abs(t[0]-1)<1e-6 and abs(t[1]-1)<1e-6"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define kabsch_rmsd(P:list[tuple[float,float,float]],Q:list[tuple[float,float,float]])->float compute RMSD after optimal rotation (no scaling).","tests":["r=kabsch_rmsd([(0,0,0),(1,0,0)],[(0,0,0),(0,1,0)]); assert r>0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define rmsd_superposition_2d(A:list[tuple[float,float]],B:list[tuple[float,float]])->float minimal RMSD with rotation+translation.","tests":["r=rmsd_superposition_2d([(0,0),(1,0)],[(1,1),(2,1)]); assert r<1e-6"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define nearest_neighbor_tsp(points:list[tuple[float,float]],start:int=0)->float tour length by greedy NN.","tests":["d=nearest_neighbor_tsp([(0,0),(1,0),(1,1),(0,1)]); assert d>=4.0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define convex_hull_monge(points:list[tuple[float,float]])->list[tuple[float,float]] monotone chain hull CCW.","tests":["h=convex_hull_monge([(0,0),(1,0),(1,1),(0,1),(0.5,0.5)]); assert set(h)=={(0,0),(1,0),(1,1),(0,1)}"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define line_polygon_intersection(line:tuple[float,float,float],poly:list[tuple[float,float]])->bool check if line ax+by+c=0 intersects polygon (any edge).","tests":["assert line_polygon_intersection((1,0,-0.5),[(0,0),(1,0),(1,1),(0,1)])"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define point_in_polygon_winding(pt:tuple[float,float],poly:list[tuple[float,float]])->bool winding number method.","tests":["assert point_in_polygon_winding((0.5,0.5),[(0,0),(1,0),(1,1),(0,1)])"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define poisson_surface_reconstruction_1d(points:list[tuple[float,float]])->list[tuple[float,float]] fit least-squares line to points and return two endpoints over x-range.","tests":["L=poisson_surface_reconstruction_1d([(0,0),(1,1),(2,2)]); assert len(L)==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define bilinear_interpolation(img:list[list[float]],x:float,y:float)->float sample at fractional coords (clamp edges).","tests":["v=bilinear_interpolation([[0,1],[2,3]],0.5,0.5); assert abs(v-1.5)<1e-9"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define cubic_convolution_interpolation_1d(y:list[float],x:float,a:float=-0.5)->float Keys kernel.","tests":["v=cubic_convolution_interpolation_1d([0,1,0,0],1.2); assert 0<v<1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define poisson_blend_1d(target:list[float],source:list[float],mask:list[int],iters:int)->list[float] solve 1D Poisson blending with Gauss-Seidel.","tests":["out=poisson_blend_1d([0,0,0,0],[0,1,1,0],[0,1,1,0],50); assert 0<out[1]<1 and 0<out[2]<1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define seam_carving_energy(img:list[list[int]])->list[list[float]] simple energy |âx|+|ây|.","tests":["E=seam_carving_energy([[1,2,3],[4,5,6],[7,8,9]]); assert E[1][1]>0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define min_vertical_seam_cost(E:list[list[float]])->float DP minimal seam energy.","tests":["c=min_vertical_seam_cost([[1,2],[1,1],[2,1]]); assert c==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define poisson_point_process_1d(lam:float,T:float,seed:int=0)->list[float] event times using exponential inter-arrivals.","tests":["ts=poisson_point_process_1d(1.0,5.0,1); assert ts[-1]<=5.0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define hawkes_process_1d(mu:float,alpha:float,beta:float,T:float,seed:int=0)->list[float] Ogata thinning (small).","tests":["ts=hawkes_process_1d(0.1,0.5,1.0,2.0,1); assert all(0<=t<=2.0 for t in ts)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define queue_mg1_pk_formula(lam:float,mean_s:float,second_moment:float)->float waiting time Wq= lam*E[S^2]/(2(1-Ï)) - mean_s*(Ï/(2(1-Ï)))? Use P-K: Wq=lam*E[S^2]/(2(1-Ï)); Ï=lam*mean_s.","tests":["Wq=queue_mg1_pk_formula(0.5,1.0,2.0); assert Wq>0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define cpu_mips_time(mips:float,instructions:int)->float seconds = instructions/(mips*1e6).","tests":["assert abs(cpu_mips_time(100,200_000_000)-2.0)<1e-12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define cache_hit_ratio_lru(trace:list[int],capacity:int)->float simulate LRU; return hit ratio.","tests":["r=cache_hit_ratio_lru([1,2,1,3,1,2,4],2); assert 0<=r<=1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define bloom_fp_rate(m:int,k:int,n:int)->float approximate false positive rate (1-exp(-kn/m))^k.","tests":["fp=bloom_fp_rate(1000,3,100); assert 0<fp<1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define consistent_hash_assign(nodes:list[str],keys:list[str],replicas:int=3)->dict[str,str] ring hash with md5; map keys to node.","tests":["m=consistent_hash_assign(['A','B'],['k1','k2']); assert set(m.values())<={'A','B'}"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define tcp_rtt_estimator(samples:list[float],alpha:float=0.125,beta:float=0.25)->tuple[float,float] return (SRTT,RTTVAR) using RFC formulas.","tests":["srtt,rttv=tcp_rtt_estimator([100,120,110,130]); assert srtt>0 and rttv>=0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define leaky_bucket_shaper(bits:list[int],rate:float,burst:float)->list[int] pass/fail per bit arrival time at 1 unit intervals (toy).","tests":["o=leaky_bucket_shaper([1]*10,1.0,2.0); assert len(o)==10"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define shortest_common_supersequence_len(a:str,b:str)->int compute SCS length via DP.","tests":["assert shortest_common_supersequence_len('abac','cab')==5"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define minimal_edit_script(a:str,b:str)->list[str] operations 'I x','D x','S x->y' for one optimal edit path (Levenshtein).","tests":["ops=minimal_edit_script('abc','yabd'); assert isinstance(ops,list)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define run_length_decode(s:str)->str inverse of RLE like '3A1B'.","tests":["assert run_length_decode('4W1B2W')=='WWWWBWW'"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define arithmetic_mean_geometric_mean_ratio(a:list[float])->float AM/GM.","tests":["import math; assert abs(arithmetic_mean_geometric_mean_ratio([1,4])-(2.5/math.sqrt(4)))<1e-12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define harmonic_mean(nums:list[float])->float n/(â1/x).","tests":["assert abs(harmonic_mean([1,2])- (2/(1+0.5)))<1e-12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define dirichlet_eta(s:float,n:int)->float Î·(s)=â_{k=1}^n (-1)^{k-1}/k^s.","tests":["v=dirichlet_eta(1.0,100000); assert abs(v-0.693)<1e-3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define riemann_zeta_via_eta(s:float,n:int)->float Î¶(s)=Î·(s)/(1-2^{1-s}).","tests":["z=riemann_zeta_via_eta(2.0,10000); assert abs(z-1.6449)<1e-3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define prime_counting_pi_approx(n:int)->float use Riemann R(x) approximation via logarithmic integral li(x) (use series approx).","tests":["p=prime_counting_pi_approx(1000); assert 100<p<200"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define legendre_gauss_nodes_weights(n:int)->tuple[list[float],list[float]] compute nodes/weights via eigenvalue method (Golub-Welsch) using small n implementation (no numpy).","tests":["x,w=legendre_gauss_nodes_weights(3); assert len(x)==3 and len(w)==3 and abs(sum(w)-2)<1e-6"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define eigen_decomposition_jacobi(A:list[list[float]],tol:float=1e-10)->tuple[list[float],list[list[float]]] symmetric Jacobi method.","tests":["lam,V=eigen_decomposition_jacobi([[2,1],[1,2]],1e-8); assert abs(sorted(lam)[0]-1)<1e-3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define page_hinkley_test(x:list[float],delta:float,lam:float)->int return index of detected change or -1.","tests":["i=page_hinkley_test([0,0,0,1,1,1],0.1,1.0); assert -1<=i<len([0,0,0,1,1,1])"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define cusum_change_detect(x:list[float],k:float,h:float)->int return index when CUSUM exceeds h else -1.","tests":["i=cusum_change_detect([0,0,0,1,1,1,1],0.2,2.0); assert -1<=i<7"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define kalman_smoother_rts(A:list[list[float]],C:list[list[float]],Q:list[list[float]],R:list[list[float]],y:list[list[float]],x0:list[float],P0:list[list[float]])->list[list[float]] return smoothed states (RauchâTungâStriebel).","tests":["xs=kalman_smoother_rts([[1]],[[1]],[[1]],[[1]],[[0],[0]], [0],[ [1] ]); assert len(xs)==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define extended_kalman_step(f,F,h,H,Q,R,x,P,z)->tuple one EKF step with given Jacobians.","tests":["xn,Pn=extended_kalman_step(lambda x:x,lambda x:1,lambda x:x,lambda x:1,1,1,0,1,0); assert isinstance(xn,(int,float))"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define unscented_transform(mean:list[float],cov:list[list[float]],alpha:float,beta:float,kappa:float)->tuple[sigmas,weights_m,weights_c] (small 1D/2D).","tests":["S,wm,wc=unscented_transform([0.0],[ [1.0] ],1e-3,2.0,0); assert len(S)==3 and abs(sum(wm)-1.0)<1e-9"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define ar_kalman_estimate(y:list[float],p:int)->list[float] estimate AR(p) coefficients via Yule-Walker (solve Toeplitz).","tests":["a=ar_kalman_estimate([0,1,0,-1]*8,2); assert len(a)==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define toeplitz_solve(c:list[float],r:list[float],b:list[float])->list[float] Levinson recursion (Hermitian Toeplitz).","tests":["x=toeplitz_solve([1,0.5],[1,0.5],[1,0]); assert len(x)==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define kolmogorov_smirnov_statistic(sample:list[float],cdf)->float KS one-sample D.","tests":["D=kolmogorov_smirnov_statistic([0.1,0.4,0.9],lambda x:x); assert 0<=D<=1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define wasserstein_distance_discrete(p:list[float],q:list[float])->float 1-Wasserstein on discrete line with unit spacing.","tests":["d=wasserstein_distance_discrete([0,1,0],[1,0,0]); assert abs(d-1.0)<1e-9"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define em_algorithm_coin_mixing(heads:list[int],tosses:list[int],iters:int)->tuple[float,float,float] estimate (pi,pA,pB).","tests":["pi,pA,pB=em_algorithm_coin_mixing([8,3,9],[10,10,10],50); assert 0<=pi<=1 and 0<=pA<=1 and 0<=pB<=1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define gaussian_naive_bayes_train(X:list[list[float]],y:list[int])->tuple[dict,int] return (params per class: means,vars), and number of features.","tests":["params,n=gaussian_naive_bayes_train([[0,1],[1,2]],[0,1]); assert n==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define gaussian_naive_bayes_predict(model:tuple,x:list[float])->int predict label 0/1.","tests":["m=gaussian_naive_bayes_train([[0,1],[1,2]],[0,1]); y=gaussian_naive_bayes_predict(m,[0.1,1.1]); assert y in (0,1)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define svm_dual_linear_solve(X:list[list[float]],y:list[int],C:float)->tuple[float,list[float],list[float]] solve small 2D SVM dual (quadratic programming via SMO-ish); return (b,w,a).","tests":["b,w,a=svm_dual_linear_solve([[0,0],[1,1]],[ -1,1 ],1.0); assert len(w)==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define kmeans_pp_init(points:list[tuple[float,float]],k:int,seed:int=0)->list[tuple[float,float]] k-means++ centers.","tests":["c=kmeans_pp_init([(0,0),(10,10),(0,10),(10,0)],2,1); assert len(c)==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define dbscan(points:list[tuple[float,float]],eps:float,min_pts:int)->list[int] cluster labels (-1 noise).","tests":["labels=dbscan([(0,0),(0.1,0),(10,10)],0.5,2); assert labels[0]==labels[1] and labels[2]==-1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define silhouette_score(points:list[tuple[float,float]],labels:list[int])->float average silhouette.","tests":["s=silhouette_score([(0,0),(0,1),(10,10),(10,11)],[0,0,1,1]); assert s>0.5"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define t_sne_pairwise_affinities(X:list[list[float]],perplexity:float)->list[list[float]] compute symmetric P (small N).","tests":["P=t_sne_pairwise_affinities([[0,0],[1,1],[2,2]],5.0); assert len(P)==3 and len(P[0])==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define tsne_gradient(P:list[list[float]],Y:list[list[float]])->list[list[float]] compute gradient dC/dY (Barnes-Hut not needed).","tests":["G=tsne_gradient([[0,0.5,0.5],[0.5,0,0.5],[0.5,0.5,0]],[[0,0],[1,0],[0,1]]); assert len(G)==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define kalman_filter_constant_velocity(z:list[float],dt:float,process_var:float,meas_var:float)->list[float] positions only; 2-state [x,v].","tests":["xs=kalman_filter_constant_velocity([0,1,0,1],1.0,0.1,1.0); assert len(xs)==4"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define robust_mean_huber(x:list[float],delta:float)->float Huber M-estimator via IRLS.","tests":["m=robust_mean_huber([0,0,0,100],1.0); assert m<10"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define winsorize(x:list[float],p:float)->list[float] clip lowest/highest fraction p to boundary values.","tests":["y=winsorize([0,1,100],0.33); assert max(y)<100 and min(y)>0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define tukey_biweight_mean(x:list[float],c:float)->float iteratively reweighted mean.","tests":["m=tukey_biweight_mean([0,0,0,100],4.685); assert m<10"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define robust_linear_regression_l1(x:list[float],y:list[float])->tuple slope and intercept via iterative reweighted least squares (LAD).","tests":["m,b=robust_linear_regression_l1([0,1,2],[0,1,2]); assert abs(m-1)<0.1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define probit_link_inv(z:float)->float Î¦(z) using erf.","tests":["import math; assert abs(probit_link_inv(0)-0.5)<1e-12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define cloglog_link_inv(z:float)->float 1-exp(-exp(z)).","tests":["assert abs(cloglog_link_inv(0)- (1-1/math.e))<1e-12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define glm_logistic_fit(X:list[list[float]],y:list[int]],max_iter:int)->list[float] Newton-Raphson with bias in X.","tests":["w=glm_logistic_fit([[0,1],[1,1],[2,1],[3,1]],[0,0,1,1],20); assert len(w)==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define glm_poisson_fit(X:list[list[float]],y:list[int]],max_iter:int)->list[float] canonical link log.","tests":["w=glm_poisson_fit([[0,1],[1,1],[2,1]],[1,2,7],20); assert len(w)==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define multinomial_logit_fit(X:list[list[float]],y:list[int],classes:int,max_iter:int)->list[list[float]] one-vs-rest weights.","tests":["W=multinomial_logit_fit([[0,1],[1,1],[2,1],[3,1]],[0,1,1,2],3,50); assert len(W)==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define bayesian_linear_regression_posterior(X:list[list[float]],y:list[float],alpha:float,beta:float)->tuple[mu,Sigma] with prior N(0,Î±^{-1}I), noise precision Î².","tests":["mu,S=bayesian_linear_regression_posterior([[1,1],[2,1]],[1,2],1.0,1.0); assert len(mu)==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define relu(x:float)->float max(0,x) and relu_deriv(x:float)->float.","tests":["assert relu(-1)==0 and relu(2)==2 and relu_deriv(2)==1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define feedforward_nn_1hidden(X:list[list[float]],y:list[int],hidden:int,epochs:int,lr:float,seed:int=0)->list[list[float]] return trained weights (W1,W2). Small network with sigmoid output.","tests":["W=feedforward_nn_1hidden([[0,0],[1,1]],[0,1],3,100,0.1,1); assert len(W)==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define backprop_gradient_check(X:list[list[float]],y:list[int],hidden:int)->float relative error of numerical vs analytic gradients (return <1e-2).","tests":["err=backprop_gradient_check([[0,0],[1,1]],[0,1],2); assert err<1e-1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define adam_optimizer_step(m:list[float],v:list[float],t:int,grad:list[float],theta:list[float],alpha:float=0.001,b1:float=0.9,b2:float=0.999,eps:float=1e-8)->tuple updated (m,v,theta).","tests":["m,v,th=adam_optimizer_step([0,0],[0,0],1,[1,1],[0,0]); assert len(th)==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define transformer_positional_encoding(max_len:int,d_model:int)->list[list[float]] sinusoidal PE matrix.","tests":["PE=transformer_positional_encoding(10,6); assert len(PE)==10 and len(PE[0])==6"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define attention_scaled_dot(Q:list[list[float]],K:list[list[float]],V:list[list[float]])->list[list[float]] single-head attention (no mask).","tests":["Y=attention_scaled_dot([[1,0]],[[1,0],[0,1]],[[1,2],[3,4]]); assert len(Y)==1 and len(Y[0])==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define beam_search_decode(logits:list[list[float]],beam:int)->list[int] greedy beam over timesteps (no length norm).","tests":["seq=beam_search_decode([[0,1,0],[0,0,1],[1,0,0]],2); assert len(seq)==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define ctc_alignment_prob(path:list[int],probs:list[list[float]],blank:int)->float forward algorithm for alignment probability.","tests":["p=ctc_alignment_prob([1,2],[ [0.1,0.8,0.1],[0.1,0.1,0.8] ],0); assert 0<p<=1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define levenshtein_distance_weighted(a:str,b:str,ins:int,del_:int,sub:int)->int weighted edit distance.","tests":["d=levenshtein_distance_weighted('abc','yabd',1,1,2); assert d>=0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define damerau_levenshtein_full(a:str,b:str)->int full Damerau distance with adjacent transpositions.","tests":["assert damerau_levenshtein_full('CA','AC')==1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define entropy_of_image_gray(img:list[list[int]])->float entropy in bits assuming 0..255 values.","tests":["H=entropy_of_image_gray([[0,0],[255,255]]); assert abs(H-1.0)<1e-9"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define otsu_threshold_image(img:list[list[int]])->int global Otsu threshold from histogram.","tests":["t=otsu_threshold_image([[0,0,0],[255,255,255]]); assert t>0 and t<255"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define canny_edge_simple(img:list[list[int]],low:float,high:float)->list[list[int]] gradient magnitude thresholding (no hysteresis); return binary map.","tests":["E=canny_edge_simple([[0,0,0],[0,255,0],[0,0,0]],10,20); assert len(E)==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define harris_corner_response(img:list[list[int]],k:float,window:int)->list[list[float]] compute R=det(M)-k(trace M)^2 with simple gradients.","tests":["R=harris_corner_response([[0,0,0],[0,255,0],[0,0,0]],0.04,3); assert len(R)==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define kabsch_rotate_points(P:list[tuple[float,float,float]],Q:list[tuple[float,float,float]])->list[tuple[float,float,float]] rotate P to align with Q (no translation scaling).","tests":["R=kabsch_rotate_points([(1,0,0)],[(0,1,0)]); assert len(R)==1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define voxel_downsample(points:list[tuple[float,float,float]],voxel:float)->list[tuple[float,float,float]] grid average within voxels.","tests":["D=voxel_downsample([(0,0,0),(0.1,0,0),(1,1,1)],0.2); assert len(D)==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define icp_point_to_point(src:list[tuple[float,float]],dst:list[tuple[float,float]],iters:int)->tuple[R,t] 2D ICP.","tests":["R,t=icp_point_to_point([(0,0),(1,0)],[(1,1),(2,1)],10); assert len(R)==2 and len(t)==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define poisson_mesh_smoothing_1d(y:list[float],lambda_:float,iters:int)->list[float] minimize â(y-x)^2+Î»â(Îx)^2 via Gauss-Seidel.","tests":["s=poisson_mesh_smoothing_1d([0,10,0],1.0,50); assert 0<s[1]<10"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define bezier_quadratic_point(P0:tuple[float,float],P1:tuple[float,float],P2:tuple[float,float],t:float)->tuple","tests":["p=bezier_quadratic_point((0,0),(1,1),(2,0),0.5); assert abs(p[0]-1.0)<1e-9"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define bezier_cubic_length(P0,P1,P2,P3,n:int)->float approximate length by sampling n points.","tests":["L=bezier_cubic_length((0,0),(1,2),(2,2),(3,0),100); assert L>3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define spline_surface_bilinear(Z:list[list[float]],u:float,v:float)->float bilinear on grid cell.","tests":["z=spline_surface_bilinear([[0,1],[2,3]],0.5,0.5); assert abs(z-1.5)<1e-9"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define catmull_rom_chain(points:list[tuple[float,float]],t:float)->tuple interpolate along chain; map tâ[0,1] to segment.","tests":["p=catmull_rom_chain([(0,0),(1,1),(2,0),(3,1)],0.5); assert len(p)==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define kinematics_2link_planar(theta1:float,theta2:float,l1:float,l2:float)->tuple end-effector (x,y).","tests":["import math; x,y=kinematics_2link_planar(math.pi/2,0,1,1); assert abs(x-0)<1e-9 and abs(y-2)<1e-9"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define inverse_kinematics_2link_planar(x:float,y:float,l1:float,l2:float)->tuple[float,float] return one solution (elbow-down).","tests":["th1,th2=inverse_kinematics_2link_planar(0,2,1,1); assert abs(th1-math.pi/2)<1e-6"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define rrt_star_find_path(start:tuple[float,float],goal:tuple[float,float],obs:list[tuple[float,float,float]],iters:int,randseed:int=0)->list[tuple[float,float]] 2D circular obstacles (small).","tests":["p=rrt_star_find_path((0,0),(1,1),[],100,1); assert p[0]==(0,0) and p[-1]==(1,1)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define pid_controller_response(Kp:float,Ki:float,Kd:float,dt:float,ref:list[float])->list[float] simulate PID on plant y_{t+1}=y_t+u_t (toy).","tests":["y=pid_controller_response(0.1,0.01,0.0,1.0,[1]*20); assert y[-1]>0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define kalman_innovation_cov(H:list[list[float]],P:list[list[float]],R:list[list[float]])->list[list[float]] S=H P H^T + R.","tests":["S=kalman_innovation_cov([[1,0],[0,1]],[[1,0],[0,1]],[[0,0],[0,0]]); assert S==[[1,0],[0,1]]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define state_space_to_transfer(numA:list[list[float]],B:list[list[float]],C:list[list[float]],D:list[list[float]])->tuple[num,den] SISO via determinant (small).","tests":["num,den=state_space_to_transfer([[0,1],[-1,-1]],[[0],[1]],[[1,0]],[[0]]); assert len(den)==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define modal_analysis_2d_mass_spring(K:list[list[float]],M:list[list[float]])->tuple[vals,vecs] generalized eigenproblem (small).","tests":["lam,V=modal_analysis_2d_mass_spring([[2,-1],[-1,2]],[[1,0],[0,1]]); assert len(lam)==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define finite_element_truss_1d(nodes:list[float],elements:list[tuple[int,int,float]],forces:list[float],fixed:set[int])->list[float] bar elements E*A per element; return displacements (small).","tests":["u=finite_element_truss_1d([0,1],[ (0,1,1.0) ],[0,1],[0]); assert len(u)==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define heat_conduction_crank_nicolson(u0:list[float],alpha:float,dt:float,dx:float,steps:int)->list[float] 1D with Dirichlet zero; tridiagonal solve.","tests":["u=heat_conduction_crank_nicolson([0,1,0],1.0,0.1,1.0,10); assert abs(u[1])<1.0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define poisson_2d_gauss_seidel(N:int,iters:int)->list[list[float]] solve â^2 u = -1 in unit square with u=0 boundaries.","tests":["U=poisson_2d_gauss_seidel(20,50); assert len(U)==22 and len(U[0])==22"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define navier_stokes_burgers_1d(u0:list[float],nu:float,dt:float,dx:float,steps:int)->list[float] explicit scheme for Burgers' u_t+u u_x=Î½ u_xx.","tests":["u=navier_stokes_burgers_1d([0,1,0],0.1,0.01,1.0,10); assert len(u)==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define shallow_water_riemann_hll(hL:float,uL:float,hR:float,uR:float,g:float=9.81)->tuple fluxes for 1D SWE using HLL solver.","tests":["F=shallow_water_riemann_hll(1,0,1,0); assert len(F)==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define traffic_flow_lwr_godunov(rho0:list[float],vmax:float,rhomax:float,dt:float,dx:float,steps:int)->list[float] Godunov scheme for LWR fundamental diagram q(Ï)=vmax Ï (1-Ï/Ïmax).","tests":["r=traffic_flow_lwr_godunov([0.1,0.8,0.1],30,1.0,0.01,1.0,5); assert len(r)==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define computational_geometry_polygon_area(poly:list[tuple[float,float]])->float shoelace formula.","tests":["assert abs(computational_geometry_polygon_area([(0,0),(1,0),(1,1),(0,1)])-1.0)<1e-12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define polygon_centroid(poly:list[tuple[float,float]])->tuple centroid of simple polygon.","tests":["c=polygon_centroid([(0,0),(1,0),(1,1),(0,1)]); assert abs(c[0]-0.5)<1e-12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define polygon_offset(poly:list[tuple[float,float]],d:float)->list[tuple[float,float]] naive parallel offset using normals (convex).","tests":["p=polygon_offset([(0,0),(1,0),(1,1),(0,1)],0.1); assert len(p)==4"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define poisson_random_field_snp(k:int,theta:float,seed:int=0)->list[int] simulate SNP counts per locus (Poisson).","tests":["c=poisson_random_field_snp(10,0.1,1); assert len(c)==10"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define coalescent_simulation_kingman(n:int,seed:int=0)->float total tree length expectation via simulation (return simulated total length).","tests":["L=coalescent_simulation_kingman(5,1); assert L>0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define phylogenetic_tree_pairwise_distance(tree:dict)->float compute average pairwise leaf distance (tree as adjacency with branch lengths).","tests":["avg=phylogenetic_tree_pairwise_distance({0:[(1,1.0),(2,1.0)],1:[],2:[]}); assert abs(avg-2.0)<1e-9"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define hamming_graph_distance(seq1:str,seq2:str)->int number of mismatches (same length).","tests":["assert hamming_graph_distance('GATTACA','GACTATA')==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define entropy_of_alignment(columns:list[str])->float average per-column entropy (bits) ignoring gaps '-'.","tests":["H=entropy_of_alignment(['AC','AG','AT']); assert H>0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define codon_bias_index(seq:str)->float ratio of most frequent codon usage to uniform expectation for amino acids in seq (toy).","tests":["c=codon_bias_index('ATGTTT'); assert c>=1.0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define gene_expression_zscore(expr:list[float])->list[float] standardize to mean 0, std 1 (population std).","tests":["z=gene_expression_zscore([1,2,3]); assert abs(sum(z))<1e-9"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define grn_simulate_linear(W:list[list[float]],x0:list[float],steps:int)->list[list[float]] x_{t+1}=Wx_t with sigmoid nonlinearity; return list of states.","tests":["X=grn_simulate_linear([[0.5,0],[0,0.5]],[1,1],5); assert len(X)==6"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define metapopulation_levins_step(p:float,c:float,e:float,dt:float)->float p' = p + (c p (1-p) - e p) dt.","tests":["assert 0<=metapopulation_levins_step(0.5,0.2,0.1,1.0)<=1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define niche_model_connectance(S:int,C:float,seed:int=0)->list[tuple[int,int]] generate food web edges (Williams/Martinez simplified).","tests":["E=niche_model_connectance(10,0.2,1); assert len(E)>0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define predator_prey_equilibrium(alpha:float,beta:float,delta:float,gamma:float)->tuple equilibrium (x*,y*)=(Î³/Î´, Î±/Î²).","tests":["x,y=predator_prey_equilibrium(1.1,0.4,0.1,0.4); assert abs(x-4.0)<1e-9 and abs(y-2.75)<1e-9"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement cubic_real_roots(a:float,b:float,c:float,d:float)->list[float] returning the real roots of ax^3+bx^2+cx+d=0 in ascending order using Cardano's method (handle 1â3 real roots).","tests":["r=cubic_real_roots(1,-6,11,-6); assert [round(x,6) for x in r]==[1.0,2.0,3.0]; s=cubic_real_roots(1,0,0,-1); assert abs(s[0]-1.0)<1e-9 and len(s)==1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement durand_kerner_roots(coeff:list[complex])->list[complex] to approximate all roots of polynomial with complex coefficients in descending powers; coeff[0] != 0. Return roots sorted by real part then imag part. Use a few dozen iterations with a good circular initialization.","tests":["import cmath; r=durand_kerner_roots([1,-5,6]); # x^2-5x+6=(x-2)(x-3)\nR=sorted(r,key=lambda z:(round(z.real,3),round(z.imag,3))); assert abs(R[0]-2)<1e-3 and abs(R[1]-3)<1e-3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define bessel_J0(x:float)->float using the power series J0(x)=sum_{k=0..â} (-1)^k (x^2/4)^k /(k!)^2 with convergence until term<1e-15 or 200 terms.","tests":["assert abs(bessel_J0(0.0)-1.0)<1e-15; assert abs(bessel_J0(1.0)-0.7651976866)<1e-6"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define incomplete_gamma_lower_integer(s:int,x:float)->float computing Î³(s,x)=â«_0^x t^{s-1}e^{-t}dt for integer s>=1 using the closed form Î³(s,x)=(s-1)!(1-e^{-x}â_{k=0}^{s-1} x^k/k!).","tests":["import math; assert abs(incomplete_gamma_lower_integer(1,2.0)-(1-math.e**-2))<1e-12; assert abs(incomplete_gamma_lower_integer(2,2.0)-(1-math.e**-2*(1+2)))<1e-12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement two_sat(n:int,clauses:list[tuple[int,int]])->list[bool]|None for variables x1..xn. Each clause is a pair of literals encoded as Â±i where i is variable index and negative means negation. Return a satisfying assignment or None.","tests":["# SAT instance\nans=two_sat(2,[(1,2),(-1,2)]); assert ans is not None and ans[1-1] in (True,False) and ans[2-1]==True\n# UNSAT instance\nassert two_sat(2,[(1,2),(-1,2),(-2,1),(-1,-2)]) is None"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define hopcroft_karp(U:int,V:int,edges:list[tuple[int,int]])->int computing maximum bipartite matching size for left vertices [0..U-1] and right [0..V-1].","tests":["m=hopcroft_karp(3,3,[(0,0),(0,1),(1,1),(2,2)]); assert m==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement max_flow_dinic(n:int,edges:list[tuple[int,int,int]])->int using Dinic's algorithm (directed edges with capacities).","tests":["f=max_flow_dinic(4,[(0,1,3),(0,2,2),(1,2,1),(1,3,2),(2,3,4)]); assert f==5"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement edmonds_directed_mst(n:int,edges:list[tuple[int,int,int]],root:int)->int returning weight of minimum arborescence rooted at root (ChuâLiu/Edmonds).","tests":["w=edmonds_directed_mst(4,[(0,1,1),(0,2,5),(1,2,1),(1,3,2),(2,3,1)],0); assert w==1+1+1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement stoer_wagner_min_cut(n:int,adj:list[list[int]])->int returning global minimum cut weight for an undirected weighted graph given adjacency matrix (sym, zeros allowed).","tests":["G=[[0,3,1,1],[3,0,1,1],[1,1,0,3],[1,1,3,0]]; assert stoer_wagner_min_cut(4,G)==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define count_topo_orders(n:int,edges:list[tuple[int,int]])->int counting topological orderings of a DAG via DP over subsets (n<=15).","tests":["c=count_topo_orders(3,[(0,1),(0,2)]); assert c==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Define kirchhoff_spanning_trees(n:int,edges:list[tuple[int,int]])->int using Matrix-Tree theorem for an undirected simple graph.","tests":["t=kirchhoff_spanning_trees(4,[(0,1),(1,2),(2,3),(3,0),(0,2)]); assert t==8"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement simplex_maximize(c:list[float],A:list[list[float]],b:list[float])->tuple[float,list[float]] standard form max c^T x s.t. Ax<=b, x>=0 using Bland's rule to avoid cycling. Return (opt, vector).","tests":["opt,x=simplex_maximize([3,2],[[2,1],[1,2]],[18,14]); assert abs(opt- (3*4+2*5))<1e-9 and all(abs(a-b)<1e-9 for a,b in zip(x,[4,5]))"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement yens_k_shortest_paths(n:int,edges:list[tuple[int,int,int]],src:int,dst:int,k:int)->list[int] returning the lengths of up to k simple loopless shortest paths using Yen's algorithm.","tests":["L=yens_k_shortest_paths(4,[(0,1,1),(1,3,1),(0,2,1),(2,3,2),(1,2,1)],0,3,3); assert L[:2]==[2,3]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement graph_isomorphism_backtracking(adj1:list[list[int]],adj2:list[list[int]])->bool for simple undirected graphs via degree refinement + backtracking (n<=8).","tests":["assert graph_isomorphism_backtracking([[0,1],[1,0]],[[0,1],[1,0]]) and not graph_isomorphism_backtracking([[0,1,0],[1,0,1],[0,1,0]],[[0,1,1],[1,0,0],[1,0,0]])"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement articulation_points(n:int,edges:list[tuple[int,int]])->list[int] (Tarjan). Return sorted list.","tests":["aps=articulation_points(5,[(0,1),(1,2),(2,0),(1,3),(3,4)]); assert aps==[1,3]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement bridges_in_graph(n:int,edges:list[tuple[int,int]])->list[tuple[int,int]] returning sorted list of bridges (min endpoint first) in undirected graph.","tests":["b=bridges_in_graph(5,[(0,1),(1,2),(2,0),(1,3),(3,4)]); assert b==[(1,3),(3,4)]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement floyd_warshall_path_count(n:int,dist:list[list[int]])->list[list[int]] returning all-pairs shortest path lengths and also count of shortest paths (tie counts) as a pair of matrices; represent by returning a list [D,C] where D and C are 2D lists.","tests":["D,C=floyd_warshall_path_count(3,[[0,1,4],[1,0,2],[4,2,0]]); assert D[0][2]==3 and C[0][2]==1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement min_cost_max_flow(n:int,edges:list[tuple[int,int,int,int]],s:int,t:int)->tuple[int,int] returning (flow,cost) using successive shortest augmenting paths with potentials. Edges are (u,v,cap,cost).","tests":["flow,cost=min_cost_max_flow(3,[(0,1,2,1),(1,2,2,1),(0,2,1,5)],0,2); assert flow==3 and cost== (2*2 + 1*5)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement dpll_sat(n:int, clauses:list[list[int]])->bool SAT check for CNF with literals Â±i. Use unit propagation and pure literal elimination.","tests":["assert dpll_sat(3,[[1,2],[-1,2],[3]]) and not dpll_sat(2,[[1],[ -1 ]])"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement algorithm_x_exact_cover(universe:set,subsets:list[set])->list[set]|None returning any exact cover using Algorithm X (Dancing Links not required).","tests":["U={1,2,3,4}; S=[{1,2},{3},{4},{2,3},{1,3,4}]; sol=algorithm_x_exact_cover(U,S); assert sol is None or set().union(*sol)==U"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement kmp_prefix_function(s:str)->list[int] and kmp_search(text:str,pattern:str)->list[int] returning all starting indices.","tests":["pi=kmp_prefix_function('ababc'); assert pi==[0,0,1,2,0]; pos=kmp_search('ababa','aba'); assert pos==[0,2]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement suffix_array(s:str)->list[int] (doubling algorithm) and kasai_lcp(s:str,sa:list[int])->list[int].","tests":["sa=suffix_array('banana'); lcp=kasai_lcp('banana',sa); assert sa==[5,3,1,0,4,2] and lcp==[0,1,3,0,0,2]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement aho_corasick_build(patterns:list[str])->object and aho_corasick_find(machine,text:str)->list[tuple[int,int]] returning (pattern_index, end_index) matches.","tests":["ac=aho_corasick_build(['he','she','his','hers']); res=aho_corasick_find(ac,'ahishers'); assert set(res)>= {(0,2),(1,5),(2,3),(3,7)}"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement fenwick_tree class with methods add(i:int,delta:int) and sum(i:int)->int for 0-indexed prefix sums. Return nothing; just define class Fenwick.","tests":["ft=Fenwick(5); ft.add(1,3); ft.add(3,2); assert ft.sum(3)==5 and ft.sum(4)==5"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement segment_tree_lazy supporting range_add(l,r,val) and range_sum(l,r) (inclusive). Build from initial list of ints.","tests":["st=segment_tree_lazy([1,2,3,4]); st.range_add(1,3,10); assert st.range_sum(0,3)==1+12+13+14 and st.range_sum(2,2)==13"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement lfu_cache with capacity supporting get(key:int)->int and put(key:int,val:int)->None using O(log n) or better operations. Print nothing; define class LFUCache.","tests":["c=LFUCache(2); c.put(1,1); c.put(2,2); assert c.get(1)==1; c.put(3,3); assert c.get(2)==-1; assert c.get(3)==3; c.put(4,4); assert c.get(1)==-1 and c.get(3)==3 and c.get(4)==4"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement treap supporting insert(x), erase(x), contains(x)->bool (no duplicates), with randomized priorities.","tests":["t=treap(); t.insert(2); t.insert(1); t.insert(3); assert t.contains(2); t.erase(2); assert not t.contains(2)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement splay_tree with insert(x), find(x)->bool (splaying), and delete(x).","tests":["s=splay_tree(); s.insert(5); s.insert(3); s.insert(7); assert s.find(3); s.delete(3); assert not s.find(3)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement union_find (Disjoint Set Union) with path compression and union by rank; support find(x) and union(x,y); also support connected(x,y)->bool.","tests":["d=union_find(5); d.union(0,1); d.union(1,2); assert d.connected(0,2) and not d.connected(0,3)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement lca_binary_lifting(n:int,edges:list[tuple[int,int]],root:int)->callable that returns a function lca(u,v) using binary lifting.","tests":["f=lca_binary_lifting(5,[(0,1),(0,2),(1,3),(1,4)],0); assert f(3,4)==1 and f(2,4)==0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement astar_grid(grid:list[str],start:tuple[int,int],goal:tuple[int,int])->list[tuple[int,int]] using 4-neighborhood Manhattan heuristic; '#' are walls,'.' free. Return path including endpoints.","tests":["g=['....','#..#','....']; p=astar_grid(g,(0,0),(2,3)); assert p[0]==(0,0) and p[-1]==(2,3)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement convex_hull_3d(points:list[tuple[float,float,float]])->list[tuple[int,int,int]] returning list of triangular faces as index triples (CCW outward not required) for a set forming a convex polyhedron (gift wrapping or incremental).","tests":["faces=convex_hull_3d([(0,0,0),(1,0,0),(0,1,0),(0,0,1)]); assert len(faces)>=4"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement rotating_calipers_diameter(points:list[tuple[float,float]])->float computing the diameter (max distance) of a planar set using hull + rotating calipers.","tests":["d=rotating_calipers_diameter([(0,0),(1,0),(1,1),(0,1)]); assert abs(d- (2**0.5))<1e-9"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement minkowski_sum_convex(P:list[tuple[float,float]],Q:list[tuple[float,float]])->list[tuple[float,float]] returning polygon vertices CCW of the Minkowski sum of two convex polygons given CCW vertices.","tests":["S=minkowski_sum_convex([(0,0),(1,0),(1,1),(0,1)],[(0,0),(1,0),(1,1),(0,1)]); assert len(S)>=4"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement half_plane_intersection(halfplanes:list[tuple[float,float,float]])->list[tuple[float,float]] computing intersection polygon of half-planes ax+by+c<=0 (return CCW polygon or empty list).","tests":["poly=half_plane_intersection([(1,0,-1),(-1,0,0),(0,1,-1),(0,-1,0)]); # unit square [0,1]^2\nassert len(poly)>=3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement ntt_convolution(a:list[int],b:list[int],mod:int=998244353,root:int=3)->list[int] polynomial multiplication via NTT under given prime modulus and primitive root.","tests":["c=ntt_convolution([1,2,3],[4,5,6]); assert c[:5]==[4,13,28,27,18]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement karatsuba_mul(a:str,b:str)->str multiplying nonnegative integers given as strings (no built-ins for big ints).","tests":["assert karatsuba_mul('12345678','87654321')=='1082152022374638'"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement is_probable_prime(n:int)->bool using deterministic MillerâRabin for 32-bit integers (bases [2,3,5,7,11]).","tests":["assert is_probable_prime(2147483647) and not is_probable_prime(2147483646)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement pollard_rho(n:int)->int returning a nontrivial factor of odd composite n (use Floyd cycle and random coefficients; retries allowed).","tests":["f=pollard_rho(8051); assert f in (97,83)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement rsa_small_keys(p:int,q:int,e:int)->tuple[n:int,e:int,d:int] returning modulus n, public e, private d (mod Ï(n)); also implement rsa_encrypt(n:int,e:int,m:int)->int and rsa_decrypt(n:int,d:int,c:int)->int.","tests":["n,e,d=rsa_small_keys(61,53,17); c=rsa_encrypt(n,e,65); m=rsa_decrypt(n,d,c); assert m==65"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement elliptic_curve_point_ops(p:int,a:int,b:int,P:tuple[int,int],Q:tuple[int,int])->tuple for short Weierstrass y^2=x^3+ax+b over F_p with P+Q (use None for point at infinity). Also implement scalar_mul(k,P).","tests":["p=97;a=2;b=3; P=(3,6); # On curve\nfrom random import randint\nR=elliptic_curve_point_ops(p,a,b,P,P); S=scalar_mul(2,P); assert R==S"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement shamir_combine(points:list[tuple[int,int]],p:int)->int recovering secret f(0) from k points using Lagrange interpolation mod prime p.","tests":["s=shamir_combine([(1,5),(2,9),(3,15)],17); assert s==1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement hamming_7_4_encode(bits:str)->str and hamming_7_4_decode(code:str)->str correcting single-bit errors. Bits are '0'/'1' strings of length 4 and 7 respectively.","tests":["c=hamming_7_4_encode('1011'); # Flip one bit\nerr=list(c); err[3]='1' if err[3]=='0' else '0'; d=hamming_7_4_decode(''.join(err)); assert d=='1011'"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement viterbi_convolutional_decode(received:list[int],gen:list[list[int]])->list[int] hard-decision Viterbi for rate 1/2 code with generator polynomials in octal (e.g., [7,5]). Return decoded bits without tail.","tests":["msg=[1,0,1,1,0]; gen=[[7],[5]]; dec=viterbi_convolutional_decode([0,1,1,0,1,1,0,0,1,0],gen); assert isinstance(dec,list)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement merkle_root(leaves:list[bytes])->bytes computing SHA-256 Merkle root (dup last odd leaf).","tests":["import hashlib; L=[b'a',b'b',b'c']; r=merkle_root(L); assert isinstance(r,bytes) and len(r)==32"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement bpe_train(corpus:str,merges:int)->dict and bpe_encode(text:str,model)->list[str] (byte-pair encoding on whitespace-joined corpus).","tests":["m=bpe_train('low low lower lowest',5); t=bpe_encode('lower low',m); assert len(t)>=2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement cky_parse(grammar:dict, sentence:list[str])->bool using CNF grammar where grammar maps nonterm->list of tuples (A,B) or terminals as strings. Return True if sentence is in the language.","tests":["G={'S':[('NP','VP')],'NP':['dogs','cats'], 'VP':['sleep',('V','NP')],'V':['chase']}; assert cky_parse(G,['dogs','sleep']) and cky_parse(G,['cats','chase','dogs'])"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement nfa_to_dfa(nfa)->dfa and dfa_run(dfa, s:str)->bool for NFA with Îµ-transitions using subset construction. NFA format: {'start':set, 'accept':set, 'trans':dict[(state,char|None)]->set}. DFA similar without None.","tests":["nfa={'start':{0},'accept':{2},'trans':{(0,'a'):{0},(0,'b'):{0},(0,'a'):{0},(0,None):{1},(1,'c'):{2}}}; dfa=nfa_to_dfa(nfa); assert dfa_run(dfa,'ac') and not dfa_run(dfa,'a')"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement regex_thompson_build(pattern:str)->nfa supporting literals, concatenation, alternation '|', Kleene star '*', and parentheses. Provide regex_match(pattern, text)->bool using NFA simulation.","tests":["assert regex_match('a(b|c)*d','abcbcd') and not regex_match('a(b|c)*d','abce')"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement sudoku_solver_4x4(grid:list[list[int]])->list[list[int]] using backtracking. Zeros are empty. Return solved 4x4 grid.","tests":["sol=sudoku_solver_4x4([[0,0,2,0],[0,0,0,3],[0,3,0,0],[4,0,0,0]]); assert all(len(set(r))==4 for r in sol)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement n_queens_count(n:int)->int returning number of solutions (use bitmasks).","tests":["assert n_queens_count(4)==2 and n_queens_count(5)==10"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement held_karp_tsp(points:list[tuple[float,float]])->float exact minimal tour length via DP (start at 0).","tests":["d=held_karp_tsp([(0,0),(1,0),(1,1),(0,1)]); assert abs(d-4.0)<1e-6"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement mcts_tictactoe_move(board:str,player:str,simulations:int,seed:int=0)->int using Monte Carlo Tree Search to choose a move index [0..8]. Board as 9-char string with 'X','O','.'. Return best move for player.","tests":["m=mcts_tictactoe_move('XX.OO....','X',200,1); assert 0<=m<9"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement particle_filter_1d(zs:list[float],R:float,Q:float,N:int,seed:int=0)->list[float] tracking constant position with noisy observations z_t=x+noise, using N particles. Return filtered means.","tests":["xs=particle_filter_1d([0,0,1,1,0],R=1.0,Q=0.01,N=200,seed=1); assert len(xs)==5"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement bayes_net_variable_elimination(factors:list[dict],query:str,evidence:dict)->dict over values of query. Factors are CPTs as dicts mapping tuples of assignments to probabilities; use simple string-valued variables with discrete values. Small nets only.","tests":["# Simple chain A->B\nvarsA=('A',); varsB=('A','B'); fA={('A=1',):0.5,('A=0',):0.5}; fB={('A=1','B=1'):0.8,('A=1','B=0'):0.2,('A=0','B=1'):0.3,('A=0','B=0'):0.7}; q=bayes_net_variable_elimination([fA,fB],'B',{'A':'1'}); assert abs(q['1']-0.8)<1e-6"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement symbolic_diff(expr:str,var:str)->str computing derivative of simple algebraic expressions built from +,-,*,/,^ and parentheses, variables and integers. Return simplified but not fully canonical.","tests":["assert symbolic_diff('x^2+3*x+1','x') in ('2*x+3','3+2*x'); assert symbolic_diff('2*x^3','x') in ('6*x^2','6*x^2')"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement to_cnf(expr:str)->list[list[int]] and satisfiable_by_assignment(cnf,assignment:dict[int,bool])->bool. Parse simple boolean expressions with variables x1,x2,... using operators !,&,| and parentheses; produce CNF via Tseitin transformation (fresh vars allowed).","tests":["cnf=to_cnf('(x1|x2)&(!x1|x2)'); assert satisfiable_by_assignment(cnf,{1:False,2:True})"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement householder_qr(A:list[list[float]])->tuple[Q,R] with Q orthogonal and R upper-triangular.","tests":["Q,R=householder_qr([[2,1],[1,2]]); import math; # check AâQR\nA=[[2,1],[1,2]]; rec=[[sum(Q[i][k]*R[k][j] for k in range(2)) for j in range(2)] for i in range(2)]; assert all(abs(rec[i][j]-A[i][j])<1e-6 for i in range(2) for j in range(2))"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement qr_algorithm_eigs_symmetric(A:list[list[float]],iters:int=1000)->list[float] returning eigenvalues of a real symmetric matrix (unordered) using QR iterations with shifts.","tests":["l=qr_algorithm_eigs_symmetric([[2,1],[1,2]],200); assert min(l)<2<max(l)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement lanczos_largest_eig(A:list[list[float]],m:int)->float approximate largest eigenvalue of symmetric A via Lanczos m steps.","tests":["v=lanczos_largest_eig([[2,0],[0,1]],5); assert abs(v-2.0)<1e-3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement svd_2x2(A:list[list[float]])->tuple[U,S,Vt] exact SVD for 2x2 using closed-form via eigen-decomposition of A^T A.","tests":["U,S,Vt=svd_2x2([[3,0],[0,1]]); import math; assert abs(S[0]-3)<1e-6 and abs(S[1]-1)<1e-6"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement poly_gcd(p:list[int],q:list[int])->list[int] GCD of integer polynomials (highest degree first) via Euclidean algorithm with content normalization and leading sign normalized positive.","tests":["g=poly_gcd([1,-3,2],[1,-2,1]); # (x-1)(x-2) and (x-1)^2 -> gcd x-1\nassert g==[1,-1]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement pade_approx_exp(m:int,n:int)->tuple[p:list[float],q:list[float]] coefficients of [m/n] Pade approximant for e^x about 0 with q[0]=1.","tests":["p,q=pade_approx_exp(2,2); # Check value near 0\nimport math; f=lambda x: sum(p[i]*x**i for i in range(len(p)))/sum(q[i]*x**i for i in range(len(q))); assert abs(f(0.1)-math.e**0.1)<1e-4"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement continued_fraction_real(x:float,k:int)->list[int] first k partial quotients and convergents_real(cf:list[int])->tuple[p,q] returning last convergent.","tests":["cf=continued_fraction_real(3.245,5); p,q=convergents_real(cf); assert abs(p/q-3.245)<1e-3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement bbp_pi_hex_digit(n:int)->int returning the nth hexadecimal digit of Ï (1-indexed) using BBP formula.","tests":["assert bbp_pi_hex_digit(1)==2 and bbp_pi_hex_digit(2)==4"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement pow_mod_crt(a:int,e:int,p:int,q:int)->int compute a^e mod n with n=pq using CRT (p,q primes).","tests":["v=pow_mod_crt(7,560,17,19); n=17*19; assert v==pow(7,560,n)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement heston_charfunc_price_call(S0:float,K:float,T:float,r:float,v0:float,kappa:float,theta:float,sigma:float,rho:float,N:int=64)->float CarrâMadan FFT-like integration simplified with trapezoid (small N).","tests":["c=heston_charfunc_price_call(100,100,1,0.0,0.04,1.5,0.04,0.3,-0.6,64); assert c>0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement simplex_fractional_knapsack_with_bounds(values:list[float],weights:list[float],bounds:list[float],W:float)->float solve continuous LP maximize sum v_i x_i s.t. 0<=x_i<=bounds_i, sum w_i x_i<=W (greedy ratio with caps).","tests":["v=simplex_fractional_knapsack_with_bounds([60,100,120],[10,20,30],[1,1,1],50); assert abs(v-240)<1e-9"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement held_karp_set_partition_min_diff(nums:list[int])->int minimal difference between two subset sums via DP over bitmasks (n<=22).","tests":["d=held_karp_set_partition_min_diff([1,6,11,5]); assert d==1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement min_feedback_arc_set_tournament(weights:list[list[int]])->list[int] approximate ordering minimizing backward edges using greedy local swaps (tournament graph). Return permutation of nodes.","tests":["order=min_feedback_arc_set_tournament([[0,1,0],[0,0,1],[1,0,0]]); assert set(order)=={0,1,2}"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement simplex_lp_integer_branch_and_bound(c,A,b)->tuple[int,list[int]] for 0-1 ILP with small sizes: max c^T x s.t. Ax<=b, xâ{0,1}. Use LP relaxation via simplex and branch-and-bound. Return (opt, x).","tests":["opt,x=simplex_lp_integer_branch_and_bound([3,2,1],[[2,1,1],[1,1,0]],[4,3]); assert opt==6"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement mcmf_assignment_balanced(cost:list[list[int]])->int assignment minimal cost via min-cost max-flow (square matrix).","tests":["c=mcmf_assignment_balanced([[4,1,3],[2,0,5],[3,2,2]]); assert c==5"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement spanning_tree_count_by_degree_seq(n:int,deg:list[int])->int using PrÃ¼fer codes: number of labeled trees with given degree sequence equals (n-2)!/â(deg_i-1)!. Validate inputs; return 0 if invalid.","tests":["assert spanning_tree_count_by_degree_seq(4,[2,2,1,1])==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement kalman_unscented_filter_linear(A,B,H,Q,R,x0,P0,us:list[list[float]],zs:list[list[float]])->list[list[float]] UKF specialized to linear-Gaussian (should agree with standard KF). Return state means.","tests":["A=[[1,1],[0,1]];B=[[0],[0]];H=[[1,0]];Q=[[1,0],[0,1]];R=[[1]]; xs=kalman_unscented_filter_linear(A,B,H,Q,R,[0,1],[[1,0],[0,1]],[ [0] for _ in range(5) ], [ [0] for _ in range(5) ]); assert len(xs)==5"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement belief_propagation_binary_pairwise(J:list[list[float]],h:list[float]],iters:int)->list[float] mean-field-like loopy BP on Ising graph with symmetric couplings J_ij and fields h_i; return approximate marginals P(s_i=+1).","tests":["p=belief_propagation_binary_pairwise([[0,0.3],[0.3,0]],[0.0,0.0],10); assert len(p)==2 and all(0<=x<=1 for x in p)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement metropolis_hastings_gaussian_mixture(means:list[float],vars:list[float],weights:list[float],steps:int,seed:int=0)->list[float] sample from 1D mixture via MH with normal proposals. Return samples (burn 100).","tests":["s=metropolis_hastings_gaussian_mixture([0,5],[1,1],[0.5,0.5],1000,1); import statistics as st; m=st.mean(s[-500:]); assert 1.0<m<4.0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement differential_evolution_optimize(f, bounds:list[tuple[float,float]], iters:int, seed:int=0)->list[float] (DE/rand/1/bin) to minimize f in â^d; return best vector.","tests":["f=lambda v:(v[0]-3)**2+(v[1]+2)**2; x=differential_evolution_optimize(f,[(-10,10),(-10,10)],100,1); assert (abs(x[0]-3)<1.0 and abs(x[1]+2)<1.0)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement genetic_algorithm_maximize(f, domain:list[tuple[float,float]], pop:int, gens:int, seed:int=0)->list[float] simple real-coded GA with crossover and mutation. Return best point.","tests":["f=lambda v:-(v[0]-5)**2; x=genetic_algorithm_maximize(f,[(0,10)],30,50,1); assert abs(x[0]-5)<1.0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement boundary_value_shooting(f, a:float, b:float, ya:float, yb:float, guess:float, steps:int)->list[float] for y''=f(x,y,y') with two-point BCs using secant shooting on initial slope. Return y at grid of steps+1.","tests":["f=lambda x,y,yp:-y; y=boundary_value_shooting(f,0,3.14159,0,0,0.0,50); assert abs(y[25])<0.1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement fem1d_variable_k(n:int,L:float,k_func,src_func)->list[float] solve -(k(x)u')'=f(x) on [0,L], u(0)=u(L)=0 using linear finite elements on uniform mesh with n elements.","tests":["k=lambda x:1+0*x; f=lambda x:1.0; u=fem1d_variable_k(10,1.0,k,f); assert len(u)==11 and u[0]==0 and u[-1]==0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement spectral_poisson_2d(f:callable,n:int)->list[list[float]] solve â^2 u = f on periodic square using FFT (implement DFT manually to avoid external libs). Return nÃn grid with zero-mean solution (n power of two).","tests":["f=lambda x,y:0.0; U=spectral_poisson_2d(f,4); assert len(U)==4 and abs(sum(sum(r) for r in U))<1e-6"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement ctc_best_path_decode(probs:list[list[float]],blank:int)->list[int] best path decoding collapsing repeats and removing blanks.","tests":["seq=ctc_best_path_decode([[0.1,0.8,0.1],[0.1,0.8,0.1],[0.7,0.2,0.1]],0); assert seq==[1]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement minhash_signature(sets:list[set], num_hash:int, seed:int=0)->list[list[int]] and jaccard_estimate(sigA,sigB)->float estimating Jaccard similarity.","tests":["S=minhash_signature([{1,2,3},{2,3,4}],50,1); est=jaccard_estimate(S[0],S[1]); assert 0.3<est<0.8"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement hyperloglog_estimate(stream:list[int],m:int,seed:int=0)->float approximate number of distinct elements (use 2^p registers with m a power of two).","tests":["est=hyperloglog_estimate([i%10 for i in range(1000)],64,1); assert 5<est<20"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement crdt_grow_only_set() class with add(x) and merge(other)->None and value()->set that are associative, commutative, idempotent.","tests":["A=crdt_grow_only_set(); B=crdt_grow_only_set(); A.add('a'); B.add('b'); A.merge(B); B.merge(A); assert A.value()=={'a','b'} and B.value()=={'a','b'}"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement merkle_proof_verify(leaf:bytes, root:bytes, proof:list[tuple[bytes,bool]])->bool for SHA-256 Merkle proofs where bool indicates whether the sibling is on the right (True) or left (False).","tests":["import hashlib; L=[b'a',b'b']; from hashlib import sha256\nha=sha256(b'a').digest(); hb=sha256(b'b').digest(); h=sha256(ha+hb).digest(); assert merkle_proof_verify(b'a',h,[(hb,True)])"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement pow_hash_nonce(prefix:str,zeros:int)->tuple[int,str] find smallest nonce >=0 s.t. sha256(prefix+str(nonce)) has at least zeros leading hex zeros; return (nonce,hex).","tests":["from hashlib import sha256; n,h=pow_hash_nonce('test',1); assert isinstance(n,int) and isinstance(h,str) and h.startswith('0')"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement exact_cover_sudoku_9x9(board:str)->str using Dancing Links (DLX). Board has 81 chars with '.' as empty; return solved board string.","tests":["p='53..7....6..195....98....6.8...6...34..8..6..6...3...4..8.3..17....2..6....28..'\n# A known Sudoku (easy)\ns=exact_cover_sudoku_9x9(p); assert len(s)==81 and '.' not in s"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement edmonds_karp(n:int,edges:list[tuple[int,int,int]])->int as a fallback max flow; verify equals Dinic on small cases.","tests":["f1=edmonds_karp(4,[(0,1,3),(0,2,2),(1,2,1),(1,3,2),(2,3,4)]); f2=5; assert f1==f2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement dijkstra_with_potentials(n,edges,s)->list[int] handling nonnegative edges and returning dist where edges weights may be reweighted using Johnson's potentials given; for plain nonnegative, should equal Dijkstra. (Implement as ordinary Dijkstra).","tests":["d=dijkstra_with_potentials(4,[(0,1,1),(1,2,2),(0,2,5),(2,3,1)],0); assert d[3]==4"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement graph_coloring_min_colors(n,edges)->int via backtracking returning chromatic number for small graphs (n<=10).","tests":["c=graph_coloring_min_colors(4,[(0,1),(1,2),(2,3),(3,0)]); assert c==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement spanning_tree_kirchhoff_matrix(L:list[list[float]])->int number of spanning trees from Laplacian matrix by deleting one row and column and taking determinant (round to nearest int).","tests":["L=[[2,-1,-1],[-1,2,-1],[-1,-1,2]]; assert spanning_tree_kirchhoff_matrix(L)==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement linear_assignment_sat(cost:list[list[int]])->int encode assignment as SAT (one-hot rows/cols) and solve with your DPLL; return min cost by trying increasing bounds (small 3x3).","tests":["c=linear_assignment_sat([[4,1,3],[2,0,5],[3,2,2]]); assert c==5"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement suffix_automaton_distinct_substrings(s:str)->int using suffix automaton (SAM).","tests":["assert suffix_automaton_distinct_substrings('ababa')==9"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement online_median_stream(nums:list[int])->list[float] using two heaps; return running medians.","tests":["m=online_median_stream([1,2,3,4]); assert m==[1.0,1.5,2.0,2.5]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement kdtree_build(points:list[tuple[float,float]],depth:int=0)->node and kdtree_nearest(node,query)->tuple returning nearest point (Euclidean) in 2D.","tests":["pts=[(0,0),(1,0),(0,1),(1,1)]; T=kdtree_build(pts); nn=kdtree_nearest(T,(0.1,0.2)); assert nn in pts"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement sweep_line_segment_intersections(segments:list[tuple[tuple[float,float],tuple[float,float]]])->set[tuple[int,int]] returning index pairs (i<j) of intersecting segments (including touching).","tests":["res=sweep_line_segment_intersections([((0,0),(1,1)),((0,1),(1,0)),((2,2),(3,3))]); assert res=={(0,1)}"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement de_bruijn_sequence(k:int,n:int)->str of alphabet 0..k-1 for subsequences of length n (cyclic). Return minimal lexicographic linearization starting at 0..0.","tests":["s=de_bruijn_sequence(2,3); assert '000' in s and all(t in s for t in ['001','010','011','100','101','110','111'])"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement sequence_assembly_debruijn(reads:list[str],k:int)->str assemble shortest superstring via Eulerian path in De Bruijn graph (assume unambiguous).","tests":["s=sequence_assembly_debruijn(['AAC','ACG','CGT','GTT'],3); assert s in ('AACGTT',)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement ms_alignment_progressive(seq:list[str],score:dict, gap:int)->list[str] very small progressive multiple alignment using pairwise NeedlemanâWunsch iteratively on guide tree by sequence lengths. Return aligned sequences.","tests":["aln=ms_alignment_progressive(['AC','AGC'],{('A','A'):2,('C','C'):2,('G','G'):2},-1); assert len(aln[0])==len(aln[1])"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement topological_order_unique(n:int,edges:list[tuple[int,int]])->bool returning True if DAG has a unique topological ordering.","tests":["assert topological_order_unique(3,[(0,1),(1,2)]) and not topological_order_unique(3,[(0,2),(1,2)])"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement dominator_tree_start(n:int,edges:list[tuple[int,int]],start:int)->list[int] immediate dominators in a flow graph (use LengauerâTarjan or simple iterative algorithm). Return idom array with idom[start]=-1.","tests":["idom=dominator_tree_start(4,[(0,1),(0,2),(1,3),(2,3)],0); assert idom[0]==-1 and idom[3]==0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement mst_prim_heap(n:int,edges:list[tuple[int,int,int]])->int MST weight using Prim with heap on undirected graph.","tests":["w=mst_prim_heap(4,[(0,1,1),(1,2,2),(2,3,3),(3,0,4),(0,2,2)]); assert w==1+2+3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement chu_liu_edmonds_arborescence_return_edges(n:int,edges:list[tuple[int,int,int]],root:int)->list[tuple[int,int]] returning the edges of minimum arborescence.","tests":["E=chu_liu_edmonds_arborescence_return_edges(4,[(0,1,1),(1,2,1),(0,2,5),(2,3,1)],0); assert set(E)=={(0,1),(1,2),(2,3)}"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement lp_dual_simplex_minimize(c,A,b)->tuple[float,list[float]] solving min c^T x s.t. Ax>=b, x>=0 by converting to standard form and using simplex.","tests":["val,x=lp_dual_simplex_minimize([1,1],[[1,0],[0,1]],[1,2]); assert abs(val-3)<1e-9"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement monte_carlo_path_tracer_one_bounce(albedo:float,lights:int,seed:int=0)->float toy estimator: sample a random direction, one bounce diffuse, uniform hemispherical sampling. Return expected contribution estimate for unit light intensity (small).","tests":["v=monte_carlo_path_tracer_one_bounce(0.8,1000,1); assert 0<v<1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement stark_ladder_energies(n:int,F:float)->list[float] eigenvalues of a tight-binding chain of length n with field F: diagonal i*F and off-diagonals -1. Use numpy-free power method on tridiagonal and compute k lowest eigenvalues via simple QR or bisection; return sorted energies (small n<=10).","tests":["E=stark_ladder_energies(5,0.1); assert len(E)==5 and E==sorted(E)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement quantum_circuit_sim_2q(gates:list[tuple[str,tuple]])->list[complex] simulate 2-qubit state starting |00>. Gates: 'H',q; 'X',q; 'CNOT',(c,t); 'RZ',(q,theta). Return state vector of length 4.","tests":["st=quantum_circuit_sim_2q([('H',(0,)),('CNOT',(0,1))]); import math; # Bell state amplitudes ~1/sqrt(2)\nassert abs(abs(st[0])-(2**-0.5))<1e-9 and abs(st[3].conjugate())>0.7"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement grover_one_iteration_oracle(blacklist:set[int])->list[list[complex]] build 2-qubit Grover diffusion+oracle unitary acting on |00>,...,|11> (return 4x4 matrix). Verify on single marked state gives amplitude inversion around mean.","tests":["U=grover_one_iteration_oracle({3}); import cmath; # Apply to |++>\npsi=[0.5]*4; # uniform superposition\nphi=[sum(U[i][j]*psi[j] for j in range(4)) for i in range(4)]; assert phi[3].real>0.6"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement sat_max2sat_greedy(n:int,clauses:list[tuple[int,int]])->int greedy algorithm for Max-2SAT returning number of satisfied clauses; use simple randomized rounding-like heuristic.","tests":["cnt=sat_max2sat_greedy(3,[(1,2),(-1,2),(-2,3),(-3,-1)]); assert 0<=cnt<=4"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement wigner_semicircle_sample(n:int,seed:int=0)->list[float] eigenvalues of random symmetric matrix with entries ~N(0,1/n) (small n<=20) via simple power/QR; return list.","tests":["l=wigner_semicircle_sample(5,1); assert len(l)==5"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement wasserstein_gan_gradient_penalty(data:list[float],gen:list[float])->float compute 1D toy gradient penalty term between real and generated sorted samples using finite differences.","tests":["gp=wasserstein_gan_gradient_penalty([0,1,2],[0,2,4]); assert gp>=0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement bayesian_information_criterion(loglik:float,k:int,n:int)->float BIC=-2*loglik + k*ln(n). Also implement akaike_information_criterion(loglik:float,k:int)->float AIC=2k-2loglik.","tests":["assert bayesian_information_criterion(-10.0,3,100)>akaike_information_criterion(-10.0,3)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement survival_kaplan_meier(times:list[float],events:list[int])->list[tuple[float,float]] stepwise survival function values at unique event times (right-censored 0/1). Return list of (t,S(t)).","tests":["S=survival_kaplan_meier([1,2,3,4],[1,0,1,1]); assert len(S)>=2 and 0<S[-1][1]<=1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement cox_partial_likelihood(beta:float,x:list[float],t:list[float],e:list[int])->float for 1D covariate; return log partial likelihood.","tests":["ll=cox_partial_likelihood(0.1,[0,1,2],[1,2,3],[1,1,1]); assert isinstance(ll,float)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement hazmat_spill_advection_diffusion(u:float,D:float,dx:float,dt:float,steps:int)->list[float] 1D advection-diffusion with upwind + explicit diffusion on initial delta at center; reflect BC. Return final concentration.","tests":["c=hazmat_spill_advection_diffusion(0.1,0.01,1.0,0.1,10); assert len(c)%2==1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement poisson_disc_sampling_annulus(rmin:float,rmax:float,rr:float,seed:int=0)->list[tuple[float,float]] Bridson in ring. Ensure all distances â¥ rr and radii within [rmin,rmax].","tests":["pts=poisson_disc_sampling_annulus(1.0,2.0,0.3,1); assert all(1.0<= (x*x+y*y)**0.5 <=2.0 for x,y in pts)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement rrt_connect_2d(start,goal,obstacles,iters,seed)->list[tuple[float,float]] bidirectional RRT-Connect in 2D with circular obstacles (x,y,r). Return path if found else empty.","tests":["p=rrt_connect_2d((0,0),(1,1),[(0.5,0.5,0.1)],500,1); assert p==[] or (p[0]==(0,0) and p[-1]==(1,1))"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement mpc_lqr_horizon(A,B,Q,R,x0,ref,horizon)->list[list[float]] finite-horizon LQR control sequence u_t minimizing quadratic cost (small dims).","tests":["U=mpc_lqr_horizon([[1,1],[0,1]],[[0],[1]],[[1,0],[0,0]],[[1]], [1,0], [0,0], 5); assert len(U)==5 and len(U[0])==1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement extended_euclid_poly_mod(p:list[int],q:list[int],mod:int)->tuple[g,x,y] such that g=gcd(p,q) and p*x+q*yâ¡g (mod mod) for polynomials over GF(mod).","tests":["g,x,y=extended_euclid_poly_mod([1,0,1],[1,1],5); # x^2+1 and x+1 over GF(5)\nassert g in ([1],[1])"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement reed_solomon_encode_gf256(msg:list[int],nsym:int)->list[int] using primitive poly 0x11d; return codeword msg+parity. Small nsym<=8.","tests":["cw=reed_solomon_encode_gf256([1,2,3],4); assert len(cw)==7"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement lda_gibbs_sampler(docs:list[list[int]],K:int,iters:int,alpha:float=0.1,beta:float=0.01,seed:int=0)->tuple[lists] return (z_assignments, phi, theta) for tiny corpora (no external libs).","tests":["z,phi,theta=lda_gibbs_sampler([[0,1,2,0],[2,2,1]],2,20,0.1,0.1,1); assert len(phi)==2 and len(theta)==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement markov_chain_monte_carlo_ising_2d(n:int,T:float,steps:int,seed:int=0)->list[list[int]] Metropolis for square lattice with periodic BC and J=1, zero field. Return final spins.","tests":["S=markov_chain_monte_carlo_ising_2d(8,2.5,1000,1); assert len(S)==8 and len(S[0])==8"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement percolation_threshold_lattice(n:int,seed:int=0)->float estimate site percolation threshold via binary search and BFS connectivity; return p* where giant component percolates from top to bottom (coarse).","tests":["p=percolation_threshold_lattice(20,1); assert 0<p<1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement seir_discrete_hospital_beds(S,E,I,R,beta,sigma,gamma,cap,dt,steps)->tuple track SEIR with limited hospital capacity reducing beta when I>cap. Return final tuple.","tests":["S,E,I,R=seir_discrete_hospital_beds(999,0,1,0,0.3,0.2,0.1,20,1.0,50); assert S+E+I+R==1000"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement pde_wave_2d_fd(u0,ut0,c,dx,dy,dt,steps)->list[list[float]] leapfrog 2D wave with zero boundaries. u0 and ut0 are initial displacement and velocity grids.","tests":["U=pde_wave_2d_fd([[0,0,0],[0,1,0],[0,0,0]],[[0,0,0],[0,0,0],[0,0,0]],1.0,1.0,1.0,0.1,5); assert len(U)==3 and len(U[0])==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement navier_stokes_2d_vorticity_streamfunc_step(w: list[list[float]], psi: list[list[float]], nu: float, dt: float, dx: float, dy: float)->tuple one time step semi-implicit for small grids (toy). Return (w_new, psi_new).","tests":["w,psi=navier_stokes_2d_vorticity_streamfunc_step([[0,0],[0,0]],[[0,0],[0,0]],0.1,0.01,1.0,1.0); assert len(w)==2 and len(psi)==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement simulated_annealing_tsp(points, T0:float, cooling:float, iters:int, seed:int=0)->float SA for TSP tour length (2-opt neighborhood).","tests":["d=simulated_annealing_tsp([(0,0),(1,0),(1,1),(0,1)],1.0,0.995,1000,1); assert d>=4.0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement hungarian_rectangular(cost:list[list[int]])->int minimal assignment for rectangular matrices (more jobs than workers).","tests":["c=hungarian_rectangular([[4,1,3,2],[2,0,5,3],[3,2,2,3]]); assert c==5"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement pagerank_time_evolving(graphs:list[list[list[int]]],d:float=0.85,eps:float=1e-9)->list[list[float]] compute PageRank for each snapshot graph, warm-starting from previous.","tests":["res=pagerank_time_evolving([[[1],[0]],[[1],[0]]]); assert len(res)==2 and abs(sum(res[1])-1.0)<1e-9"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement streaming_quantiles_greenwald_khanna(eps:float)->class with insert(x) and query(phi:float)->float estimating Ï-quantile within Îµ.","tests":["sk=streaming_quantiles_greenwald_khanna(0.1); [sk.insert(i) for i in [1,2,3,4,5]]; q=sk.query(0.5); assert 2<=q<=4"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement cramer_von_mises_two_sample(x:list[float],y:list[float])->float Cramerâvon Mises statistic (unweighted).","tests":["w=cramer_von_mises_two_sample([0,0,1,1],[0,1,1,1]); assert w>=0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement sinkhorn_knopp_transport(a:list[float],b:list[float],C:list[list[float]],lam:float,iters:int)->list[list[float]] entropic OT; return transport matrix with row sums âa and col sums âb.","tests":["P=sinkhorn_knopp_transport([0.5,0.5],[0.5,0.5],[[0,1],[1,0]],10.0,100); assert abs(sum(P[0])-0.5)<1e-3 and abs(P[0][0]+P[1][0]-0.5)<1e-3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement low_rank_approx_svd(A:list[list[float]],k:int)->list[list[float]] best rank-k approximation via power iteration for singular vectors (small).","tests":["M=low_rank_approx_svd([[1,0],[0,0]],1); assert abs(M[0][0]-1)<1e-3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement kmeans_matrix_completion(R:list[list[float]],k:int,iters:int,seed:int=0)->list[list[float]] fill missing NaNs by clustering users and items iteratively (toy).","tests":["import math; R=[[5,math.nan,1],[4,2,math.nan]]; X=kmeans_matrix_completion(R,2,10,1); assert not any(math.isnan(v) for row in X for v in row)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement als_matrix_factorization(R:list[list[float]],k:int,lmbda:float,steps:int)->tuple[U,V] alternating least squares with missing entries marked as None.","tests":["R=[[5,None,1],[4,2,None]]; U,V=als_matrix_factorization(R,2,0.1,10); assert len(U)==2 and len(V)==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement active_set_qp(H:list[list[float]],f:list[float],A:list[list[float]],b:list[float]])->list[float] solve small QP min 0.5 x^T H x + f^T x s.t. Ax<=b using active-set (KKT).","tests":["x=active_set_qp([[2,0],[0,2]],[-2,-5],[[1,0],[0,1]], [0,0]); assert abs(x[0]-1)<1e-3 and abs(x[1]-2.5)<1e-3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement newton_fractal_classify(f,df,grid:tuple[int,int],xmin,xmax,ymin,ymax,iters:int)->list[list[int]] classify to roots via Newton's method with color index per converged root. Use small grid.","tests":["f=lambda z:z**3-1; df=lambda z:3*z**2; M=newton_fractal_classify(f,df,(10,10),-1,1,-1,1,20); assert len(M)==10 and len(M[0])==10"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement lagrange_points_circular_restricted(mu:float)->list[tuple[float,float]] compute planar coordinates of L1,L2,L3 in rotating frame for two-body system using 1D root finding for collinear points (return only x on x-axis at y=0).","tests":["L=lagrange_points_circular_restricted(0.0121505856); assert len(L)==3 and all(abs(y)<1e-6 for x,y in L)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement geodesic_dijkstra_on_sphere(nodes:list[tuple[float,float]],edges:list[tuple[int,int]],)->list[list[float]] distances using great-circle distances between connected nodes (haversine). Return all-pairs via running Dijkstra from each node.","tests":["D=geodesic_dijkstra_on_sphere([(0,0),(0,1),(1,1)],[(0,1),(1,2)]); assert D[0][2]>0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement kleinberg_small_world_routing(n:int,p:float,q:float,seed:int=0)->int build a 2D grid nÃn with long-range links per Kleinberg (r=2) and simulate greedy routing from top-left to bottom-right; return path length. Use Manhattan distance greedy.","tests":["L=kleinberg_small_world_routing(5,1.0,1.0,1); assert L>=8"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement stochastic_block_model_communities(n:int,k:int,p_in:float,p_out:float,seed:int=0)->tuple[adj,labels] and spectral_clustering_2way(adj)->list[int]; verify recovered labels up to relabeling on small graphs.","tests":["adj,lab=stochastic_block_model_communities(20,2,0.5,0.05,1); pred=spectral_clustering_2way(adj); assert len(pred)==20"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement markov_chain_irreducible(P:list[list[float]])->bool test irreducibility via graph reachability.","tests":["assert markov_chain_irreducible([[0.5,0.5],[0.5,0.5]]) and not markov_chain_irreducible([[1,0],[0,1]])"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement dual_numbers_autodiff(f, x:float)->tuple[float,float] using forward-mode dual numbers. Support f built from +,-,*,/,pow(**), and functions sin,cos,exp,log. Return (f(x), f'(x)).","tests":["import math; y,dy=dual_numbers_autodiff(lambda x: x*x + 3*x + 1, 2.0); assert abs(y- (4+6+1))<1e-12 and abs(dy- (2*2+3))<1e-12; y,dy=dual_numbers_autodiff(lambda x: math.sin(x)*math.exp(x), 0.3); assert abs(y- (math.sin(0.3)*math.exp(0.3)))<1e-12 and abs(dy- (math.cos(0.3)*math.exp(0.3)+math.sin(0.3)*math.exp(0.3)))<1e-9"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement reverse_mode_autodiff(f_expr:str, x0:float)->tuple[float,float] Build a tiny expression engine for variable x supporting +,-,*,/,^, sin,cos,exp,log and compute value and derivative via reverse-mode AD.","tests":["import math; v,d=reverse_mode_autodiff('sin(x)*exp(x)+x^3',0.2); assert abs(v- (math.sin(0.2)*math.exp(0.2)+0.2**3))<1e-9 and abs(d- (math.cos(0.2)*math.exp(0.2)+math.sin(0.2)*math.exp(0.2)+3*0.2**2))<1e-6"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement kahan_sum(x:list[float])->float to reduce floating-point error using Kahan compensated summation.","tests":["s1=sum([1e100,1,-1e100]); s2=kahan_sum([1e100,1,-1e100]); assert s1==0.0 and abs(s2-1.0)<1e-12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement bwt_transform(s:str)->tuple[str,int] BurrowsâWheeler transform returning (last_column_string, original_index). Implement inverse_bwt(last:int,s:str)->str.","tests":["t,i=bwt_transform('banana$'); assert t=='annb$aa'; s=inverse_bwt(i,t); assert s=='banana$'"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement bron_kerbosch_max_cliques(n:int,edges:list[tuple[int,int]])->list[list[int]] using BronâKerbosch with pivoting; return sorted cliques (each sorted).","tests":["res=bron_kerbosch_max_cliques(5,[(0,1),(1,2),(0,2),(3,4)]); assert sorted([sorted(c) for c in res])==[[0,1,2],[3,4]]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement maximum_independent_set_bitdp(n:int,edges:list[tuple[int,int]])->int using bit DP for n<=25.","tests":["m=maximum_independent_set_bitdp(5,[(0,1),(1,2),(2,3),(3,4)]); assert m==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement minimum_dominating_set_bruteforce(n:int,edges:list[tuple[int,int]])->int small graphs (n<=20).","tests":["d=minimum_dominating_set_bruteforce(4,[(0,1),(1,2),(2,3)]); assert d==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement lll_reduction(B:list[list[int]])->list[list[int]] LLL lattice basis reduction (delta=0.75) for small 2D/3D integer bases. Return reduced basis as list of lists.","tests":["R=lll_reduction([[105,821],[37,290]]); # check size reduced (norm nondecreasing)\nimport math; lens=[(r[0]**2+r[1]**2)**0.5 for r in R]; assert lens[0]<=lens[1]+1e-9"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement gmres_solve(A:callable,b:list[float],x0:list[float],restart:int,max_iter:int,tol:float)->list[float] GMRES for small dense systems where A is matvec.","tests":["A=lambda v:[4*v[0]+v[1], v[0]+3*v[1]]; x=gmres_solve(A,[1,2],[0,0],5,50,1e-10); assert all(abs(a-b)<1e-6 for a,b in zip(x,[0.0909090909,0.6363636364]))"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement adi_heat_2d(u0:list[list[float]],alpha:float,dt:float,dx:float,dy:float,steps:int)->list[list[float]] Alternating Direction Implicit scheme on a rectangle with zero Dirichlet boundaries.","tests":["U=adi_heat_2d([[0,0,0],[0,1,0],[0,0,0]],1.0,0.1,1.0,1.0,2); assert len(U)==3 and len(U[0])==3 and U[1][1]<1.0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement chebyshev_spectral_diff_matrix(n:int)->list[list[float]] first-derivative matrix D on ChebyshevâLobatto points x_k=cos(pi*k/(n-1)).","tests":["D=chebyshev_spectral_diff_matrix(5); assert len(D)==5 and len(D[0])==5 and abs(D[0][0])<10"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement euler_maruyama_gbm(S0:float,mu:float,sigma:float,dt:float,steps:int,seed:int=0)->list[float] simulate Geometric Brownian Motion.","tests":["path=euler_maruyama_gbm(1.0,0.0,0.2,0.01,100,1); assert len(path)==101 and all(v>0 for v in path)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement ornstein_uhlenbeck_euler(x0:float,theta:float,mu:float,sigma:float,dt:float,steps:int,seed:int=0)->list[float] OU process.","tests":["x=ornstein_uhlenbeck_euler(0.0,1.0,0.0,0.1,0.1,50,1); assert len(x)==51"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement strang_splitting_reaction_diffusion(u0:list[float],k:float,D:float,dt:float,dx:float,steps:int)->list[float] 1D split: half reaction, diffusion (explicit), half reaction. Dirichlet zero.","tests":["u=strang_splitting_reaction_diffusion([0,1,0],0.1,1.0,0.1,1.0,5); assert len(u)==3 and u[1]<1.0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement rusanov_flux_burgers(u_left:float,u_right:float)->float approximate Rusanov (local LaxâFriedrichs) flux for Burgers' f(u)=u^2/2.","tests":["assert abs(rusanov_flux_burgers(1.0,0.0)-0.25)<1e-9"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement multigrid_vcycle_poisson_2d(rhs:list[list[float]],levels:int,iterations:int)->list[list[float]] Zero Dirichlet boundary. Use GaussâSeidel smoothing and full-weighting restriction / bilinear prolongation.","tests":["U=multigrid_vcycle_poisson_2d([[0,0,0],[0,1,0],[0,0,0]],levels=2,iterations=3); assert len(U)==3 and len(U[0])==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement poisson_masked_fd(rhs:list[list[float]],mask:list[list[int]])->list[list[float]] Solve â^2 u = rhs on masked domain (1=inside) with u=0 outside; do Jacobi iterations (200).","tests":["U=poisson_masked_fd([[0,0,0],[0,1,0],[0,0,0]],[[0,1,0],[1,1,1],[0,1,0]]); assert len(U)==3 and U[1][1]<0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement automatic_grid_refinement_1d(u:list[float],threshold:float)->list[int] Return indices where |second difference|>threshold (interior).","tests":["idx=automatic_grid_refinement_1d([0,0,1,0,0],0.2); assert 2 in idx"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement steiner_tree_metric_closure(n:int,edges:list[tuple[int,int,int]],terminals:list[int])->int approximate Steiner tree cost via metric closure + MST.","tests":["w=steiner_tree_metric_closure(5,[(0,1,1),(1,2,1),(2,3,1),(3,4,1),(0,4,10)], [0,2,4]); assert w<=5"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement hamiltonian_path_exists(n:int,edges:list[tuple[int,int]])->bool using DP over subsets (n<=18).","tests":["assert hamiltonian_path_exists(4,[(0,1),(1,2),(2,3)]) and not hamiltonian_path_exists(3,[(0,1)])"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement palindromic_tree_count(s:str)->int build Eertree/Palindromic Tree and return number of distinct palindromic substrings.","tests":["assert palindromic_tree_count('ababa')==5 and palindromic_tree_count('aaaa')==4"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement rmq_sparse_table(arr:list[int])->object building structure with query(l,r)->int that returns minimum in [l,r] inclusive.","tests":["st=rmq_sparse_table([4,2,3,1,5]); assert st.query(1,3)==1 and st.query(0,2)==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement heavy_light_decomposition_path_sum(n:int,edges:list[tuple[int,int]],values:list[int])->object supporting path_sum(u,v) and update(u,new_val) on tree.","tests":["hld=heavy_light_decomposition_path_sum(5,[(0,1),(1,2),(1,3),(3,4)],[1,2,3,4,5]); assert hld.path_sum(2,4)==2+1+3+4+5- (1) # sum along 2-1-3-4; check by recomputing\ns=hld.path_sum(2,4); assert s== (3+2+4+5)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement spherical_harmonic_Ylm(l:int,m:int,theta:float,phi:float)->complex (CondonâShortley) using associated Legendre polynomials. Return complex value.","tests":["import cmath,math; Y=spherical_harmonic_Ylm(1,0,math.pi/2,0.0); assert abs(Y.real)<1e-9 and abs(Y.imag- (math.sqrt(3/(4*math.pi))*1.0))<1e-6"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement kernighan_lin_partition(n:int,edges:list[tuple[int,int,int]])->tuple[set,set] bipartition minimizing cut weight using KL heuristic (start with first half A).","tests":["A,B=kernighan_lin_partition(4,[(0,2,1),(1,3,1),(0,1,5),(2,3,5)]); assert len(A)+len(B)==4"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement projected_gradient_lasso(A:list[list[float]],b:list[float],lam:float,steps:int,lr:float)->list[float] minimize 0.5||Ax-b||^2+Î»||x||_1 with ISTA (soft threshold).","tests":["x=projected_gradient_lasso([[1,0],[0,1]],[1,2],0.1,100,0.5); assert len(x)==2 and abs(x[0])<=1 and abs(x[1])<=2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement strassen_2x2(A:list[list[float]],B:list[list[float]])->list[list[float]] Strassen multiply for 2x2 blocks.","tests":["C=strassen_2x2([[1,2],[3,4]],[[5,6],[7,8]]); assert C==[[19,22],[43,50]]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement autodiff_tensor_reverse(matmul of 2D matrices) building a tiny engine that supports variables A,B and computes C=A@B and gradients dL/dA,dL/dB given upstream ones. Provide function test_grad(A,B)->tuple that returns (C,dA,dB) for L=sum(C).","tests":["C,dA,dB=test_grad([[1,2],[3,4]],[[5,6],[7,8]]); assert C==[[19,22],[43,50]] and dA==[[11,15],[11,15]] and dB==[[4,4],[6,6]]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement newton_backtracking_line_search(f,grad,hess,x0:list[float])->list[float] improve Newton with Armijo backtracking for small 2D convex f.","tests":["f=lambda x:(x[0]-1)**2+2*(x[1]+2)**2; g=lambda x:[2*(x[0]-1),4*(x[1]+2)]; H=lambda x:[[2,0],[0,4]]; x=newton_backtracking_line_search(f,g,H,[0.0,0.0]); assert abs(x[0]-1)<1e-6 and abs(x[1]+2)<1e-6"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement ode_backward_euler(f,y0:float,t1:float,h:float)->float implicit BE for stiff y' = f(t,y) using fixed-point iteration per step (10 iters).","tests":["f=lambda t,y:-10*y; y=ode_backward_euler(f,1.0,1.0,0.1); assert 0<y<1.0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement split_step_fourier_schrodinger(psi0:list[complex],V:list[float],dt:float,dx:float,steps:int)->list[complex] 1D TDSE with Ä§=1,m=1/2 so kinetic phase exp(-i k^2 dt). Use naive DFT/IDFT.","tests":["psi=split_step_fourier_schrodinger([1+0j,0j,0j,0j],[0,0,0,0],0.1,1.0,1); assert len(psi)==4 and isinstance(psi[0],complex)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement hmc_1d_logpdf(logpdf, gradlogpdf, x0:float, steps:int, L:int, eps:float, seed:int=0)->list[float] Hamiltonian Monte Carlo trajectory; return samples.","tests":["import math; logp=lambda x: -0.5*x*x; grad=lambda x: -x; s=hmc_1d_logpdf(logp,grad,0.0,200,5,0.1,1); import statistics as st; m=st.mean(s[100:]); assert abs(m)<0.3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement continuous_time_lqr(A:list[list[float]],B:list[list[float]],Q:list[list[float]],R:list[list[float]])->list[list[float]] solve ARE via iterative Newton/Kleinman; return K.","tests":["K=continuous_time_lqr([[0,1],[0,0]],[[0],[1]],[[1,0],[0,1]],[[1]]); assert len(K)==1 and len(K[0])==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement prony_method(signal:list[float],order:int)->tuple[list[float],list[float]] fit sum of exponentials a_k r_k^n: return (r, a) for small N (solve linear equations).","tests":["r,a=prony_method([1,3,7,15],2); # roughly 1*2^n + 0*...\nassert len(r)==2 and len(a)==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement omp_sparse_coding(D:list[list[float]],y:list[float],k:int)->list[float] Orthogonal Matching Pursuit for small dictionary; return sparse coeffs.","tests":["x=omp_sparse_coding([[1,0],[0,1],[1,1]],[1,1],2); assert len(x)==3 and sum(abs(v) for v in x)>0.9"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement arithmetic_decode(interval_low_high:tuple[float,float], length:int, p0:float)->str decode a binary string using given final interval from arithmetic coding with symbol probabilities (p0,1-p0).","tests":["lo,hi=0.28,0.34; s=arithmetic_decode((lo,hi),3,0.7); assert isinstance(s,str) and set(s)<=set('01') and len(s)==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement ecdsa_sign_verify(p:int,a:int,b:int,G:tuple[int,int],n:int,priv:int,msg:int)->tuple[sig_valid:bool] using deterministic nonce k=hash(msg)%n+1 (use simple hash: msg%1_000_003). Return True if verify works.","tests":["p=97;a=2;b=3; G=(3,6); n=5*19 # pretend\nok=ecdsa_sign_verify(p,a,b,G,n,7,42); assert ok"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement chinese_remainder_general(mods:list[int],rems:list[int])->int using Garner or pairwise CRT (mods pairwise coprime). Return smallest nonnegative solution.","tests":["x=chinese_remainder_general([3,5,7],[2,3,2]); assert x==23"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement big_integer_division(dividend:str, divisor:str)->tuple[str,str] return (quotient, remainder) for nonnegative integers given as strings. No big-int builtins except int for single digits.","tests":["q,r=big_integer_division('12345678901234567890','12345'); assert q=='1000054000810' and r=='3390'"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement bwt_mtf_rle_encode(s:str)->str pipeline: BWT (append $ if not present), move-to-front encoding (alphabet from sorted chars), then run-length encode with counts as bytes joined by '.' (simple). Implement inverse to recover original string.","tests":["enc=bwt_mtf_rle_encode('banana'); dec=bwt_mtf_rle_decode(enc); assert dec=='banana'"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement simple_ll1_parser(grammar:dict, start:str, tokens:list[str])->bool build FIRST/FOLLOW, table, and parse tokens. Grammar uses uppercase nonterminals and lowercase terminals.","tests":["G={'E':[('T','E_'),], 'E_':[('+','T','E_'), ('Îµ',)], 'T':[('F','T_')], 'T_':[('*','F','T_'),('Îµ',)], 'F':[('(','E',')'),('id',)]}; assert simple_ll1_parser(G,'E',['id','+','id','*','id'])"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement tiny_llm_tokenizer(text:str)->list[str] unigram+bigram wordpiece-like: start with characters (letters/digits) and iteratively merge most frequent adjacent tokens for 20 merges; return vocab list. Provide encode(text)->list[str] that uses greedy longest-match.","tests":["v=tiny_llm_tokenizer('low lower lowest low lower'); assert isinstance(v,list) and len(v)>26"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement cpu_sjf_preemptive(jobs:list[tuple[int,int]])->tuple[avg_wait,avg_turn] jobs=(arrival,burst). Preemptive Shortest Remaining Time First.","tests":["w,t=cpu_sjf_preemptive([(0,7),(2,4),(4,1),(5,4)]); assert 0<=w<=t and t>0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement buddy_allocator_sim(capacity:int)->class with alloc(size)->int and free(addr:int)->None. Sizes power-of-two; return starting address or -1 if fail. Level min block 1.","tests":["ba=buddy_allocator_sim(16); a=ba.alloc(3); b=ba.alloc(4); assert a!=-1 and b!=-1; ba.free(a); c=ba.alloc(8); assert c in (0,8)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement dfa_minimization(states:set, alphabet:set, start, accept:set, trans:dict)->tuple minimized DFA using Hopcroft's algorithm. Return (states, start, accept, trans).","tests":["S={'A','B','C'}; A={'0','1'}; start='A'; acc={'C'}; T={('A','0'):'B',('A','1'):'C',('B','0'):'B',('B','1'):'C',('C','0'):'C',('C','1'):'C'}; m=dfa_minimization(S,A,start,acc,T); assert len(m[0])==3 or len(m[0])==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement ll1_calc_first_follow(grammar:dict)->tuple[dict,dict] for Îµ-productions 'Îµ'. Return FIRST and FOLLOW sets for each nonterminal.","tests":["G={'S':[('A','B')],'A':[('a',),('Îµ',)],'B':[('b',)]}; FIRST,FOLLOW=ll1_calc_first_follow(G); assert 'a' in FIRST['A'] and 'Îµ' in FIRST['A'] and 'b' in FOLLOW['A']"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement dcel_polygon_boolean(A:list[tuple[float,float]],B:list[tuple[float,float]],op:str)->list[tuple[float,float]] polygon boolean ops for convex polygons (op in {'union','intersect','diff'}) using SutherlandâHodgman style.","tests":["U=dcel_polygon_boolean([(0,0),(2,0),(2,2),(0,2)],[(1,1),(3,1),(3,3),(1,3)],'intersect'); assert set(U)=={(1,1),(2,1),(2,2),(1,2)}"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement bowyer_watson_delaunay(points:list[tuple[float,float]])->list[tuple[int,int,int]] 2D Delaunay triangulation for small sets (no degenerate cases). Return triangles as index triples.","tests":["tri=bowyer_watson_delaunay([(0,0),(1,0),(0,1),(1,1)]); assert len(tri) in (1,2)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement z_order_morton_encode(x:int,y:int)->int interleave 16-bit x,y into 32-bit Morton code; implement decode back.","tests":["m=z_order_morton_encode(5,6); x,y=z_order_morton_decode(m); assert (x,y)==(5,6)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement poisson_surface_reconstruction_2d(points:list[tuple[float,float,float]],grid:int)->list[list[float]] Given (x,y,value) scattered points in [0,1]^2, solve Îu = â Î´(x-x_i,y-y_i) w_i approximated on grid by nearest-cell deposition and Jacobi smoothing; return potential grid.","tests":["U=poisson_surface_reconstruction_2d([(0.5,0.5,1.0)],16); assert len(U)==16 and len(U[0])==16 and U[8][8]<0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement marching_squares_isocontour(Z:list[list[float]],iso:float)->list[list[tuple[float,float]]] extract polylines for isovalue (grid cell size 1).","tests":["P=marching_squares_isocontour([[0,0],[1,1]],0.5); assert isinstance(P,list)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement poisson_disk_sampling_polygon(poly:list[tuple[float,float]],r:float,seed:int=0)->list[tuple[float,float]] Bridson in arbitrary simple polygon via rejection of out-of-bounds; small polygons.","tests":["pts=poisson_disk_sampling_polygon([(0,0),(2,0),(2,2),(0,2)],0.3,1); assert all(0<=x<=2 and 0<=y<=2 for x,y in pts)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement quadtree_compress_gray(img:list[list[int]],tol:int)->object build quadtree that merges blocks where max-min<=tol. Provide decompress()->list[list[int]].","tests":["qt=quadtree_compress_gray([[1,1,2,2],[1,1,2,2],[3,3,4,4],[3,3,4,4]],1); out=qt.decompress(); assert out==[[1,1,2,2],[1,1,2,2],[3,3,4,4],[3,3,4,4]]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement poisson_blend_2d(target, source, mask, iters)->list[list[float]] classic 2D Poisson blending with 4-neighbor Laplacian and Dirichlet boundary from target.","tests":["T=[[0,0,0],[0,0,0],[0,0,0]]; S=[[0,0,0],[0,1,0],[0,0,0]]; M=[[0,0,0],[0,1,0],[0,0,0]]; R=poisson_blend_2d(T,S,M,100); assert 0<R[1][1]<1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement sobol_sequence_2d(n:int)->list[tuple[float,float]] first n points using direction numbers for 2D (primitive polynomials 1 and 3).","tests":["pts=sobol_sequence_2d(4); assert len(pts)==4 and all(0<=x<=1 and 0<=y<=1 for x,y in pts)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement halton_sequence(d:int,n:int,bases:list[int])->list[list[float]] generate d-dim Halton using provided prime bases.","tests":["H=halton_sequence(2,5,[2,3]); assert len(H)==5 and len(H[0])==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement blue_noise_mask(N:int,seed:int=0)->list[list[int]] generate NxN ordered dithering mask approximating blue noise via void-and-cluster (few iterations).","tests":["M=blue_noise_mask(8,1); assert len(M)==8 and len(M[0])==8"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement rrt_star_with_costmap(start,goal,costmap:list[list[float]],step:float,iters:int,seed:int=0)->list[tuple[float,float]] 2D path avoiding high-cost cells (>0.8) treated as obstacles.","tests":["p=rrt_star_with_costmap((0,0),(1,1),[[0,0],[0,0]],0.1,100,1); assert p and p[0]==(0,0) and p[-1]==(1,1)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement quaternion_slerp(q0:tuple,q1:tuple,t:float)->tuple unit quaternions (w,x,y,z).","tests":["import math; q=quaternion_slerp((1,0,0,0),(0,1,0,0),0.5); n=(q[0]**2+q[1]**2+q[2]**2+q[3]**2)**0.5; assert abs(n-1)<1e-6"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement rigid_icp_point_to_plane(src:list[tuple[float,float,float]],dst:list[tuple[float,float,float]],normals:list[tuple[float,float,float]],iters:int)->tuple[R,t] small ICP minimizing point-to-plane error.","tests":["R,t=rigid_icp_point_to_plane([(0,0,0)],[(1,1,1)],[(0,0,1)],5); assert len(R)==3 and len(t)==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement voxel_hash_tsdf_integrate(frames:list[tuple[pose,depth_image]]])->object integrate small TSDF in unit cube (coarse grid 20^3). Provide method query(x,y,z)->(tsdf,weight).","tests":["tsdf=voxel_hash_tsdf_integrate([]); # empty returns default\nv=tsdf.query(0.5,0.5,0.5); assert isinstance(v,tuple) and len(v)==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement cartpole_dynamics(state:list[float],u:float)->list[float] and simulate_cartpole(u_policy:callable, steps:int)->list[list[float]] simple cart-pole (linearized small angle) with dt=0.02. Return trajectory.","tests":["traj=simulate_cartpole(lambda s:0.0,10); assert len(traj)==11 and len(traj[0])==4"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement policy_gradient_bandit(K:int,probs:list[float],episodes:int,alpha:float,seed:int=0)->list[float] softmax policy on K-armed bandit; return learned preferences.","tests":["h=policy_gradient_bandit(2,[0.2,0.8],500,0.1,1); assert len(h)==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement value_iteration_stochastic_shortest_path(P:list[list[list[float]]],C:list[list[float]],terminal:int,gamma:float=0.99,eps:float=1e-9)->list[float] compute optimal cost-to-go with absorbing terminal.","tests":["V=value_iteration_stochastic_shortest_path([[[1,0]],[[0,1]]],[[[1]],[[0]]],1,0.9,1e-6); assert abs(V[1])<1e-9"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement convex_hull_trick_add_query(lines:list[tuple[m,b]],queries:list[float])->list[float] monotonic CHT for minimum with increasing slopes and increasing query x.","tests":["ys=convex_hull_trick_add_query([(1,0),(2,0),(3,0)],[0,1,2]); assert ys==[0,1,2]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement li_chao_tree_min(segments:list[tuple[m,b]],xs:list[float])->list[float] Li Chao segment tree for static set of lines, query values at xs.","tests":["ys=li_chao_tree_min([(2,1),(0,3)],[-1,0,1]); assert ys[1]==1 and ys[2]==1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement online_convex_hull_add_point(points:list[tuple[float,float]])->object supporting add(p) and hull() returning CCW hull for dynamic point set (incremental).","tests":["ds=online_convex_hull_add_point([]); ds.add((0,0)); ds.add((1,0)); ds.add((0,1)); H=ds.hull(); assert set(H)=={(0,0),(1,0),(0,1)}"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement min_cycle_basis_unweighted(n:int,edges:list[tuple[int,int]])->list[list[int]] compute minimum cycle basis using Horton-like approach for small graphs (n<=12). Return list of cycles as edge index lists.","tests":["mcb=min_cycle_basis_unweighted(4,[(0,1),(1,2),(2,3),(3,0),(0,2)]); assert len(mcb)>=1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement weighted_interval_scheduling_with_reconstruction(iv:list[tuple[start,end,weight]])->tuple[max_weight,chosen_indices] return optimal weight and indices of intervals.","tests":["w,idx=weighted_interval_scheduling_with_reconstruction([(1,3,5),(2,5,6),(4,6,5),(6,7,4)]); assert w==10"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement min_edit_distance_transducer(a:str,b:str)->tuple[int,str] return distance and one optimal edit script using operations I(x),D(x),S(x->y),M(x).","tests":["d,ops=min_edit_distance_transducer('intention','execution'); assert d==5 and isinstance(ops,str)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement aho_corasick_stream(machine,text_iterable)->list[tuple[int,int]] streaming variant that yields matches as (pattern_index, end_index) while consuming an iterator of chars.","tests":["ac=aho_corasick_build(['ab','bc','abc']); res=aho_corasick_stream(ac,iter('zabca')); assert set(res)>= {(0,2),(2,2),(1,4)}"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement levenshtein_automaton_build(pattern:str, k:int)->object DFA recognizing strings within edit distance â¤k. Provide match(text)->bool.","tests":["auto=levenshtein_automaton_build('kitten',2); assert auto.match('sitting') and not auto.match('kttnzzz')"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement pair_hmm_forward(seq1:str,seq2:str,match:float,mismatch:float,gap_open:float,gap_extend:float)->float log-likelihood using affine-gap Pair-HMM (forward algorithm).","tests":["ll=pair_hmm_forward('AC','AG',1.0,0.1,0.2,0.5); assert isinstance(ll,float)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement wfa_edit_distance(a:str,b:str)->int Wavefront Alignment for edit distance (basic version) for small strings.","tests":["d=wfa_edit_distance('GATTACA','GCATGCU'); assert d>=0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement transitive_reduction_dag(n:int,edges:list[tuple[int,int]])->list[tuple[int,int]] return minimal set of edges preserving reachability.","tests":["TR=transitive_reduction_dag(4,[(0,1),(1,2),(0,2),(2,3)]); assert (0,2) not in TR and len(TR)==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement dominator_frontier(cfg_edges:list[tuple[int,int]], start:int)->dict compute dominance frontiers for a flow graph.","tests":["DF=dominator_frontier([(0,1),(1,2),(2,3),(1,3)],0); assert 1 in DF and isinstance(DF[1],set)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement ssa_construction(cfg_edges, start, blocks:dict[int,list[str]])->dict convert variables 'v#' with assignments into SSA using renaming on dominator tree; return renamed program per block (toy).","tests":["prog={0:['a=1','b=2'],1:['a=a+1'],2:['b=a+b']}; out=ssa_construction([(0,1),(1,2)],0,prog); assert isinstance(out,dict)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement minisat_unit_prop(clauses:list[list[int]],assignment:dict[int,bool])->tuple[new_clauses,new_assignment,conflict:bool] perform unit propagation step for CNF.","tests":["C=[[1,2],[-1,3],[ -3 ]]; nc,na,conf=minisat_unit_prop(C,{}); assert conf==False and na.get(3)==False"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement sat_walsh_hadamard_maxcut(weights:list[list[int]])->tuple[int,list[int]] approximate MAX-CUT via random hyperplane using Hadamard transform to compute correlations fast (small nâ¤16); return (cut,assignment in {Â±1}).","tests":["c,ass=sat_walsh_hadamard_maxcut([[0,1],[1,0]]); assert c in (1,0,2)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement online_ema_variance(alpha:float)->class with update(x)->None and mean(), var() returning exponentially weighted mean and variance (bias not corrected).","tests":["ema=online_ema_variance(0.1); [ema.update(v) for v in [1,2,3,4]]; assert 0<ema.var()"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement streaming_chernoff_misra_gries(k:int)->class heavy hitters with O(k) memory (Îµ=1/k). Methods: add(x), top()->list of (item,count_est).","tests":["mg=streaming_chernoff_misra_gries(3); [mg.add(x) for x in [1,2,3,1,1,2,4,1,2]]; T=mg.top(); assert any(i==1 for i,c in T)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement count_min_sketch(w:int,d:int,seed:int=0)->class with add(x,cnt) and query(x). Use pairwise-independent hash functions.","tests":["cms=count_min_sketch(32,3,1); [cms.add(i%5,1) for i in range(100)]; assert cms.query(3)>=20"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement reservoir_sampling_k(iterable,k:int,seed:int=0)->list sample k items uniformly without knowing length.","tests":["S=reservoir_sampling_k(range(1000),10,1); assert len(S)==10 and len(set(S))==10"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement union_find_persistent(n:int)->object persistent DSU supporting time-stamped union(t,u,v) and connected(t,u,v) queries for discrete times (small).","tests":["ds=union_find_persistent(3); ds.union(1,0,1); assert not ds.connected(0,0,1) and ds.connected(1,0,1)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement wavelet_denoise_haar(x:list[float],threshold:float)->list[float] 1D Haar shrinkage (soft threshold on detail coefficients).","tests":["y=wavelet_denoise_haar([1,2,100,2],10.0); assert len(y)==4 and abs(y[2])<100"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement total_variation_denoise_1d(y:list[float],lam:float)->list[float] ROF 1D denoising via taut-string (simple iterative shrinkage acceptable for small N).","tests":["x=total_variation_denoise_1d([0,10,0],1.0); assert len(x)==3 and x[1]<10"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement histogram_equalization_gray(img:list[list[int]])->list[list[int]] 0..255 grayscale.","tests":["out=histogram_equalization_gray([[0,0],[255,255]]); assert out==[[0,0],[255,255]]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement bilateral_filter_gray(img:list[list[int]],sigma_s:float,sigma_r:float,rad:int)->list[list[int]] slow reference implementation.","tests":["out=bilateral_filter_gray([[0,0,0],[0,255,0],[0,0,0]],1.0,50.0,1); assert out[1][1]>out[0][0]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement seam_carving_remove_k_vertical(img:list[list[int]],k:int)->list[list[int]] iteratively remove k vertical seams of minimal energy (use gradient magnitude).","tests":["res=seam_carving_remove_k_vertical([[1,2,3],[4,5,6],[7,8,9]],1); assert len(res[0])==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement ssim_index(img1:list[list[int]],img2:list[list[int]])->float structural similarity (SSIM) for small grayscale images using default constants (K1=0.01,K2=0.03,L=255).","tests":["s=ssim_index([[0,0],[0,0]],[[0,0],[0,0]]); assert abs(s-1.0)<1e-9"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement dtw_barycenter_averaging(series:list[list[float]],iters:int)->list[float] DBA for averaging multiple time series under DTW (small).","tests":["avg=dtw_barycenter_averaging([[0,1,2],[0,2,4]],5); assert len(avg)==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement kalman_filter_turn_model(zs:list[tuple[float,float]],dt:float,q:float,r:float)->list[tuple[float,float]] 2D nearly-constant turn model (x,y,v,theta). Return filtered positions.","tests":["pos=kalman_filter_turn_model([(0,0),(1,0),(2,0)],1.0,0.1,1.0); assert len(pos)==3"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement unscented_kalman_slam_2d(landmarks:list[tuple[float,float]],controls:list[tuple[float,float]],measurements:list[list[tuple[int,float,float]]])->tuple[pose,landmark_est] small 2D SLAM with range-bearing measurements (few steps).","tests":["pose,L=unscented_kalman_slam_2d([(1,1)],[(1,0.0)], [[(0,1.0,0.0)]]); assert len(L)==1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement sparse_pagerank_power(adj:list[list[int]],d:float,eps:float)->list[float] power iteration using adjacency lists with dangling handling.","tests":["r=sparse_pagerank_power([[1],[0,2],[0]],0.85,1e-10); assert abs(sum(r)-1.0)<1e-9"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement triangle_count_wedges(n:int,edges:list[tuple[int,int]])->int count triangles using node-iterator with hash sets.","tests":["t=triangle_count_wedges(4,[(0,1),(1,2),(2,0),(2,3)]); assert t==1"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement graph_sparsifier_benczur_karger(n:int,edges:list[tuple[int,int,float]],eps:float,seed:int=0)->list[tuple[int,int,float]] return sparsified edges with reweighting (probabilities from edge strengths estimated via degrees). Small graphs.","tests":["S=graph_sparsifier_benczur_karger(4,[(0,1,1),(1,2,1),(2,3,1),(3,0,1),(0,2,1)],0.5,1); assert len(S)>0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement karger_min_cut_random(n:int,edges:list[tuple[int,int]],trials:int,seed:int=0)->int Karger contraction algorithm; return best cut.","tests":["c=karger_min_cut_random(4,[(0,1),(1,2),(2,3),(3,0),(0,2)] ,20,1); assert c in (2,3)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement randomized_kd_forest(points,k:int,trees:int,seed:int=0)->object with query(q,leaf:int)->list[tuple[idx,dist]] approximate NN using multiple random KD-trees.","tests":["forest=randomized_kd_forest([(0,0),(1,0),(0,1),(1,1)],2,3,1); ans=forest.query((0.1,0.2),2); assert len(ans)==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement simhash(text:str)->int 64-bit SimHash over tokens (split by whitespace) using Python's hash() seeded deterministically via custom hash (e.g., FNV-1a).","tests":["h=simhash('to be or not to be'); g=simhash('to be or to be'); assert isinstance(h,int) and h.bit_length()<=64 and h!=0 and g!=0"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement min_hash_lsh_bands(signatures:list[list[int]],band_size:int)->dict map bucket key to list of item indices. Concatenate band hashes into tuple keys.","tests":["sig=[[1,2,3,4,5,6],[1,2,8,9,5,6],[9,9,9,9,9,9]]; buckets=min_hash_lsh_bands(sig,2); assert isinstance(buckets,dict) and any(len(v)>=2 for v in buckets.values())"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement pagerank_personalized_push(adj:list[list[int]],alpha:float,seed:int)->list[float] push-based sparse personalized PageRank from seed node index.","tests":["r=pagerank_personalized_push([[1],[2],[0]],0.85,0); assert abs(sum(r)-1.0)<1e-9 and r[0]>r[1]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement graph_sketch_spanners(n:int,edges:list[tuple[int,int,int]] )->list[tuple[int,int,int]] 2-spanner via greedy sorting by weight and adding edges if distance between endpoints>2*weight (use current spanner distances). Small graphs.","tests":["S=graph_sketch_spanners(4,[(0,1,1),(1,2,2),(2,3,3),(0,3,10),(0,2,5)]); assert len(S)<=len({(min(u,v),max(u,v)) for u,v,w in [(0,1,1),(1,2,2),(2,3,3),(0,3,10),(0,2,5)]})"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement bloom_filter_counting(m:int,k:int)->class counting Bloom filter with inc(x) and dec(x) and query(x)->bool. Use 4-bit counters per slot (simulate in list).","tests":["bf=bloom_filter_counting(64,3); bf.inc('a'); assert bf.query('a'); bf.dec('a'); assert not bf.query('a')"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement cuckoo_filter(cap:int,hashes:int,seed:int=0)->class approximate set with insert(x), contains(x)->bool, delete(x)->bool using fingerprints and cuckoo relocation. Use small buckets of size 2, fingerprint 8-bit.","tests":["cf=cuckoo_filter(64,2,1); assert cf.insert('x'); assert cf.contains('x'); assert cf.delete('x')"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement consistent_hash_with_virtual_nodes(nodes:list[str],replicas:int)->object with add_node, remove_node, get_node(key). Use md5.","tests":["ch=consistent_hash_with_virtual_nodes(['A','B'],3); k=ch.get_node('foo'); ch.add_node('C'); k2=ch.get_node('foo'); assert k2 in {'A','B','C'}"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement multiset_order_statistic_tree()->class augmented BST supporting insert(x), erase(x), kth(k)->int (1-indexed), and count_leq(x)->int. No duplicates merging; store counts.","tests":["t=multiset_order_statistic_tree(); t.insert(5); t.insert(1); t.insert(5); assert t.kth(2)==5 and t.count_leq(5)==3; t.erase(5); assert t.count_leq(5)==2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement persistent_segment_tree_sum(arr:list[int])->object supporting set(time,i,val) producing new version id, and query(version,l,r) sum.","tests":["pst=persistent_segment_tree_sum([1,2,3]); v1=pst.set(0,1,10); s0=pst.query(0,0,2); s1=pst.query(v1,0,2); assert s0==6 and s1==14"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement dijkstra_with_heap(n:int,adj:list[list[tuple[int,int]]],src:int)->list[int] and k_shortest_paths_yen_heap(n,adj,src,dst,k)->list[int] using shortest path oracle with heap.","tests":["adj=[[(1,1),(2,2)],[(3,1)],[(3,2)],[]]; L=k_shortest_paths_yen_heap(4,adj,0,3,3); assert L[:2]==[2,3]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement suffix_array_dc3(s:str)->list[int] using skew/DC3 algorithm (handle small ascii).","tests":["sa=suffix_array_dc3('banana'); assert sa==[5,3,1,0,4,2]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement minimal_perfect_hashing(keys:list[str])->tuple[table, g] using CHD (CzechâHavasâMajewski) style for small sets; provide lookup(key)->index.","tests":["tbl,g=minimal_perfect_hashing(['a','b','c']); idx={k:lookup(tbl,g,k) for k in ['a','b','c']}; assert sorted(idx.values())==[0,1,2]"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement isomorphic_strings_minimum_mapping(a:str,b:str)->dict or None compute minimal lexicographic bijection mapping chars of a to b if isomorphic; else None.","tests":["m=isomorphic_strings_minimum_mapping('egg','add'); assert m is not None and m['e']=='a' and m['g']=='d'"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement minimal_string_rotation_lyndon(s:str)->str using Booth's algorithm; return lexicographically smallest rotation.","tests":["assert minimal_string_rotation_lyndon('bba')=='abb'"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement suffix_tree_ukkonen_indices(s:str)->object build suffix tree (naive O(n^2) acceptable for n<=200). Provide find(pattern)->list[int] of start indices.","tests":["st=suffix_tree_ukkonen_indices('banana'); idx=st.find('ana'); assert set(idx)=={1,3}"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement unification_first_order(term1,term2)->dict|None for terms built from variables (strings starting with '?'), constants, and functors f(args...). Occurs check required.","tests":["u=unification_first_order(('f',['?x','a']),('f',['b','?y'])); assert u=={'?x':'b','?y':'a'}"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement resolution_refutation_cnf(clauses:list[set[tuple[str,bool]]])->bool CNF as sets of literals (name, is_positive). Use resolution to detect unsat; return True if unsatisfiable.","tests":["cnf=[{('p',True)},{('p',False)}]; assert resolution_refutation_cnf(cnf)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement prolog_like_backward_chaining(rules:list[tuple], query:tuple)->bool tiny Horn-clause engine without recursion depth issues for small facts; rules of form head, body_list.","tests":["facts=[(('parent','alice','bob'),[]),(('parent','bob','carl'),[])]; rules=facts+[ (('ancestor','?x','?y'), [('parent','?x','?y')]), (('ancestor','?x','?z'), [('parent','?x','?y'),('ancestor','?y','?z')]) ]; assert prolog_like_backward_chaining(rules,('ancestor','alice','carl'))"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement markov_logic_network_weighted_satisfiability(clauses:list[tuple[set[str],float]], evidence:set[str])->float compute log partition diff approx via pseudo-likelihood on unary/binary ground atoms; return score (higher better).","tests":["score=markov_logic_network_weighted_satisfiability([({\"A(x)\"},1.0)],set()); assert isinstance(score,float)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement gaussian_elimination_fraction(A:list[list[int]],b:list[int])->list[tuple[int,int]] solve Ax=b exactly over rationals using fraction pairs (num,den) reduced. Return solution as list of (num,den).","tests":["x=gaussian_elimination_fraction([[1,2],[3,4]],[5,6]); # solution (-4,1),(9,2)\nassert x[0]==(-4,1) and x[1]==(9,2)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement berlekamp_massey_linear_seq(s:list[int],mod:int)->list[int] find minimal linear recurrence modulo prime mod; return coefficients c1..ck s.t. s_n=â c_i s_{n-i}.","tests":["c=berlekamp_massey_linear_seq([0,1,1,2,3,5,8,13],10**9+7); assert len(c)>=2"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement linear_recurrence_nth(coef:list[int], init:list[int], n:int, mod:int)->int compute n-th term via linear recurrences using binary exponentiation on companion matrix (n 0-indexed).","tests":["v=linear_recurrence_nth([1,1],[0,1],10,10**9+7); assert v==55"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement online_convex_optimization_gradient_descent(feedbacks:list[tuple[a,b]],T:int)->list[float] solve OCO for linear losses l_t(x)=a_t x + b_t on xâ[0,1] using step size 1/sqrt(t); return decisions x_t.","tests":["xs=online_convex_optimization_gradient_descent([(1,0),(-1,0)]*5,10); assert len(xs)==10 and all(0<=x<=1 for x in xs)"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement online_newton_step_1d(feedbacks:list[tuple[a,b]],T:int)->list[float] ONS for linear losses on [0,1] with log-barrier regularization (simple variant).","tests":["xs=online_newton_step_1d([(1,0),(-1,0)]*5,10); assert len(xs)==10"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement convex_conjugate_entropy(p:list[float])->float compute sup_x (â p_i x_i - log(â exp x_i)). Return equals -â p_i log p_i (Shannon) for valid prob vec; handle zeros.","tests":["import math; v=convex_conjugate_entropy([0.5,0.5]); assert abs(v-math.log(2))<1e-9"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement wasserstein_distance_gaussians_1d(m1,s1,m2,s2)->float closed form W2 for 1D: sqrt((m1-m2)^2 + (s1-s2)^2).","tests":["d=wasserstein_distance_gaussians_1d(0,1,2,3); assert abs(d- ( (4+4)**0.5 ))<1e-12"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement kolmogorov_forward_birth_death(p_birth:list[float],p_death:list[float],pi0:list[float],steps:int)->list[float] iterate transient distribution on finite states with reflecting boundaries.","tests":["pi=kolmogorov_forward_birth_death([0.2,0.2],[0.1,0.1],[1,0,0],10); assert abs(sum(pi)-1)<1e-9"],"timeout_s":2,"memory_mb":256}
{"prompt":"Implement mc_estimate_absorbing_markov_fundamental_matrix(P:list[list[float]])->list[list[float]] compute N=(I-Q)^{-1} for absorbing chain with transient states first; small sizes; solve via Gaussian elimination.","tests":["N=mc_estimate_absorbing_markov_fundamental_matrix([[1,0,0],[0.5,0.5,0],[0.2,0.3,0.5]]); assert len(N)==2 and len(N[0])==2"],"timeout_s":2,"memory_mb":256}
